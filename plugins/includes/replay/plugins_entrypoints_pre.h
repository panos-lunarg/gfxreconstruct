/*
** Copyright (c) 2023 Valve Corporation
** Copyright (c) 2023 LunarG, Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and associated documentation files (the "Software"),
** to deal in the Software without restriction, including without limitation
** the rights to use, copy, modify, merge, publish, distribute, sublicense,
** and/or sell copies of the Software, and to permit persons to whom the
** Software is furnished to do so, subject to the following conditions:
**
** The above copyright notice and this permission notice shall be included in
** all copies or substantial portions of the Software.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
** FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
*/

/*
** This file is generated from the Khronos Vulkan XML API Registry.
**
*/

#ifndef GFXR_PLUGINS_REPLAY_ENTRYPOINTS_PRE_H
#define GFXR_PLUGINS_REPLAY_ENTRYPOINTS_PRE_H

#include "format/platform_types.h"
#include "decode/api_decoder.h"
#include "util/defines.h"
#include "decode/struct_pointer_decoder.h"
#include "decode/handle_pointer_decoder.h"
#include "generated/generated_vulkan_struct_decoders.h"

#include "vulkan/vulkan.h"
#include "vk_video/vulkan_video_codec_h264std.h"
#include "vk_video/vulkan_video_codec_h264std_decode.h"
#include "vk_video/vulkan_video_codec_h264std_encode.h"
#include "vk_video/vulkan_video_codec_h265std.h"
#include "vk_video/vulkan_video_codec_h265std_decode.h"
#include "vk_video/vulkan_video_codec_h265std_encode.h"
#include "vk_video/vulkan_video_codecs_common.h"

GFXRECON_BEGIN_NAMESPACE(gfxrecon)

GFXRECON_BEGIN_NAMESPACE(decode)
    class VulkanReplayConsumerBase;
GFXRECON_END_NAMESPACE(decode)

GFXRECON_BEGIN_NAMESPACE(plugins)
GFXRECON_BEGIN_NAMESPACE(replay)

using namespace decode;

// clang-format off
extern "C" {
VKAPI_ATTR void VKAPI_CALL CreateInstance_PreCall(const ApiCallInfo& call_info, VkResult returnValue, StructPointerDecoder<Decoded_VkInstanceCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkInstance>* pInstance);
VKAPI_ATTR void VKAPI_CALL DestroyInstance_PreCall(const ApiCallInfo& call_info, format::HandleId instance, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL EnumeratePhysicalDevices_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, PointerDecoder<uint32_t>* pPhysicalDeviceCount, HandlePointerDecoder<VkPhysicalDevice>* pPhysicalDevices);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFeatures_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceFeatures>* pFeatures);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFormatProperties_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, VkFormat format, StructPointerDecoder<Decoded_VkFormatProperties>* pFormatProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceImageFormatProperties_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, StructPointerDecoder<Decoded_VkImageFormatProperties>* pImageFormatProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceProperties_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceProperties>* pProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceQueueFamilyProperties_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, PointerDecoder<uint32_t>* pQueueFamilyPropertyCount, StructPointerDecoder<Decoded_VkQueueFamilyProperties>* pQueueFamilyProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceMemoryProperties_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceMemoryProperties>* pMemoryProperties);
VKAPI_ATTR void VKAPI_CALL CreateDevice_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkDeviceCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkDevice>* pDevice);
VKAPI_ATTR void VKAPI_CALL DestroyDevice_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL GetDeviceQueue_PreCall(const ApiCallInfo& call_info, format::HandleId device, uint32_t queueFamilyIndex, uint32_t queueIndex, HandlePointerDecoder<VkQueue>* pQueue);
VKAPI_ATTR void VKAPI_CALL QueueSubmit_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId queue, uint32_t submitCount, StructPointerDecoder<Decoded_VkSubmitInfo>* pSubmits, format::HandleId fence);
VKAPI_ATTR void VKAPI_CALL QueueWaitIdle_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId queue);
VKAPI_ATTR void VKAPI_CALL DeviceWaitIdle_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device);
VKAPI_ATTR void VKAPI_CALL AllocateMemory_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkMemoryAllocateInfo>* pAllocateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkDeviceMemory>* pMemory);
VKAPI_ATTR void VKAPI_CALL FreeMemory_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId memory, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL MapMemory_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, PointerDecoder<uint64_t, void*>* ppData);
VKAPI_ATTR void VKAPI_CALL UnmapMemory_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId memory);
VKAPI_ATTR void VKAPI_CALL FlushMappedMemoryRanges_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, uint32_t memoryRangeCount, StructPointerDecoder<Decoded_VkMappedMemoryRange>* pMemoryRanges);
VKAPI_ATTR void VKAPI_CALL InvalidateMappedMemoryRanges_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, uint32_t memoryRangeCount, StructPointerDecoder<Decoded_VkMappedMemoryRange>* pMemoryRanges);
VKAPI_ATTR void VKAPI_CALL GetDeviceMemoryCommitment_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId memory, PointerDecoder<VkDeviceSize>* pCommittedMemoryInBytes);
VKAPI_ATTR void VKAPI_CALL BindBufferMemory_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId buffer, format::HandleId memory, VkDeviceSize memoryOffset);
VKAPI_ATTR void VKAPI_CALL BindImageMemory_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId image, format::HandleId memory, VkDeviceSize memoryOffset);
VKAPI_ATTR void VKAPI_CALL GetBufferMemoryRequirements_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId buffer, StructPointerDecoder<Decoded_VkMemoryRequirements>* pMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL GetImageMemoryRequirements_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId image, StructPointerDecoder<Decoded_VkMemoryRequirements>* pMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL GetImageSparseMemoryRequirements_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId image, PointerDecoder<uint32_t>* pSparseMemoryRequirementCount, StructPointerDecoder<Decoded_VkSparseImageMemoryRequirements>* pSparseMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSparseImageFormatProperties_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, PointerDecoder<uint32_t>* pPropertyCount, StructPointerDecoder<Decoded_VkSparseImageFormatProperties>* pProperties);
VKAPI_ATTR void VKAPI_CALL QueueBindSparse_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId queue, uint32_t bindInfoCount, StructPointerDecoder<Decoded_VkBindSparseInfo>* pBindInfo, format::HandleId fence);
VKAPI_ATTR void VKAPI_CALL CreateFence_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkFenceCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkFence>* pFence);
VKAPI_ATTR void VKAPI_CALL DestroyFence_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId fence, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL ResetFences_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, uint32_t fenceCount, HandlePointerDecoder<VkFence>* pFences);
VKAPI_ATTR void VKAPI_CALL GetFenceStatus_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId fence);
VKAPI_ATTR void VKAPI_CALL WaitForFences_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, uint32_t fenceCount, HandlePointerDecoder<VkFence>* pFences, VkBool32 waitAll, uint64_t timeout);
VKAPI_ATTR void VKAPI_CALL CreateSemaphore_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkSemaphoreCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSemaphore>* pSemaphore);
VKAPI_ATTR void VKAPI_CALL DestroySemaphore_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId semaphore, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL CreateEvent_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkEventCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkEvent>* pEvent);
VKAPI_ATTR void VKAPI_CALL DestroyEvent_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId event, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL GetEventStatus_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId event);
VKAPI_ATTR void VKAPI_CALL SetEvent_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId event);
VKAPI_ATTR void VKAPI_CALL ResetEvent_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId event);
VKAPI_ATTR void VKAPI_CALL CreateQueryPool_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkQueryPoolCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkQueryPool>* pQueryPool);
VKAPI_ATTR void VKAPI_CALL DestroyQueryPool_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId queryPool, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL GetQueryPoolResults_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, PointerDecoder<uint8_t>* pData, VkDeviceSize stride, VkQueryResultFlags flags);
VKAPI_ATTR void VKAPI_CALL CreateBuffer_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkBufferCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkBuffer>* pBuffer);
VKAPI_ATTR void VKAPI_CALL DestroyBuffer_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId buffer, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL CreateBufferView_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkBufferViewCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkBufferView>* pView);
VKAPI_ATTR void VKAPI_CALL DestroyBufferView_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId bufferView, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL CreateImage_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkImageCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkImage>* pImage);
VKAPI_ATTR void VKAPI_CALL DestroyImage_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId image, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL GetImageSubresourceLayout_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId image, StructPointerDecoder<Decoded_VkImageSubresource>* pSubresource, StructPointerDecoder<Decoded_VkSubresourceLayout>* pLayout);
VKAPI_ATTR void VKAPI_CALL CreateImageView_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkImageViewCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkImageView>* pView);
VKAPI_ATTR void VKAPI_CALL DestroyImageView_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId imageView, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL CreateShaderModule_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkShaderModuleCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkShaderModule>* pShaderModule);
VKAPI_ATTR void VKAPI_CALL DestroyShaderModule_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId shaderModule, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL CreatePipelineCache_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkPipelineCacheCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkPipelineCache>* pPipelineCache);
VKAPI_ATTR void VKAPI_CALL DestroyPipelineCache_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId pipelineCache, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL GetPipelineCacheData_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId pipelineCache, PointerDecoder<size_t>* pDataSize, PointerDecoder<uint8_t>* pData);
VKAPI_ATTR void VKAPI_CALL MergePipelineCaches_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId dstCache, uint32_t srcCacheCount, HandlePointerDecoder<VkPipelineCache>* pSrcCaches);
VKAPI_ATTR void VKAPI_CALL CreateGraphicsPipelines_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId pipelineCache, uint32_t createInfoCount, StructPointerDecoder<Decoded_VkGraphicsPipelineCreateInfo>* pCreateInfos, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkPipeline>* pPipelines);
VKAPI_ATTR void VKAPI_CALL CreateComputePipelines_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId pipelineCache, uint32_t createInfoCount, StructPointerDecoder<Decoded_VkComputePipelineCreateInfo>* pCreateInfos, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkPipeline>* pPipelines);
VKAPI_ATTR void VKAPI_CALL DestroyPipeline_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId pipeline, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL CreatePipelineLayout_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkPipelineLayoutCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkPipelineLayout>* pPipelineLayout);
VKAPI_ATTR void VKAPI_CALL DestroyPipelineLayout_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId pipelineLayout, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL CreateSampler_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkSamplerCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSampler>* pSampler);
VKAPI_ATTR void VKAPI_CALL DestroySampler_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId sampler, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL CreateDescriptorSetLayout_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkDescriptorSetLayoutCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkDescriptorSetLayout>* pSetLayout);
VKAPI_ATTR void VKAPI_CALL DestroyDescriptorSetLayout_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId descriptorSetLayout, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL CreateDescriptorPool_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkDescriptorPoolCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkDescriptorPool>* pDescriptorPool);
VKAPI_ATTR void VKAPI_CALL DestroyDescriptorPool_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId descriptorPool, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL ResetDescriptorPool_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId descriptorPool, VkDescriptorPoolResetFlags flags);
VKAPI_ATTR void VKAPI_CALL AllocateDescriptorSets_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkDescriptorSetAllocateInfo>* pAllocateInfo, HandlePointerDecoder<VkDescriptorSet>* pDescriptorSets);
VKAPI_ATTR void VKAPI_CALL FreeDescriptorSets_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId descriptorPool, uint32_t descriptorSetCount, HandlePointerDecoder<VkDescriptorSet>* pDescriptorSets);
VKAPI_ATTR void VKAPI_CALL UpdateDescriptorSets_PreCall(const ApiCallInfo& call_info, format::HandleId device, uint32_t descriptorWriteCount, StructPointerDecoder<Decoded_VkWriteDescriptorSet>* pDescriptorWrites, uint32_t descriptorCopyCount, StructPointerDecoder<Decoded_VkCopyDescriptorSet>* pDescriptorCopies);
VKAPI_ATTR void VKAPI_CALL CreateFramebuffer_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkFramebufferCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkFramebuffer>* pFramebuffer);
VKAPI_ATTR void VKAPI_CALL DestroyFramebuffer_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId framebuffer, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL CreateRenderPass_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkRenderPassCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkRenderPass>* pRenderPass);
VKAPI_ATTR void VKAPI_CALL DestroyRenderPass_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId renderPass, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL GetRenderAreaGranularity_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId renderPass, StructPointerDecoder<Decoded_VkExtent2D>* pGranularity);
VKAPI_ATTR void VKAPI_CALL CreateCommandPool_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkCommandPoolCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkCommandPool>* pCommandPool);
VKAPI_ATTR void VKAPI_CALL DestroyCommandPool_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId commandPool, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL ResetCommandPool_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId commandPool, VkCommandPoolResetFlags flags);
VKAPI_ATTR void VKAPI_CALL AllocateCommandBuffers_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkCommandBufferAllocateInfo>* pAllocateInfo, HandlePointerDecoder<VkCommandBuffer>* pCommandBuffers);
VKAPI_ATTR void VKAPI_CALL FreeCommandBuffers_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId commandPool, uint32_t commandBufferCount, HandlePointerDecoder<VkCommandBuffer>* pCommandBuffers);
VKAPI_ATTR void VKAPI_CALL BeginCommandBuffer_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkCommandBufferBeginInfo>* pBeginInfo);
VKAPI_ATTR void VKAPI_CALL EndCommandBuffer_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId commandBuffer);
VKAPI_ATTR void VKAPI_CALL ResetCommandBuffer_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId commandBuffer, VkCommandBufferResetFlags flags);
VKAPI_ATTR void VKAPI_CALL CmdBindPipeline_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkPipelineBindPoint pipelineBindPoint, format::HandleId pipeline);
VKAPI_ATTR void VKAPI_CALL CmdSetViewport_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstViewport, uint32_t viewportCount, StructPointerDecoder<Decoded_VkViewport>* pViewports);
VKAPI_ATTR void VKAPI_CALL CmdSetScissor_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstScissor, uint32_t scissorCount, StructPointerDecoder<Decoded_VkRect2D>* pScissors);
VKAPI_ATTR void VKAPI_CALL CmdSetLineWidth_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, float lineWidth);
VKAPI_ATTR void VKAPI_CALL CmdSetDepthBias_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
VKAPI_ATTR void VKAPI_CALL CmdSetBlendConstants_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, PointerDecoder<float>* blendConstants);
VKAPI_ATTR void VKAPI_CALL CmdSetDepthBounds_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, float minDepthBounds, float maxDepthBounds);
VKAPI_ATTR void VKAPI_CALL CmdSetStencilCompareMask_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask);
VKAPI_ATTR void VKAPI_CALL CmdSetStencilWriteMask_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask);
VKAPI_ATTR void VKAPI_CALL CmdSetStencilReference_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference);
VKAPI_ATTR void VKAPI_CALL CmdBindDescriptorSets_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkPipelineBindPoint pipelineBindPoint, format::HandleId layout, uint32_t firstSet, uint32_t descriptorSetCount, HandlePointerDecoder<VkDescriptorSet>* pDescriptorSets, uint32_t dynamicOffsetCount, PointerDecoder<uint32_t>* pDynamicOffsets);
VKAPI_ATTR void VKAPI_CALL CmdBindIndexBuffer_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId buffer, VkDeviceSize offset, VkIndexType indexType);
VKAPI_ATTR void VKAPI_CALL CmdBindVertexBuffers_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstBinding, uint32_t bindingCount, HandlePointerDecoder<VkBuffer>* pBuffers, PointerDecoder<VkDeviceSize>* pOffsets);
VKAPI_ATTR void VKAPI_CALL CmdDraw_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);
VKAPI_ATTR void VKAPI_CALL CmdDrawIndexed_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance);
VKAPI_ATTR void VKAPI_CALL CmdDrawIndirect_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
VKAPI_ATTR void VKAPI_CALL CmdDrawIndexedIndirect_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
VKAPI_ATTR void VKAPI_CALL CmdDispatch_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
VKAPI_ATTR void VKAPI_CALL CmdDispatchIndirect_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId buffer, VkDeviceSize offset);
VKAPI_ATTR void VKAPI_CALL CmdCopyBuffer_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId srcBuffer, format::HandleId dstBuffer, uint32_t regionCount, StructPointerDecoder<Decoded_VkBufferCopy>* pRegions);
VKAPI_ATTR void VKAPI_CALL CmdCopyImage_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId srcImage, VkImageLayout srcImageLayout, format::HandleId dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, StructPointerDecoder<Decoded_VkImageCopy>* pRegions);
VKAPI_ATTR void VKAPI_CALL CmdBlitImage_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId srcImage, VkImageLayout srcImageLayout, format::HandleId dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, StructPointerDecoder<Decoded_VkImageBlit>* pRegions, VkFilter filter);
VKAPI_ATTR void VKAPI_CALL CmdCopyBufferToImage_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId srcBuffer, format::HandleId dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, StructPointerDecoder<Decoded_VkBufferImageCopy>* pRegions);
VKAPI_ATTR void VKAPI_CALL CmdCopyImageToBuffer_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId srcImage, VkImageLayout srcImageLayout, format::HandleId dstBuffer, uint32_t regionCount, StructPointerDecoder<Decoded_VkBufferImageCopy>* pRegions);
VKAPI_ATTR void VKAPI_CALL CmdUpdateBuffer_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, PointerDecoder<uint8_t>* pData);
VKAPI_ATTR void VKAPI_CALL CmdFillBuffer_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data);
VKAPI_ATTR void VKAPI_CALL CmdClearColorImage_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId image, VkImageLayout imageLayout, StructPointerDecoder<Decoded_VkClearColorValue>* pColor, uint32_t rangeCount, StructPointerDecoder<Decoded_VkImageSubresourceRange>* pRanges);
VKAPI_ATTR void VKAPI_CALL CmdClearDepthStencilImage_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId image, VkImageLayout imageLayout, StructPointerDecoder<Decoded_VkClearDepthStencilValue>* pDepthStencil, uint32_t rangeCount, StructPointerDecoder<Decoded_VkImageSubresourceRange>* pRanges);
VKAPI_ATTR void VKAPI_CALL CmdClearAttachments_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t attachmentCount, StructPointerDecoder<Decoded_VkClearAttachment>* pAttachments, uint32_t rectCount, StructPointerDecoder<Decoded_VkClearRect>* pRects);
VKAPI_ATTR void VKAPI_CALL CmdResolveImage_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId srcImage, VkImageLayout srcImageLayout, format::HandleId dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, StructPointerDecoder<Decoded_VkImageResolve>* pRegions);
VKAPI_ATTR void VKAPI_CALL CmdSetEvent_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId event, VkPipelineStageFlags stageMask);
VKAPI_ATTR void VKAPI_CALL CmdResetEvent_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId event, VkPipelineStageFlags stageMask);
VKAPI_ATTR void VKAPI_CALL CmdWaitEvents_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t eventCount, HandlePointerDecoder<VkEvent>* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, StructPointerDecoder<Decoded_VkMemoryBarrier>* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, StructPointerDecoder<Decoded_VkBufferMemoryBarrier>* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, StructPointerDecoder<Decoded_VkImageMemoryBarrier>* pImageMemoryBarriers);
VKAPI_ATTR void VKAPI_CALL CmdPipelineBarrier_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, StructPointerDecoder<Decoded_VkMemoryBarrier>* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, StructPointerDecoder<Decoded_VkBufferMemoryBarrier>* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, StructPointerDecoder<Decoded_VkImageMemoryBarrier>* pImageMemoryBarriers);
VKAPI_ATTR void VKAPI_CALL CmdBeginQuery_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId queryPool, uint32_t query, VkQueryControlFlags flags);
VKAPI_ATTR void VKAPI_CALL CmdEndQuery_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId queryPool, uint32_t query);
VKAPI_ATTR void VKAPI_CALL CmdResetQueryPool_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId queryPool, uint32_t firstQuery, uint32_t queryCount);
VKAPI_ATTR void VKAPI_CALL CmdWriteTimestamp_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkPipelineStageFlagBits pipelineStage, format::HandleId queryPool, uint32_t query);
VKAPI_ATTR void VKAPI_CALL CmdCopyQueryPoolResults_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId queryPool, uint32_t firstQuery, uint32_t queryCount, format::HandleId dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);
VKAPI_ATTR void VKAPI_CALL CmdPushConstants_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, PointerDecoder<uint8_t>* pValues);
VKAPI_ATTR void VKAPI_CALL CmdBeginRenderPass_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkRenderPassBeginInfo>* pRenderPassBegin, VkSubpassContents contents);
VKAPI_ATTR void VKAPI_CALL CmdNextSubpass_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkSubpassContents contents);
VKAPI_ATTR void VKAPI_CALL CmdEndRenderPass_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer);
VKAPI_ATTR void VKAPI_CALL CmdExecuteCommands_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t commandBufferCount, HandlePointerDecoder<VkCommandBuffer>* pCommandBuffers);
VKAPI_ATTR void VKAPI_CALL BindBufferMemory2_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, uint32_t bindInfoCount, StructPointerDecoder<Decoded_VkBindBufferMemoryInfo>* pBindInfos);
VKAPI_ATTR void VKAPI_CALL BindImageMemory2_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, uint32_t bindInfoCount, StructPointerDecoder<Decoded_VkBindImageMemoryInfo>* pBindInfos);
VKAPI_ATTR void VKAPI_CALL GetDeviceGroupPeerMemoryFeatures_PreCall(const ApiCallInfo& call_info, format::HandleId device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, PointerDecoder<VkPeerMemoryFeatureFlags>* pPeerMemoryFeatures);
VKAPI_ATTR void VKAPI_CALL CmdSetDeviceMask_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t deviceMask);
VKAPI_ATTR void VKAPI_CALL CmdDispatchBase_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
VKAPI_ATTR void VKAPI_CALL EnumeratePhysicalDeviceGroups_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, PointerDecoder<uint32_t>* pPhysicalDeviceGroupCount, StructPointerDecoder<Decoded_VkPhysicalDeviceGroupProperties>* pPhysicalDeviceGroupProperties);
VKAPI_ATTR void VKAPI_CALL GetImageMemoryRequirements2_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkImageMemoryRequirementsInfo2>* pInfo, StructPointerDecoder<Decoded_VkMemoryRequirements2>* pMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL GetBufferMemoryRequirements2_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkBufferMemoryRequirementsInfo2>* pInfo, StructPointerDecoder<Decoded_VkMemoryRequirements2>* pMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL GetImageSparseMemoryRequirements2_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkImageSparseMemoryRequirementsInfo2>* pInfo, PointerDecoder<uint32_t>* pSparseMemoryRequirementCount, StructPointerDecoder<Decoded_VkSparseImageMemoryRequirements2>* pSparseMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFeatures2_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceFeatures2>* pFeatures);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceProperties2_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceProperties2>* pProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFormatProperties2_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, VkFormat format, StructPointerDecoder<Decoded_VkFormatProperties2>* pFormatProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceImageFormatProperties2_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceImageFormatInfo2>* pImageFormatInfo, StructPointerDecoder<Decoded_VkImageFormatProperties2>* pImageFormatProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceQueueFamilyProperties2_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, PointerDecoder<uint32_t>* pQueueFamilyPropertyCount, StructPointerDecoder<Decoded_VkQueueFamilyProperties2>* pQueueFamilyProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceMemoryProperties2_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceMemoryProperties2>* pMemoryProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSparseImageFormatProperties2_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceSparseImageFormatInfo2>* pFormatInfo, PointerDecoder<uint32_t>* pPropertyCount, StructPointerDecoder<Decoded_VkSparseImageFormatProperties2>* pProperties);
VKAPI_ATTR void VKAPI_CALL TrimCommandPool_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId commandPool, VkCommandPoolTrimFlags flags);
VKAPI_ATTR void VKAPI_CALL GetDeviceQueue2_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkDeviceQueueInfo2>* pQueueInfo, HandlePointerDecoder<VkQueue>* pQueue);
VKAPI_ATTR void VKAPI_CALL CreateSamplerYcbcrConversion_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkSamplerYcbcrConversionCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSamplerYcbcrConversion>* pYcbcrConversion);
VKAPI_ATTR void VKAPI_CALL DestroySamplerYcbcrConversion_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId ycbcrConversion, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL CreateDescriptorUpdateTemplate_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkDescriptorUpdateTemplateCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkDescriptorUpdateTemplate>* pDescriptorUpdateTemplate);
VKAPI_ATTR void VKAPI_CALL DestroyDescriptorUpdateTemplate_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId descriptorUpdateTemplate, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalBufferProperties_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceExternalBufferInfo>* pExternalBufferInfo, StructPointerDecoder<Decoded_VkExternalBufferProperties>* pExternalBufferProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalFenceProperties_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceExternalFenceInfo>* pExternalFenceInfo, StructPointerDecoder<Decoded_VkExternalFenceProperties>* pExternalFenceProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalSemaphoreProperties_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceExternalSemaphoreInfo>* pExternalSemaphoreInfo, StructPointerDecoder<Decoded_VkExternalSemaphoreProperties>* pExternalSemaphoreProperties);
VKAPI_ATTR void VKAPI_CALL GetDescriptorSetLayoutSupport_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkDescriptorSetLayoutCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkDescriptorSetLayoutSupport>* pSupport);
VKAPI_ATTR void VKAPI_CALL CmdDrawIndirectCount_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId buffer, VkDeviceSize offset, format::HandleId countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
VKAPI_ATTR void VKAPI_CALL CmdDrawIndexedIndirectCount_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId buffer, VkDeviceSize offset, format::HandleId countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
VKAPI_ATTR void VKAPI_CALL CreateRenderPass2_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkRenderPassCreateInfo2>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkRenderPass>* pRenderPass);
VKAPI_ATTR void VKAPI_CALL CmdBeginRenderPass2_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkRenderPassBeginInfo>* pRenderPassBegin, StructPointerDecoder<Decoded_VkSubpassBeginInfo>* pSubpassBeginInfo);
VKAPI_ATTR void VKAPI_CALL CmdNextSubpass2_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkSubpassBeginInfo>* pSubpassBeginInfo, StructPointerDecoder<Decoded_VkSubpassEndInfo>* pSubpassEndInfo);
VKAPI_ATTR void VKAPI_CALL CmdEndRenderPass2_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkSubpassEndInfo>* pSubpassEndInfo);
VKAPI_ATTR void VKAPI_CALL ResetQueryPool_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId queryPool, uint32_t firstQuery, uint32_t queryCount);
VKAPI_ATTR void VKAPI_CALL GetSemaphoreCounterValue_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId semaphore, PointerDecoder<uint64_t>* pValue);
VKAPI_ATTR void VKAPI_CALL WaitSemaphores_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkSemaphoreWaitInfo>* pWaitInfo, uint64_t timeout);
VKAPI_ATTR void VKAPI_CALL SignalSemaphore_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkSemaphoreSignalInfo>* pSignalInfo);
VKAPI_ATTR void VKAPI_CALL GetBufferDeviceAddress_PreCall(const ApiCallInfo& call_info, VkDeviceAddress returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkBufferDeviceAddressInfo>* pInfo);
VKAPI_ATTR void VKAPI_CALL GetBufferOpaqueCaptureAddress_PreCall(const ApiCallInfo& call_info, uint64_t returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkBufferDeviceAddressInfo>* pInfo);
VKAPI_ATTR void VKAPI_CALL GetDeviceMemoryOpaqueCaptureAddress_PreCall(const ApiCallInfo& call_info, uint64_t returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkDeviceMemoryOpaqueCaptureAddressInfo>* pInfo);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceToolProperties_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, PointerDecoder<uint32_t>* pToolCount, StructPointerDecoder<Decoded_VkPhysicalDeviceToolProperties>* pToolProperties);
VKAPI_ATTR void VKAPI_CALL CreatePrivateDataSlot_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkPrivateDataSlotCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkPrivateDataSlot>* pPrivateDataSlot);
VKAPI_ATTR void VKAPI_CALL DestroyPrivateDataSlot_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId privateDataSlot, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL SetPrivateData_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, VkObjectType objectType, uint64_t objectHandle, format::HandleId privateDataSlot, uint64_t data);
VKAPI_ATTR void VKAPI_CALL GetPrivateData_PreCall(const ApiCallInfo& call_info, format::HandleId device, VkObjectType objectType, uint64_t objectHandle, format::HandleId privateDataSlot, PointerDecoder<uint64_t>* pData);
VKAPI_ATTR void VKAPI_CALL CmdSetEvent2_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId event, StructPointerDecoder<Decoded_VkDependencyInfo>* pDependencyInfo);
VKAPI_ATTR void VKAPI_CALL CmdResetEvent2_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId event, VkPipelineStageFlags2 stageMask);
VKAPI_ATTR void VKAPI_CALL CmdWaitEvents2_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t eventCount, HandlePointerDecoder<VkEvent>* pEvents, StructPointerDecoder<Decoded_VkDependencyInfo>* pDependencyInfos);
VKAPI_ATTR void VKAPI_CALL CmdPipelineBarrier2_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkDependencyInfo>* pDependencyInfo);
VKAPI_ATTR void VKAPI_CALL CmdWriteTimestamp2_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkPipelineStageFlags2 stage, format::HandleId queryPool, uint32_t query);
VKAPI_ATTR void VKAPI_CALL QueueSubmit2_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId queue, uint32_t submitCount, StructPointerDecoder<Decoded_VkSubmitInfo2>* pSubmits, format::HandleId fence);
VKAPI_ATTR void VKAPI_CALL CmdCopyBuffer2_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkCopyBufferInfo2>* pCopyBufferInfo);
VKAPI_ATTR void VKAPI_CALL CmdCopyImage2_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkCopyImageInfo2>* pCopyImageInfo);
VKAPI_ATTR void VKAPI_CALL CmdCopyBufferToImage2_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkCopyBufferToImageInfo2>* pCopyBufferToImageInfo);
VKAPI_ATTR void VKAPI_CALL CmdCopyImageToBuffer2_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkCopyImageToBufferInfo2>* pCopyImageToBufferInfo);
VKAPI_ATTR void VKAPI_CALL CmdBlitImage2_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkBlitImageInfo2>* pBlitImageInfo);
VKAPI_ATTR void VKAPI_CALL CmdResolveImage2_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkResolveImageInfo2>* pResolveImageInfo);
VKAPI_ATTR void VKAPI_CALL CmdBeginRendering_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkRenderingInfo>* pRenderingInfo);
VKAPI_ATTR void VKAPI_CALL CmdEndRendering_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer);
VKAPI_ATTR void VKAPI_CALL CmdSetCullMode_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkCullModeFlags cullMode);
VKAPI_ATTR void VKAPI_CALL CmdSetFrontFace_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkFrontFace frontFace);
VKAPI_ATTR void VKAPI_CALL CmdSetPrimitiveTopology_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkPrimitiveTopology primitiveTopology);
VKAPI_ATTR void VKAPI_CALL CmdSetViewportWithCount_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t viewportCount, StructPointerDecoder<Decoded_VkViewport>* pViewports);
VKAPI_ATTR void VKAPI_CALL CmdSetScissorWithCount_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t scissorCount, StructPointerDecoder<Decoded_VkRect2D>* pScissors);
VKAPI_ATTR void VKAPI_CALL CmdBindVertexBuffers2_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstBinding, uint32_t bindingCount, HandlePointerDecoder<VkBuffer>* pBuffers, PointerDecoder<VkDeviceSize>* pOffsets, PointerDecoder<VkDeviceSize>* pSizes, PointerDecoder<VkDeviceSize>* pStrides);
VKAPI_ATTR void VKAPI_CALL CmdSetDepthTestEnable_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 depthTestEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetDepthWriteEnable_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 depthWriteEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetDepthCompareOp_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkCompareOp depthCompareOp);
VKAPI_ATTR void VKAPI_CALL CmdSetDepthBoundsTestEnable_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 depthBoundsTestEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetStencilTestEnable_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 stencilTestEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetStencilOp_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp);
VKAPI_ATTR void VKAPI_CALL CmdSetRasterizerDiscardEnable_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 rasterizerDiscardEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetDepthBiasEnable_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 depthBiasEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetPrimitiveRestartEnable_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 primitiveRestartEnable);
VKAPI_ATTR void VKAPI_CALL GetDeviceBufferMemoryRequirements_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkDeviceBufferMemoryRequirements>* pInfo, StructPointerDecoder<Decoded_VkMemoryRequirements2>* pMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL GetDeviceImageMemoryRequirements_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkDeviceImageMemoryRequirements>* pInfo, StructPointerDecoder<Decoded_VkMemoryRequirements2>* pMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL GetDeviceImageSparseMemoryRequirements_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkDeviceImageMemoryRequirements>* pInfo, PointerDecoder<uint32_t>* pSparseMemoryRequirementCount, StructPointerDecoder<Decoded_VkSparseImageMemoryRequirements2>* pSparseMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL DestroySurfaceKHR_PreCall(const ApiCallInfo& call_info, format::HandleId instance, format::HandleId surface, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSurfaceSupportKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, uint32_t queueFamilyIndex, format::HandleId surface, PointerDecoder<VkBool32>* pSupported);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSurfaceCapabilitiesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, format::HandleId surface, StructPointerDecoder<Decoded_VkSurfaceCapabilitiesKHR>* pSurfaceCapabilities);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSurfaceFormatsKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, format::HandleId surface, PointerDecoder<uint32_t>* pSurfaceFormatCount, StructPointerDecoder<Decoded_VkSurfaceFormatKHR>* pSurfaceFormats);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSurfacePresentModesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, format::HandleId surface, PointerDecoder<uint32_t>* pPresentModeCount, PointerDecoder<VkPresentModeKHR>* pPresentModes);
VKAPI_ATTR void VKAPI_CALL CreateSwapchainKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkSwapchainCreateInfoKHR>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSwapchainKHR>* pSwapchain);
VKAPI_ATTR void VKAPI_CALL DestroySwapchainKHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId swapchain, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL GetSwapchainImagesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId swapchain, PointerDecoder<uint32_t>* pSwapchainImageCount, HandlePointerDecoder<VkImage>* pSwapchainImages);
VKAPI_ATTR void VKAPI_CALL AcquireNextImageKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId swapchain, uint64_t timeout, format::HandleId semaphore, format::HandleId fence, PointerDecoder<uint32_t>* pImageIndex);
VKAPI_ATTR void VKAPI_CALL QueuePresentKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId queue, StructPointerDecoder<Decoded_VkPresentInfoKHR>* pPresentInfo);
VKAPI_ATTR void VKAPI_CALL GetDeviceGroupPresentCapabilitiesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkDeviceGroupPresentCapabilitiesKHR>* pDeviceGroupPresentCapabilities);
VKAPI_ATTR void VKAPI_CALL GetDeviceGroupSurfacePresentModesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId surface, PointerDecoder<VkDeviceGroupPresentModeFlagsKHR>* pModes);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDevicePresentRectanglesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, format::HandleId surface, PointerDecoder<uint32_t>* pRectCount, StructPointerDecoder<Decoded_VkRect2D>* pRects);
VKAPI_ATTR void VKAPI_CALL AcquireNextImage2KHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkAcquireNextImageInfoKHR>* pAcquireInfo, PointerDecoder<uint32_t>* pImageIndex);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceDisplayPropertiesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, PointerDecoder<uint32_t>* pPropertyCount, StructPointerDecoder<Decoded_VkDisplayPropertiesKHR>* pProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceDisplayPlanePropertiesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, PointerDecoder<uint32_t>* pPropertyCount, StructPointerDecoder<Decoded_VkDisplayPlanePropertiesKHR>* pProperties);
VKAPI_ATTR void VKAPI_CALL GetDisplayPlaneSupportedDisplaysKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, uint32_t planeIndex, PointerDecoder<uint32_t>* pDisplayCount, HandlePointerDecoder<VkDisplayKHR>* pDisplays);
VKAPI_ATTR void VKAPI_CALL GetDisplayModePropertiesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, format::HandleId display, PointerDecoder<uint32_t>* pPropertyCount, StructPointerDecoder<Decoded_VkDisplayModePropertiesKHR>* pProperties);
VKAPI_ATTR void VKAPI_CALL CreateDisplayModeKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, format::HandleId display, StructPointerDecoder<Decoded_VkDisplayModeCreateInfoKHR>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkDisplayModeKHR>* pMode);
VKAPI_ATTR void VKAPI_CALL GetDisplayPlaneCapabilitiesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, format::HandleId mode, uint32_t planeIndex, StructPointerDecoder<Decoded_VkDisplayPlaneCapabilitiesKHR>* pCapabilities);
VKAPI_ATTR void VKAPI_CALL CreateDisplayPlaneSurfaceKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkDisplaySurfaceCreateInfoKHR>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSurfaceKHR>* pSurface);
VKAPI_ATTR void VKAPI_CALL CreateSharedSwapchainsKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, uint32_t swapchainCount, StructPointerDecoder<Decoded_VkSwapchainCreateInfoKHR>* pCreateInfos, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSwapchainKHR>* pSwapchains);
VKAPI_ATTR void VKAPI_CALL CreateXlibSurfaceKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkXlibSurfaceCreateInfoKHR>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSurfaceKHR>* pSurface);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceXlibPresentationSupportKHR_PreCall(const ApiCallInfo& call_info, VkBool32 returnValue, format::HandleId physicalDevice, uint32_t queueFamilyIndex, uint64_t dpy, size_t visualID);
VKAPI_ATTR void VKAPI_CALL CreateXcbSurfaceKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkXcbSurfaceCreateInfoKHR>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSurfaceKHR>* pSurface);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceXcbPresentationSupportKHR_PreCall(const ApiCallInfo& call_info, VkBool32 returnValue, format::HandleId physicalDevice, uint32_t queueFamilyIndex, uint64_t connection, uint32_t visual_id);
VKAPI_ATTR void VKAPI_CALL CreateWaylandSurfaceKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkWaylandSurfaceCreateInfoKHR>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSurfaceKHR>* pSurface);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceWaylandPresentationSupportKHR_PreCall(const ApiCallInfo& call_info, VkBool32 returnValue, format::HandleId physicalDevice, uint32_t queueFamilyIndex, uint64_t display);
VKAPI_ATTR void VKAPI_CALL CreateAndroidSurfaceKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkAndroidSurfaceCreateInfoKHR>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSurfaceKHR>* pSurface);
VKAPI_ATTR void VKAPI_CALL CreateWin32SurfaceKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkWin32SurfaceCreateInfoKHR>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSurfaceKHR>* pSurface);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceWin32PresentationSupportKHR_PreCall(const ApiCallInfo& call_info, VkBool32 returnValue, format::HandleId physicalDevice, uint32_t queueFamilyIndex);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceVideoCapabilitiesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkVideoProfileInfoKHR>* pVideoProfile, StructPointerDecoder<Decoded_VkVideoCapabilitiesKHR>* pCapabilities);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceVideoFormatPropertiesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceVideoFormatInfoKHR>* pVideoFormatInfo, PointerDecoder<uint32_t>* pVideoFormatPropertyCount, StructPointerDecoder<Decoded_VkVideoFormatPropertiesKHR>* pVideoFormatProperties);
VKAPI_ATTR void VKAPI_CALL CreateVideoSessionKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkVideoSessionCreateInfoKHR>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkVideoSessionKHR>* pVideoSession);
VKAPI_ATTR void VKAPI_CALL DestroyVideoSessionKHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId videoSession, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL GetVideoSessionMemoryRequirementsKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId videoSession, PointerDecoder<uint32_t>* pMemoryRequirementsCount, StructPointerDecoder<Decoded_VkVideoSessionMemoryRequirementsKHR>* pMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL BindVideoSessionMemoryKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId videoSession, uint32_t bindSessionMemoryInfoCount, StructPointerDecoder<Decoded_VkBindVideoSessionMemoryInfoKHR>* pBindSessionMemoryInfos);
VKAPI_ATTR void VKAPI_CALL CreateVideoSessionParametersKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkVideoSessionParametersCreateInfoKHR>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkVideoSessionParametersKHR>* pVideoSessionParameters);
VKAPI_ATTR void VKAPI_CALL UpdateVideoSessionParametersKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId videoSessionParameters, StructPointerDecoder<Decoded_VkVideoSessionParametersUpdateInfoKHR>* pUpdateInfo);
VKAPI_ATTR void VKAPI_CALL DestroyVideoSessionParametersKHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId videoSessionParameters, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL CmdBeginVideoCodingKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkVideoBeginCodingInfoKHR>* pBeginInfo);
VKAPI_ATTR void VKAPI_CALL CmdEndVideoCodingKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkVideoEndCodingInfoKHR>* pEndCodingInfo);
VKAPI_ATTR void VKAPI_CALL CmdControlVideoCodingKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkVideoCodingControlInfoKHR>* pCodingControlInfo);
VKAPI_ATTR void VKAPI_CALL CmdDecodeVideoKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkVideoDecodeInfoKHR>* pDecodeInfo);
VKAPI_ATTR void VKAPI_CALL CmdBeginRenderingKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkRenderingInfo>* pRenderingInfo);
VKAPI_ATTR void VKAPI_CALL CmdEndRenderingKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFeatures2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceFeatures2>* pFeatures);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceProperties2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceProperties2>* pProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFormatProperties2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, VkFormat format, StructPointerDecoder<Decoded_VkFormatProperties2>* pFormatProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceImageFormatProperties2KHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceImageFormatInfo2>* pImageFormatInfo, StructPointerDecoder<Decoded_VkImageFormatProperties2>* pImageFormatProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceQueueFamilyProperties2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, PointerDecoder<uint32_t>* pQueueFamilyPropertyCount, StructPointerDecoder<Decoded_VkQueueFamilyProperties2>* pQueueFamilyProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceMemoryProperties2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceMemoryProperties2>* pMemoryProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSparseImageFormatProperties2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceSparseImageFormatInfo2>* pFormatInfo, PointerDecoder<uint32_t>* pPropertyCount, StructPointerDecoder<Decoded_VkSparseImageFormatProperties2>* pProperties);
VKAPI_ATTR void VKAPI_CALL GetDeviceGroupPeerMemoryFeaturesKHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, PointerDecoder<VkPeerMemoryFeatureFlags>* pPeerMemoryFeatures);
VKAPI_ATTR void VKAPI_CALL CmdSetDeviceMaskKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t deviceMask);
VKAPI_ATTR void VKAPI_CALL CmdDispatchBaseKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
VKAPI_ATTR void VKAPI_CALL TrimCommandPoolKHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId commandPool, VkCommandPoolTrimFlags flags);
VKAPI_ATTR void VKAPI_CALL EnumeratePhysicalDeviceGroupsKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, PointerDecoder<uint32_t>* pPhysicalDeviceGroupCount, StructPointerDecoder<Decoded_VkPhysicalDeviceGroupProperties>* pPhysicalDeviceGroupProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalBufferPropertiesKHR_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceExternalBufferInfo>* pExternalBufferInfo, StructPointerDecoder<Decoded_VkExternalBufferProperties>* pExternalBufferProperties);
VKAPI_ATTR void VKAPI_CALL GetMemoryWin32HandleKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkMemoryGetWin32HandleInfoKHR>* pGetWin32HandleInfo, PointerDecoder<uint64_t, void*>* pHandle);
VKAPI_ATTR void VKAPI_CALL GetMemoryWin32HandlePropertiesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, VkExternalMemoryHandleTypeFlagBits handleType, uint64_t handle, StructPointerDecoder<Decoded_VkMemoryWin32HandlePropertiesKHR>* pMemoryWin32HandleProperties);
VKAPI_ATTR void VKAPI_CALL GetMemoryFdKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkMemoryGetFdInfoKHR>* pGetFdInfo, PointerDecoder<int>* pFd);
VKAPI_ATTR void VKAPI_CALL GetMemoryFdPropertiesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, StructPointerDecoder<Decoded_VkMemoryFdPropertiesKHR>* pMemoryFdProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalSemaphorePropertiesKHR_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceExternalSemaphoreInfo>* pExternalSemaphoreInfo, StructPointerDecoder<Decoded_VkExternalSemaphoreProperties>* pExternalSemaphoreProperties);
VKAPI_ATTR void VKAPI_CALL ImportSemaphoreWin32HandleKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkImportSemaphoreWin32HandleInfoKHR>* pImportSemaphoreWin32HandleInfo);
VKAPI_ATTR void VKAPI_CALL GetSemaphoreWin32HandleKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkSemaphoreGetWin32HandleInfoKHR>* pGetWin32HandleInfo, PointerDecoder<uint64_t, void*>* pHandle);
VKAPI_ATTR void VKAPI_CALL ImportSemaphoreFdKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkImportSemaphoreFdInfoKHR>* pImportSemaphoreFdInfo);
VKAPI_ATTR void VKAPI_CALL GetSemaphoreFdKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkSemaphoreGetFdInfoKHR>* pGetFdInfo, PointerDecoder<int>* pFd);
VKAPI_ATTR void VKAPI_CALL CmdPushDescriptorSetKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkPipelineBindPoint pipelineBindPoint, format::HandleId layout, uint32_t set, uint32_t descriptorWriteCount, StructPointerDecoder<Decoded_VkWriteDescriptorSet>* pDescriptorWrites);
VKAPI_ATTR void VKAPI_CALL CreateDescriptorUpdateTemplateKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkDescriptorUpdateTemplateCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkDescriptorUpdateTemplate>* pDescriptorUpdateTemplate);
VKAPI_ATTR void VKAPI_CALL DestroyDescriptorUpdateTemplateKHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId descriptorUpdateTemplate, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL CreateRenderPass2KHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkRenderPassCreateInfo2>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkRenderPass>* pRenderPass);
VKAPI_ATTR void VKAPI_CALL CmdBeginRenderPass2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkRenderPassBeginInfo>* pRenderPassBegin, StructPointerDecoder<Decoded_VkSubpassBeginInfo>* pSubpassBeginInfo);
VKAPI_ATTR void VKAPI_CALL CmdNextSubpass2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkSubpassBeginInfo>* pSubpassBeginInfo, StructPointerDecoder<Decoded_VkSubpassEndInfo>* pSubpassEndInfo);
VKAPI_ATTR void VKAPI_CALL CmdEndRenderPass2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkSubpassEndInfo>* pSubpassEndInfo);
VKAPI_ATTR void VKAPI_CALL GetSwapchainStatusKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId swapchain);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalFencePropertiesKHR_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceExternalFenceInfo>* pExternalFenceInfo, StructPointerDecoder<Decoded_VkExternalFenceProperties>* pExternalFenceProperties);
VKAPI_ATTR void VKAPI_CALL ImportFenceWin32HandleKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkImportFenceWin32HandleInfoKHR>* pImportFenceWin32HandleInfo);
VKAPI_ATTR void VKAPI_CALL GetFenceWin32HandleKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkFenceGetWin32HandleInfoKHR>* pGetWin32HandleInfo, PointerDecoder<uint64_t, void*>* pHandle);
VKAPI_ATTR void VKAPI_CALL ImportFenceFdKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkImportFenceFdInfoKHR>* pImportFenceFdInfo);
VKAPI_ATTR void VKAPI_CALL GetFenceFdKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkFenceGetFdInfoKHR>* pGetFdInfo, PointerDecoder<int>* pFd);
VKAPI_ATTR void VKAPI_CALL EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, uint32_t queueFamilyIndex, PointerDecoder<uint32_t>* pCounterCount, StructPointerDecoder<Decoded_VkPerformanceCounterKHR>* pCounters, StructPointerDecoder<Decoded_VkPerformanceCounterDescriptionKHR>* pCounterDescriptions);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkQueryPoolPerformanceCreateInfoKHR>* pPerformanceQueryCreateInfo, PointerDecoder<uint32_t>* pNumPasses);
VKAPI_ATTR void VKAPI_CALL AcquireProfilingLockKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkAcquireProfilingLockInfoKHR>* pInfo);
VKAPI_ATTR void VKAPI_CALL ReleaseProfilingLockKHR_PreCall(const ApiCallInfo& call_info, format::HandleId device);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSurfaceCapabilities2KHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceSurfaceInfo2KHR>* pSurfaceInfo, StructPointerDecoder<Decoded_VkSurfaceCapabilities2KHR>* pSurfaceCapabilities);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSurfaceFormats2KHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceSurfaceInfo2KHR>* pSurfaceInfo, PointerDecoder<uint32_t>* pSurfaceFormatCount, StructPointerDecoder<Decoded_VkSurfaceFormat2KHR>* pSurfaceFormats);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceDisplayProperties2KHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, PointerDecoder<uint32_t>* pPropertyCount, StructPointerDecoder<Decoded_VkDisplayProperties2KHR>* pProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceDisplayPlaneProperties2KHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, PointerDecoder<uint32_t>* pPropertyCount, StructPointerDecoder<Decoded_VkDisplayPlaneProperties2KHR>* pProperties);
VKAPI_ATTR void VKAPI_CALL GetDisplayModeProperties2KHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, format::HandleId display, PointerDecoder<uint32_t>* pPropertyCount, StructPointerDecoder<Decoded_VkDisplayModeProperties2KHR>* pProperties);
VKAPI_ATTR void VKAPI_CALL GetDisplayPlaneCapabilities2KHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkDisplayPlaneInfo2KHR>* pDisplayPlaneInfo, StructPointerDecoder<Decoded_VkDisplayPlaneCapabilities2KHR>* pCapabilities);
VKAPI_ATTR void VKAPI_CALL GetImageMemoryRequirements2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkImageMemoryRequirementsInfo2>* pInfo, StructPointerDecoder<Decoded_VkMemoryRequirements2>* pMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL GetBufferMemoryRequirements2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkBufferMemoryRequirementsInfo2>* pInfo, StructPointerDecoder<Decoded_VkMemoryRequirements2>* pMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL GetImageSparseMemoryRequirements2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkImageSparseMemoryRequirementsInfo2>* pInfo, PointerDecoder<uint32_t>* pSparseMemoryRequirementCount, StructPointerDecoder<Decoded_VkSparseImageMemoryRequirements2>* pSparseMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL CreateSamplerYcbcrConversionKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkSamplerYcbcrConversionCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSamplerYcbcrConversion>* pYcbcrConversion);
VKAPI_ATTR void VKAPI_CALL DestroySamplerYcbcrConversionKHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId ycbcrConversion, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL BindBufferMemory2KHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, uint32_t bindInfoCount, StructPointerDecoder<Decoded_VkBindBufferMemoryInfo>* pBindInfos);
VKAPI_ATTR void VKAPI_CALL BindImageMemory2KHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, uint32_t bindInfoCount, StructPointerDecoder<Decoded_VkBindImageMemoryInfo>* pBindInfos);
VKAPI_ATTR void VKAPI_CALL GetDescriptorSetLayoutSupportKHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkDescriptorSetLayoutCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkDescriptorSetLayoutSupport>* pSupport);
VKAPI_ATTR void VKAPI_CALL CmdDrawIndirectCountKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId buffer, VkDeviceSize offset, format::HandleId countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
VKAPI_ATTR void VKAPI_CALL CmdDrawIndexedIndirectCountKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId buffer, VkDeviceSize offset, format::HandleId countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
VKAPI_ATTR void VKAPI_CALL GetSemaphoreCounterValueKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId semaphore, PointerDecoder<uint64_t>* pValue);
VKAPI_ATTR void VKAPI_CALL WaitSemaphoresKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkSemaphoreWaitInfo>* pWaitInfo, uint64_t timeout);
VKAPI_ATTR void VKAPI_CALL SignalSemaphoreKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkSemaphoreSignalInfo>* pSignalInfo);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFragmentShadingRatesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, PointerDecoder<uint32_t>* pFragmentShadingRateCount, StructPointerDecoder<Decoded_VkPhysicalDeviceFragmentShadingRateKHR>* pFragmentShadingRates);
VKAPI_ATTR void VKAPI_CALL CmdSetFragmentShadingRateKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkExtent2D>* pFragmentSize, PointerDecoder<VkFragmentShadingRateCombinerOpKHR>* combinerOps);
VKAPI_ATTR void VKAPI_CALL WaitForPresentKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId swapchain, uint64_t presentId, uint64_t timeout);
VKAPI_ATTR void VKAPI_CALL GetBufferDeviceAddressKHR_PreCall(const ApiCallInfo& call_info, VkDeviceAddress returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkBufferDeviceAddressInfo>* pInfo);
VKAPI_ATTR void VKAPI_CALL GetBufferOpaqueCaptureAddressKHR_PreCall(const ApiCallInfo& call_info, uint64_t returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkBufferDeviceAddressInfo>* pInfo);
VKAPI_ATTR void VKAPI_CALL GetDeviceMemoryOpaqueCaptureAddressKHR_PreCall(const ApiCallInfo& call_info, uint64_t returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkDeviceMemoryOpaqueCaptureAddressInfo>* pInfo);
VKAPI_ATTR void VKAPI_CALL CreateDeferredOperationKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkDeferredOperationKHR>* pDeferredOperation);
VKAPI_ATTR void VKAPI_CALL DestroyDeferredOperationKHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId operation, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL GetDeferredOperationMaxConcurrencyKHR_PreCall(const ApiCallInfo& call_info, uint32_t returnValue, format::HandleId device, format::HandleId operation);
VKAPI_ATTR void VKAPI_CALL GetDeferredOperationResultKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId operation);
VKAPI_ATTR void VKAPI_CALL DeferredOperationJoinKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId operation);
VKAPI_ATTR void VKAPI_CALL GetPipelineExecutablePropertiesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkPipelineInfoKHR>* pPipelineInfo, PointerDecoder<uint32_t>* pExecutableCount, StructPointerDecoder<Decoded_VkPipelineExecutablePropertiesKHR>* pProperties);
VKAPI_ATTR void VKAPI_CALL GetPipelineExecutableStatisticsKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkPipelineExecutableInfoKHR>* pExecutableInfo, PointerDecoder<uint32_t>* pStatisticCount, StructPointerDecoder<Decoded_VkPipelineExecutableStatisticKHR>* pStatistics);
VKAPI_ATTR void VKAPI_CALL GetPipelineExecutableInternalRepresentationsKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkPipelineExecutableInfoKHR>* pExecutableInfo, PointerDecoder<uint32_t>* pInternalRepresentationCount, StructPointerDecoder<Decoded_VkPipelineExecutableInternalRepresentationKHR>* pInternalRepresentations);
VKAPI_ATTR void VKAPI_CALL CmdEncodeVideoKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkVideoEncodeInfoKHR>* pEncodeInfo);
VKAPI_ATTR void VKAPI_CALL CmdSetEvent2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId event, StructPointerDecoder<Decoded_VkDependencyInfo>* pDependencyInfo);
VKAPI_ATTR void VKAPI_CALL CmdResetEvent2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId event, VkPipelineStageFlags2 stageMask);
VKAPI_ATTR void VKAPI_CALL CmdWaitEvents2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t eventCount, HandlePointerDecoder<VkEvent>* pEvents, StructPointerDecoder<Decoded_VkDependencyInfo>* pDependencyInfos);
VKAPI_ATTR void VKAPI_CALL CmdPipelineBarrier2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkDependencyInfo>* pDependencyInfo);
VKAPI_ATTR void VKAPI_CALL CmdWriteTimestamp2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkPipelineStageFlags2 stage, format::HandleId queryPool, uint32_t query);
VKAPI_ATTR void VKAPI_CALL QueueSubmit2KHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId queue, uint32_t submitCount, StructPointerDecoder<Decoded_VkSubmitInfo2>* pSubmits, format::HandleId fence);
VKAPI_ATTR void VKAPI_CALL CmdWriteBufferMarker2AMD_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkPipelineStageFlags2 stage, format::HandleId dstBuffer, VkDeviceSize dstOffset, uint32_t marker);
VKAPI_ATTR void VKAPI_CALL GetQueueCheckpointData2NV_PreCall(const ApiCallInfo& call_info, format::HandleId queue, PointerDecoder<uint32_t>* pCheckpointDataCount, StructPointerDecoder<Decoded_VkCheckpointData2NV>* pCheckpointData);
VKAPI_ATTR void VKAPI_CALL CmdCopyBuffer2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkCopyBufferInfo2>* pCopyBufferInfo);
VKAPI_ATTR void VKAPI_CALL CmdCopyImage2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkCopyImageInfo2>* pCopyImageInfo);
VKAPI_ATTR void VKAPI_CALL CmdCopyBufferToImage2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkCopyBufferToImageInfo2>* pCopyBufferToImageInfo);
VKAPI_ATTR void VKAPI_CALL CmdCopyImageToBuffer2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkCopyImageToBufferInfo2>* pCopyImageToBufferInfo);
VKAPI_ATTR void VKAPI_CALL CmdBlitImage2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkBlitImageInfo2>* pBlitImageInfo);
VKAPI_ATTR void VKAPI_CALL CmdResolveImage2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkResolveImageInfo2>* pResolveImageInfo);
VKAPI_ATTR void VKAPI_CALL CmdTraceRaysIndirect2KHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkDeviceAddress indirectDeviceAddress);
VKAPI_ATTR void VKAPI_CALL GetDeviceBufferMemoryRequirementsKHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkDeviceBufferMemoryRequirements>* pInfo, StructPointerDecoder<Decoded_VkMemoryRequirements2>* pMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL GetDeviceImageMemoryRequirementsKHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkDeviceImageMemoryRequirements>* pInfo, StructPointerDecoder<Decoded_VkMemoryRequirements2>* pMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL GetDeviceImageSparseMemoryRequirementsKHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkDeviceImageMemoryRequirements>* pInfo, PointerDecoder<uint32_t>* pSparseMemoryRequirementCount, StructPointerDecoder<Decoded_VkSparseImageMemoryRequirements2>* pSparseMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL CreateDebugReportCallbackEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkDebugReportCallbackCreateInfoEXT>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkDebugReportCallbackEXT>* pCallback);
VKAPI_ATTR void VKAPI_CALL DestroyDebugReportCallbackEXT_PreCall(const ApiCallInfo& call_info, format::HandleId instance, format::HandleId callback, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL DebugReportMessageEXT_PreCall(const ApiCallInfo& call_info, format::HandleId instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, StringDecoder* pLayerPrefix, StringDecoder* pMessage);
VKAPI_ATTR void VKAPI_CALL DebugMarkerSetObjectTagEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkDebugMarkerObjectTagInfoEXT>* pTagInfo);
VKAPI_ATTR void VKAPI_CALL DebugMarkerSetObjectNameEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkDebugMarkerObjectNameInfoEXT>* pNameInfo);
VKAPI_ATTR void VKAPI_CALL CmdDebugMarkerBeginEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkDebugMarkerMarkerInfoEXT>* pMarkerInfo);
VKAPI_ATTR void VKAPI_CALL CmdDebugMarkerEndEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer);
VKAPI_ATTR void VKAPI_CALL CmdDebugMarkerInsertEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkDebugMarkerMarkerInfoEXT>* pMarkerInfo);
VKAPI_ATTR void VKAPI_CALL CmdBindTransformFeedbackBuffersEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstBinding, uint32_t bindingCount, HandlePointerDecoder<VkBuffer>* pBuffers, PointerDecoder<VkDeviceSize>* pOffsets, PointerDecoder<VkDeviceSize>* pSizes);
VKAPI_ATTR void VKAPI_CALL CmdBeginTransformFeedbackEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, HandlePointerDecoder<VkBuffer>* pCounterBuffers, PointerDecoder<VkDeviceSize>* pCounterBufferOffsets);
VKAPI_ATTR void VKAPI_CALL CmdEndTransformFeedbackEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, HandlePointerDecoder<VkBuffer>* pCounterBuffers, PointerDecoder<VkDeviceSize>* pCounterBufferOffsets);
VKAPI_ATTR void VKAPI_CALL CmdBeginQueryIndexedEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index);
VKAPI_ATTR void VKAPI_CALL CmdEndQueryIndexedEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId queryPool, uint32_t query, uint32_t index);
VKAPI_ATTR void VKAPI_CALL CmdDrawIndirectByteCountEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t instanceCount, uint32_t firstInstance, format::HandleId counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride);
VKAPI_ATTR void VKAPI_CALL GetImageViewHandleNVX_PreCall(const ApiCallInfo& call_info, uint32_t returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkImageViewHandleInfoNVX>* pInfo);
VKAPI_ATTR void VKAPI_CALL GetImageViewAddressNVX_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId imageView, StructPointerDecoder<Decoded_VkImageViewAddressPropertiesNVX>* pProperties);
VKAPI_ATTR void VKAPI_CALL CmdDrawIndirectCountAMD_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId buffer, VkDeviceSize offset, format::HandleId countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
VKAPI_ATTR void VKAPI_CALL CmdDrawIndexedIndirectCountAMD_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId buffer, VkDeviceSize offset, format::HandleId countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
VKAPI_ATTR void VKAPI_CALL GetShaderInfoAMD_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, PointerDecoder<size_t>* pInfoSize, PointerDecoder<uint8_t>* pInfo);
VKAPI_ATTR void VKAPI_CALL CreateStreamDescriptorSurfaceGGP_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkStreamDescriptorSurfaceCreateInfoGGP>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSurfaceKHR>* pSurface);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalImageFormatPropertiesNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, StructPointerDecoder<Decoded_VkExternalImageFormatPropertiesNV>* pExternalImageFormatProperties);
VKAPI_ATTR void VKAPI_CALL GetMemoryWin32HandleNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId memory, VkExternalMemoryHandleTypeFlagsNV handleType, PointerDecoder<uint64_t, void*>* pHandle);
VKAPI_ATTR void VKAPI_CALL CreateViSurfaceNN_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkViSurfaceCreateInfoNN>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSurfaceKHR>* pSurface);
VKAPI_ATTR void VKAPI_CALL CmdBeginConditionalRenderingEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkConditionalRenderingBeginInfoEXT>* pConditionalRenderingBegin);
VKAPI_ATTR void VKAPI_CALL CmdEndConditionalRenderingEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer);
VKAPI_ATTR void VKAPI_CALL CmdSetViewportWScalingNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstViewport, uint32_t viewportCount, StructPointerDecoder<Decoded_VkViewportWScalingNV>* pViewportWScalings);
VKAPI_ATTR void VKAPI_CALL ReleaseDisplayEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, format::HandleId display);
VKAPI_ATTR void VKAPI_CALL AcquireXlibDisplayEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, uint64_t dpy, format::HandleId display);
VKAPI_ATTR void VKAPI_CALL GetRandROutputDisplayEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, uint64_t dpy, size_t rrOutput, HandlePointerDecoder<VkDisplayKHR>* pDisplay);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSurfaceCapabilities2EXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, format::HandleId surface, StructPointerDecoder<Decoded_VkSurfaceCapabilities2EXT>* pSurfaceCapabilities);
VKAPI_ATTR void VKAPI_CALL DisplayPowerControlEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId display, StructPointerDecoder<Decoded_VkDisplayPowerInfoEXT>* pDisplayPowerInfo);
VKAPI_ATTR void VKAPI_CALL RegisterDeviceEventEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkDeviceEventInfoEXT>* pDeviceEventInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkFence>* pFence);
VKAPI_ATTR void VKAPI_CALL RegisterDisplayEventEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId display, StructPointerDecoder<Decoded_VkDisplayEventInfoEXT>* pDisplayEventInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkFence>* pFence);
VKAPI_ATTR void VKAPI_CALL GetSwapchainCounterEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId swapchain, VkSurfaceCounterFlagBitsEXT counter, PointerDecoder<uint64_t>* pCounterValue);
VKAPI_ATTR void VKAPI_CALL GetRefreshCycleDurationGOOGLE_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId swapchain, StructPointerDecoder<Decoded_VkRefreshCycleDurationGOOGLE>* pDisplayTimingProperties);
VKAPI_ATTR void VKAPI_CALL GetPastPresentationTimingGOOGLE_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId swapchain, PointerDecoder<uint32_t>* pPresentationTimingCount, StructPointerDecoder<Decoded_VkPastPresentationTimingGOOGLE>* pPresentationTimings);
VKAPI_ATTR void VKAPI_CALL CmdSetDiscardRectangleEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, StructPointerDecoder<Decoded_VkRect2D>* pDiscardRectangles);
VKAPI_ATTR void VKAPI_CALL CmdSetDiscardRectangleEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 discardRectangleEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetDiscardRectangleModeEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode);
VKAPI_ATTR void VKAPI_CALL SetHdrMetadataEXT_PreCall(const ApiCallInfo& call_info, format::HandleId device, uint32_t swapchainCount, HandlePointerDecoder<VkSwapchainKHR>* pSwapchains, StructPointerDecoder<Decoded_VkHdrMetadataEXT>* pMetadata);
VKAPI_ATTR void VKAPI_CALL CreateIOSSurfaceMVK_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkIOSSurfaceCreateInfoMVK>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSurfaceKHR>* pSurface);
VKAPI_ATTR void VKAPI_CALL CreateMacOSSurfaceMVK_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkMacOSSurfaceCreateInfoMVK>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSurfaceKHR>* pSurface);
VKAPI_ATTR void VKAPI_CALL SetDebugUtilsObjectNameEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkDebugUtilsObjectNameInfoEXT>* pNameInfo);
VKAPI_ATTR void VKAPI_CALL SetDebugUtilsObjectTagEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkDebugUtilsObjectTagInfoEXT>* pTagInfo);
VKAPI_ATTR void VKAPI_CALL QueueBeginDebugUtilsLabelEXT_PreCall(const ApiCallInfo& call_info, format::HandleId queue, StructPointerDecoder<Decoded_VkDebugUtilsLabelEXT>* pLabelInfo);
VKAPI_ATTR void VKAPI_CALL QueueEndDebugUtilsLabelEXT_PreCall(const ApiCallInfo& call_info, format::HandleId queue);
VKAPI_ATTR void VKAPI_CALL QueueInsertDebugUtilsLabelEXT_PreCall(const ApiCallInfo& call_info, format::HandleId queue, StructPointerDecoder<Decoded_VkDebugUtilsLabelEXT>* pLabelInfo);
VKAPI_ATTR void VKAPI_CALL CmdBeginDebugUtilsLabelEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkDebugUtilsLabelEXT>* pLabelInfo);
VKAPI_ATTR void VKAPI_CALL CmdEndDebugUtilsLabelEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer);
VKAPI_ATTR void VKAPI_CALL CmdInsertDebugUtilsLabelEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkDebugUtilsLabelEXT>* pLabelInfo);
VKAPI_ATTR void VKAPI_CALL CreateDebugUtilsMessengerEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkDebugUtilsMessengerCreateInfoEXT>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkDebugUtilsMessengerEXT>* pMessenger);
VKAPI_ATTR void VKAPI_CALL DestroyDebugUtilsMessengerEXT_PreCall(const ApiCallInfo& call_info, format::HandleId instance, format::HandleId messenger, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL SubmitDebugUtilsMessageEXT_PreCall(const ApiCallInfo& call_info, format::HandleId instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, StructPointerDecoder<Decoded_VkDebugUtilsMessengerCallbackDataEXT>* pCallbackData);
VKAPI_ATTR void VKAPI_CALL GetAndroidHardwareBufferPropertiesANDROID_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, uint64_t buffer, StructPointerDecoder<Decoded_VkAndroidHardwareBufferPropertiesANDROID>* pProperties);
VKAPI_ATTR void VKAPI_CALL GetMemoryAndroidHardwareBufferANDROID_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkMemoryGetAndroidHardwareBufferInfoANDROID>* pInfo, PointerDecoder<uint64_t, void*>* pBuffer);
VKAPI_ATTR void VKAPI_CALL CmdSetSampleLocationsEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkSampleLocationsInfoEXT>* pSampleLocationsInfo);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceMultisamplePropertiesEXT_PreCall(const ApiCallInfo& call_info, format::HandleId physicalDevice, VkSampleCountFlagBits samples, StructPointerDecoder<Decoded_VkMultisamplePropertiesEXT>* pMultisampleProperties);
VKAPI_ATTR void VKAPI_CALL GetImageDrmFormatModifierPropertiesEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId image, StructPointerDecoder<Decoded_VkImageDrmFormatModifierPropertiesEXT>* pProperties);
VKAPI_ATTR void VKAPI_CALL CreateValidationCacheEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkValidationCacheCreateInfoEXT>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkValidationCacheEXT>* pValidationCache);
VKAPI_ATTR void VKAPI_CALL DestroyValidationCacheEXT_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId validationCache, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL MergeValidationCachesEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId dstCache, uint32_t srcCacheCount, HandlePointerDecoder<VkValidationCacheEXT>* pSrcCaches);
VKAPI_ATTR void VKAPI_CALL GetValidationCacheDataEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId validationCache, PointerDecoder<size_t>* pDataSize, PointerDecoder<uint8_t>* pData);
VKAPI_ATTR void VKAPI_CALL CmdBindShadingRateImageNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId imageView, VkImageLayout imageLayout);
VKAPI_ATTR void VKAPI_CALL CmdSetViewportShadingRatePaletteNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstViewport, uint32_t viewportCount, StructPointerDecoder<Decoded_VkShadingRatePaletteNV>* pShadingRatePalettes);
VKAPI_ATTR void VKAPI_CALL CmdSetCoarseSampleOrderNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, StructPointerDecoder<Decoded_VkCoarseSampleOrderCustomNV>* pCustomSampleOrders);
VKAPI_ATTR void VKAPI_CALL CreateAccelerationStructureNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkAccelerationStructureCreateInfoNV>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkAccelerationStructureNV>* pAccelerationStructure);
VKAPI_ATTR void VKAPI_CALL DestroyAccelerationStructureNV_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId accelerationStructure, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL GetAccelerationStructureMemoryRequirementsNV_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkAccelerationStructureMemoryRequirementsInfoNV>* pInfo, StructPointerDecoder<Decoded_VkMemoryRequirements2KHR>* pMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL BindAccelerationStructureMemoryNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, uint32_t bindInfoCount, StructPointerDecoder<Decoded_VkBindAccelerationStructureMemoryInfoNV>* pBindInfos);
VKAPI_ATTR void VKAPI_CALL CmdBuildAccelerationStructureNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkAccelerationStructureInfoNV>* pInfo, format::HandleId instanceData, VkDeviceSize instanceOffset, VkBool32 update, format::HandleId dst, format::HandleId src, format::HandleId scratch, VkDeviceSize scratchOffset);
VKAPI_ATTR void VKAPI_CALL CmdCopyAccelerationStructureNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId dst, format::HandleId src, VkCopyAccelerationStructureModeKHR mode);
VKAPI_ATTR void VKAPI_CALL CmdTraceRaysNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, format::HandleId missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, format::HandleId hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, format::HandleId callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth);
VKAPI_ATTR void VKAPI_CALL CreateRayTracingPipelinesNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId pipelineCache, uint32_t createInfoCount, StructPointerDecoder<Decoded_VkRayTracingPipelineCreateInfoNV>* pCreateInfos, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkPipeline>* pPipelines);
VKAPI_ATTR void VKAPI_CALL GetRayTracingShaderGroupHandlesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, PointerDecoder<uint8_t>* pData);
VKAPI_ATTR void VKAPI_CALL GetRayTracingShaderGroupHandlesNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, PointerDecoder<uint8_t>* pData);
VKAPI_ATTR void VKAPI_CALL GetAccelerationStructureHandleNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId accelerationStructure, size_t dataSize, PointerDecoder<uint8_t>* pData);
VKAPI_ATTR void VKAPI_CALL CmdWriteAccelerationStructuresPropertiesNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t accelerationStructureCount, HandlePointerDecoder<VkAccelerationStructureNV>* pAccelerationStructures, VkQueryType queryType, format::HandleId queryPool, uint32_t firstQuery);
VKAPI_ATTR void VKAPI_CALL CompileDeferredNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId pipeline, uint32_t shader);
VKAPI_ATTR void VKAPI_CALL GetMemoryHostPointerPropertiesEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, VkExternalMemoryHandleTypeFlagBits handleType, uint64_t pHostPointer, StructPointerDecoder<Decoded_VkMemoryHostPointerPropertiesEXT>* pMemoryHostPointerProperties);
VKAPI_ATTR void VKAPI_CALL CmdWriteBufferMarkerAMD_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkPipelineStageFlagBits pipelineStage, format::HandleId dstBuffer, VkDeviceSize dstOffset, uint32_t marker);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceCalibrateableTimeDomainsEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, PointerDecoder<uint32_t>* pTimeDomainCount, PointerDecoder<VkTimeDomainEXT>* pTimeDomains);
VKAPI_ATTR void VKAPI_CALL GetCalibratedTimestampsEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, uint32_t timestampCount, StructPointerDecoder<Decoded_VkCalibratedTimestampInfoEXT>* pTimestampInfos, PointerDecoder<uint64_t>* pTimestamps, PointerDecoder<uint64_t>* pMaxDeviation);
VKAPI_ATTR void VKAPI_CALL CmdDrawMeshTasksNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t taskCount, uint32_t firstTask);
VKAPI_ATTR void VKAPI_CALL CmdDrawMeshTasksIndirectNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
VKAPI_ATTR void VKAPI_CALL CmdDrawMeshTasksIndirectCountNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId buffer, VkDeviceSize offset, format::HandleId countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
VKAPI_ATTR void VKAPI_CALL CmdSetExclusiveScissorEnableNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, PointerDecoder<VkBool32>* pExclusiveScissorEnables);
VKAPI_ATTR void VKAPI_CALL CmdSetExclusiveScissorNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, StructPointerDecoder<Decoded_VkRect2D>* pExclusiveScissors);
VKAPI_ATTR void VKAPI_CALL CmdSetCheckpointNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint64_t pCheckpointMarker);
VKAPI_ATTR void VKAPI_CALL GetQueueCheckpointDataNV_PreCall(const ApiCallInfo& call_info, format::HandleId queue, PointerDecoder<uint32_t>* pCheckpointDataCount, StructPointerDecoder<Decoded_VkCheckpointDataNV>* pCheckpointData);
VKAPI_ATTR void VKAPI_CALL InitializePerformanceApiINTEL_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkInitializePerformanceApiInfoINTEL>* pInitializeInfo);
VKAPI_ATTR void VKAPI_CALL UninitializePerformanceApiINTEL_PreCall(const ApiCallInfo& call_info, format::HandleId device);
VKAPI_ATTR void VKAPI_CALL CmdSetPerformanceMarkerINTEL_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkPerformanceMarkerInfoINTEL>* pMarkerInfo);
VKAPI_ATTR void VKAPI_CALL CmdSetPerformanceStreamMarkerINTEL_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkPerformanceStreamMarkerInfoINTEL>* pMarkerInfo);
VKAPI_ATTR void VKAPI_CALL CmdSetPerformanceOverrideINTEL_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkPerformanceOverrideInfoINTEL>* pOverrideInfo);
VKAPI_ATTR void VKAPI_CALL AcquirePerformanceConfigurationINTEL_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkPerformanceConfigurationAcquireInfoINTEL>* pAcquireInfo, HandlePointerDecoder<VkPerformanceConfigurationINTEL>* pConfiguration);
VKAPI_ATTR void VKAPI_CALL ReleasePerformanceConfigurationINTEL_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId configuration);
VKAPI_ATTR void VKAPI_CALL QueueSetPerformanceConfigurationINTEL_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId queue, format::HandleId configuration);
VKAPI_ATTR void VKAPI_CALL GetPerformanceParameterINTEL_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, VkPerformanceParameterTypeINTEL parameter, StructPointerDecoder<Decoded_VkPerformanceValueINTEL>* pValue);
VKAPI_ATTR void VKAPI_CALL SetLocalDimmingAMD_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId swapChain, VkBool32 localDimmingEnable);
VKAPI_ATTR void VKAPI_CALL CreateImagePipeSurfaceFUCHSIA_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkImagePipeSurfaceCreateInfoFUCHSIA>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSurfaceKHR>* pSurface);
VKAPI_ATTR void VKAPI_CALL CreateMetalSurfaceEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkMetalSurfaceCreateInfoEXT>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSurfaceKHR>* pSurface);
VKAPI_ATTR void VKAPI_CALL GetBufferDeviceAddressEXT_PreCall(const ApiCallInfo& call_info, VkDeviceAddress returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkBufferDeviceAddressInfo>* pInfo);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceToolPropertiesEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, PointerDecoder<uint32_t>* pToolCount, StructPointerDecoder<Decoded_VkPhysicalDeviceToolProperties>* pToolProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceCooperativeMatrixPropertiesNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, PointerDecoder<uint32_t>* pPropertyCount, StructPointerDecoder<Decoded_VkCooperativeMatrixPropertiesNV>* pProperties);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, PointerDecoder<uint32_t>* pCombinationCount, StructPointerDecoder<Decoded_VkFramebufferMixedSamplesCombinationNV>* pCombinations);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSurfacePresentModes2EXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkPhysicalDeviceSurfaceInfo2KHR>* pSurfaceInfo, PointerDecoder<uint32_t>* pPresentModeCount, PointerDecoder<VkPresentModeKHR>* pPresentModes);
VKAPI_ATTR void VKAPI_CALL AcquireFullScreenExclusiveModeEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId swapchain);
VKAPI_ATTR void VKAPI_CALL ReleaseFullScreenExclusiveModeEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId swapchain);
VKAPI_ATTR void VKAPI_CALL GetDeviceGroupSurfacePresentModes2EXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkPhysicalDeviceSurfaceInfo2KHR>* pSurfaceInfo, PointerDecoder<VkDeviceGroupPresentModeFlagsKHR>* pModes);
VKAPI_ATTR void VKAPI_CALL CreateHeadlessSurfaceEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkHeadlessSurfaceCreateInfoEXT>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSurfaceKHR>* pSurface);
VKAPI_ATTR void VKAPI_CALL CmdSetLineStippleEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern);
VKAPI_ATTR void VKAPI_CALL ResetQueryPoolEXT_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId queryPool, uint32_t firstQuery, uint32_t queryCount);
VKAPI_ATTR void VKAPI_CALL CmdSetCullModeEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkCullModeFlags cullMode);
VKAPI_ATTR void VKAPI_CALL CmdSetFrontFaceEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkFrontFace frontFace);
VKAPI_ATTR void VKAPI_CALL CmdSetPrimitiveTopologyEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkPrimitiveTopology primitiveTopology);
VKAPI_ATTR void VKAPI_CALL CmdSetViewportWithCountEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t viewportCount, StructPointerDecoder<Decoded_VkViewport>* pViewports);
VKAPI_ATTR void VKAPI_CALL CmdSetScissorWithCountEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t scissorCount, StructPointerDecoder<Decoded_VkRect2D>* pScissors);
VKAPI_ATTR void VKAPI_CALL CmdBindVertexBuffers2EXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstBinding, uint32_t bindingCount, HandlePointerDecoder<VkBuffer>* pBuffers, PointerDecoder<VkDeviceSize>* pOffsets, PointerDecoder<VkDeviceSize>* pSizes, PointerDecoder<VkDeviceSize>* pStrides);
VKAPI_ATTR void VKAPI_CALL CmdSetDepthTestEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 depthTestEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetDepthWriteEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 depthWriteEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetDepthCompareOpEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkCompareOp depthCompareOp);
VKAPI_ATTR void VKAPI_CALL CmdSetDepthBoundsTestEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 depthBoundsTestEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetStencilTestEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 stencilTestEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetStencilOpEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp);
VKAPI_ATTR void VKAPI_CALL ReleaseSwapchainImagesEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkReleaseSwapchainImagesInfoEXT>* pReleaseInfo);
VKAPI_ATTR void VKAPI_CALL GetGeneratedCommandsMemoryRequirementsNV_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkGeneratedCommandsMemoryRequirementsInfoNV>* pInfo, StructPointerDecoder<Decoded_VkMemoryRequirements2>* pMemoryRequirements);
VKAPI_ATTR void VKAPI_CALL CmdPreprocessGeneratedCommandsNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkGeneratedCommandsInfoNV>* pGeneratedCommandsInfo);
VKAPI_ATTR void VKAPI_CALL CmdExecuteGeneratedCommandsNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 isPreprocessed, StructPointerDecoder<Decoded_VkGeneratedCommandsInfoNV>* pGeneratedCommandsInfo);
VKAPI_ATTR void VKAPI_CALL CmdBindPipelineShaderGroupNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkPipelineBindPoint pipelineBindPoint, format::HandleId pipeline, uint32_t groupIndex);
VKAPI_ATTR void VKAPI_CALL CreateIndirectCommandsLayoutNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkIndirectCommandsLayoutCreateInfoNV>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkIndirectCommandsLayoutNV>* pIndirectCommandsLayout);
VKAPI_ATTR void VKAPI_CALL DestroyIndirectCommandsLayoutNV_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId indirectCommandsLayout, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL AcquireDrmDisplayEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, int32_t drmFd, format::HandleId display);
VKAPI_ATTR void VKAPI_CALL GetDrmDisplayEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, int32_t drmFd, uint32_t connectorId, HandlePointerDecoder<VkDisplayKHR>* display);
VKAPI_ATTR void VKAPI_CALL CreatePrivateDataSlotEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkPrivateDataSlotCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkPrivateDataSlot>* pPrivateDataSlot);
VKAPI_ATTR void VKAPI_CALL DestroyPrivateDataSlotEXT_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId privateDataSlot, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL SetPrivateDataEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, VkObjectType objectType, uint64_t objectHandle, format::HandleId privateDataSlot, uint64_t data);
VKAPI_ATTR void VKAPI_CALL GetPrivateDataEXT_PreCall(const ApiCallInfo& call_info, format::HandleId device, VkObjectType objectType, uint64_t objectHandle, format::HandleId privateDataSlot, PointerDecoder<uint64_t>* pData);
VKAPI_ATTR void VKAPI_CALL CmdSetFragmentShadingRateEnumNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkFragmentShadingRateNV shadingRate, PointerDecoder<VkFragmentShadingRateCombinerOpKHR>* combinerOps);
VKAPI_ATTR void VKAPI_CALL GetImageSubresourceLayout2EXT_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId image, StructPointerDecoder<Decoded_VkImageSubresource2EXT>* pSubresource, StructPointerDecoder<Decoded_VkSubresourceLayout2EXT>* pLayout);
VKAPI_ATTR void VKAPI_CALL GetDeviceFaultInfoEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkDeviceFaultCountsEXT>* pFaultCounts, StructPointerDecoder<Decoded_VkDeviceFaultInfoEXT>* pFaultInfo);
VKAPI_ATTR void VKAPI_CALL AcquireWinrtDisplayNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, format::HandleId display);
VKAPI_ATTR void VKAPI_CALL GetWinrtDisplayNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, uint32_t deviceRelativeId, HandlePointerDecoder<VkDisplayKHR>* pDisplay);
VKAPI_ATTR void VKAPI_CALL CreateDirectFBSurfaceEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkDirectFBSurfaceCreateInfoEXT>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSurfaceKHR>* pSurface);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceDirectFBPresentationSupportEXT_PreCall(const ApiCallInfo& call_info, VkBool32 returnValue, format::HandleId physicalDevice, uint32_t queueFamilyIndex, uint64_t dfb);
VKAPI_ATTR void VKAPI_CALL CmdSetVertexInputEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t vertexBindingDescriptionCount, StructPointerDecoder<Decoded_VkVertexInputBindingDescription2EXT>* pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, StructPointerDecoder<Decoded_VkVertexInputAttributeDescription2EXT>* pVertexAttributeDescriptions);
VKAPI_ATTR void VKAPI_CALL GetMemoryZirconHandleFUCHSIA_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkMemoryGetZirconHandleInfoFUCHSIA>* pGetZirconHandleInfo, PointerDecoder<uint32_t>* pZirconHandle);
VKAPI_ATTR void VKAPI_CALL GetMemoryZirconHandlePropertiesFUCHSIA_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, VkExternalMemoryHandleTypeFlagBits handleType, uint32_t zirconHandle, StructPointerDecoder<Decoded_VkMemoryZirconHandlePropertiesFUCHSIA>* pMemoryZirconHandleProperties);
VKAPI_ATTR void VKAPI_CALL ImportSemaphoreZirconHandleFUCHSIA_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkImportSemaphoreZirconHandleInfoFUCHSIA>* pImportSemaphoreZirconHandleInfo);
VKAPI_ATTR void VKAPI_CALL GetSemaphoreZirconHandleFUCHSIA_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkSemaphoreGetZirconHandleInfoFUCHSIA>* pGetZirconHandleInfo, PointerDecoder<uint32_t>* pZirconHandle);
VKAPI_ATTR void VKAPI_CALL CmdBindInvocationMaskHUAWEI_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId imageView, VkImageLayout imageLayout);
VKAPI_ATTR void VKAPI_CALL GetMemoryRemoteAddressNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkMemoryGetRemoteAddressInfoNV>* pMemoryGetRemoteAddressInfo, PointerDecoder<uint64_t, void*>* pAddress);
VKAPI_ATTR void VKAPI_CALL CmdSetPatchControlPointsEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t patchControlPoints);
VKAPI_ATTR void VKAPI_CALL CmdSetRasterizerDiscardEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 rasterizerDiscardEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetDepthBiasEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 depthBiasEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetLogicOpEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkLogicOp logicOp);
VKAPI_ATTR void VKAPI_CALL CmdSetPrimitiveRestartEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 primitiveRestartEnable);
VKAPI_ATTR void VKAPI_CALL CreateScreenSurfaceQNX_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId instance, StructPointerDecoder<Decoded_VkScreenSurfaceCreateInfoQNX>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkSurfaceKHR>* pSurface);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceScreenPresentationSupportQNX_PreCall(const ApiCallInfo& call_info, VkBool32 returnValue, format::HandleId physicalDevice, uint32_t queueFamilyIndex, uint64_t window);
VKAPI_ATTR void VKAPI_CALL CmdSetColorWriteEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t attachmentCount, PointerDecoder<VkBool32>* pColorWriteEnables);
VKAPI_ATTR void VKAPI_CALL CmdDrawMultiEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t drawCount, StructPointerDecoder<Decoded_VkMultiDrawInfoEXT>* pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride);
VKAPI_ATTR void VKAPI_CALL CmdDrawMultiIndexedEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t drawCount, StructPointerDecoder<Decoded_VkMultiDrawIndexedInfoEXT>* pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, PointerDecoder<int32_t>* pVertexOffset);
VKAPI_ATTR void VKAPI_CALL CreateMicromapEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkMicromapCreateInfoEXT>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkMicromapEXT>* pMicromap);
VKAPI_ATTR void VKAPI_CALL DestroyMicromapEXT_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId micromap, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL CmdBuildMicromapsEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t infoCount, StructPointerDecoder<Decoded_VkMicromapBuildInfoEXT>* pInfos);
VKAPI_ATTR void VKAPI_CALL BuildMicromapsEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId deferredOperation, uint32_t infoCount, StructPointerDecoder<Decoded_VkMicromapBuildInfoEXT>* pInfos);
VKAPI_ATTR void VKAPI_CALL CopyMicromapEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId deferredOperation, StructPointerDecoder<Decoded_VkCopyMicromapInfoEXT>* pInfo);
VKAPI_ATTR void VKAPI_CALL CopyMicromapToMemoryEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId deferredOperation, StructPointerDecoder<Decoded_VkCopyMicromapToMemoryInfoEXT>* pInfo);
VKAPI_ATTR void VKAPI_CALL CopyMemoryToMicromapEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId deferredOperation, StructPointerDecoder<Decoded_VkCopyMemoryToMicromapInfoEXT>* pInfo);
VKAPI_ATTR void VKAPI_CALL WriteMicromapsPropertiesEXT_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, uint32_t micromapCount, HandlePointerDecoder<VkMicromapEXT>* pMicromaps, VkQueryType queryType, size_t dataSize, PointerDecoder<uint8_t>* pData, size_t stride);
VKAPI_ATTR void VKAPI_CALL CmdCopyMicromapEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkCopyMicromapInfoEXT>* pInfo);
VKAPI_ATTR void VKAPI_CALL CmdCopyMicromapToMemoryEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkCopyMicromapToMemoryInfoEXT>* pInfo);
VKAPI_ATTR void VKAPI_CALL CmdCopyMemoryToMicromapEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkCopyMemoryToMicromapInfoEXT>* pInfo);
VKAPI_ATTR void VKAPI_CALL CmdWriteMicromapsPropertiesEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t micromapCount, HandlePointerDecoder<VkMicromapEXT>* pMicromaps, VkQueryType queryType, format::HandleId queryPool, uint32_t firstQuery);
VKAPI_ATTR void VKAPI_CALL GetDeviceMicromapCompatibilityEXT_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkMicromapVersionInfoEXT>* pVersionInfo, PointerDecoder<VkAccelerationStructureCompatibilityKHR>* pCompatibility);
VKAPI_ATTR void VKAPI_CALL GetMicromapBuildSizesEXT_PreCall(const ApiCallInfo& call_info, format::HandleId device, VkAccelerationStructureBuildTypeKHR buildType, StructPointerDecoder<Decoded_VkMicromapBuildInfoEXT>* pBuildInfo, StructPointerDecoder<Decoded_VkMicromapBuildSizesInfoEXT>* pSizeInfo);
VKAPI_ATTR void VKAPI_CALL CmdDrawClusterHUAWEI_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
VKAPI_ATTR void VKAPI_CALL CmdDrawClusterIndirectHUAWEI_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId buffer, VkDeviceSize offset);
VKAPI_ATTR void VKAPI_CALL SetDeviceMemoryPriorityEXT_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId memory, float priority);
VKAPI_ATTR void VKAPI_CALL GetDescriptorSetLayoutHostMappingInfoVALVE_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkDescriptorSetBindingReferenceVALVE>* pBindingReference, StructPointerDecoder<Decoded_VkDescriptorSetLayoutHostMappingInfoVALVE>* pHostMapping);
VKAPI_ATTR void VKAPI_CALL GetDescriptorSetHostMappingVALVE_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId descriptorSet, PointerDecoder<uint64_t, void*>* ppData);
VKAPI_ATTR void VKAPI_CALL CmdSetTessellationDomainOriginEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkTessellationDomainOrigin domainOrigin);
VKAPI_ATTR void VKAPI_CALL CmdSetDepthClampEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 depthClampEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetPolygonModeEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkPolygonMode polygonMode);
VKAPI_ATTR void VKAPI_CALL CmdSetRasterizationSamplesEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkSampleCountFlagBits rasterizationSamples);
VKAPI_ATTR void VKAPI_CALL CmdSetSampleMaskEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkSampleCountFlagBits samples, PointerDecoder<VkSampleMask>* pSampleMask);
VKAPI_ATTR void VKAPI_CALL CmdSetAlphaToCoverageEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 alphaToCoverageEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetAlphaToOneEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 alphaToOneEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetLogicOpEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 logicOpEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetColorBlendEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, PointerDecoder<VkBool32>* pColorBlendEnables);
VKAPI_ATTR void VKAPI_CALL CmdSetColorBlendEquationEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, StructPointerDecoder<Decoded_VkColorBlendEquationEXT>* pColorBlendEquations);
VKAPI_ATTR void VKAPI_CALL CmdSetColorWriteMaskEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, PointerDecoder<VkColorComponentFlags>* pColorWriteMasks);
VKAPI_ATTR void VKAPI_CALL CmdSetRasterizationStreamEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t rasterizationStream);
VKAPI_ATTR void VKAPI_CALL CmdSetConservativeRasterizationModeEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode);
VKAPI_ATTR void VKAPI_CALL CmdSetExtraPrimitiveOverestimationSizeEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, float extraPrimitiveOverestimationSize);
VKAPI_ATTR void VKAPI_CALL CmdSetDepthClipEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 depthClipEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetSampleLocationsEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 sampleLocationsEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetColorBlendAdvancedEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, StructPointerDecoder<Decoded_VkColorBlendAdvancedEXT>* pColorBlendAdvanced);
VKAPI_ATTR void VKAPI_CALL CmdSetProvokingVertexModeEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkProvokingVertexModeEXT provokingVertexMode);
VKAPI_ATTR void VKAPI_CALL CmdSetLineRasterizationModeEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode);
VKAPI_ATTR void VKAPI_CALL CmdSetLineStippleEnableEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 stippledLineEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetDepthClipNegativeOneToOneEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 negativeOneToOne);
VKAPI_ATTR void VKAPI_CALL CmdSetViewportWScalingEnableNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 viewportWScalingEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetViewportSwizzleNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t firstViewport, uint32_t viewportCount, StructPointerDecoder<Decoded_VkViewportSwizzleNV>* pViewportSwizzles);
VKAPI_ATTR void VKAPI_CALL CmdSetCoverageToColorEnableNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 coverageToColorEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetCoverageToColorLocationNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t coverageToColorLocation);
VKAPI_ATTR void VKAPI_CALL CmdSetCoverageModulationModeNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkCoverageModulationModeNV coverageModulationMode);
VKAPI_ATTR void VKAPI_CALL CmdSetCoverageModulationTableEnableNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 coverageModulationTableEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetCoverageModulationTableNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t coverageModulationTableCount, PointerDecoder<float>* pCoverageModulationTable);
VKAPI_ATTR void VKAPI_CALL CmdSetShadingRateImageEnableNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 shadingRateImageEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetRepresentativeFragmentTestEnableNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkBool32 representativeFragmentTestEnable);
VKAPI_ATTR void VKAPI_CALL CmdSetCoverageReductionModeNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, VkCoverageReductionModeNV coverageReductionMode);
VKAPI_ATTR void VKAPI_CALL GetShaderModuleIdentifierEXT_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId shaderModule, StructPointerDecoder<Decoded_VkShaderModuleIdentifierEXT>* pIdentifier);
VKAPI_ATTR void VKAPI_CALL GetShaderModuleCreateInfoIdentifierEXT_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkShaderModuleCreateInfo>* pCreateInfo, StructPointerDecoder<Decoded_VkShaderModuleIdentifierEXT>* pIdentifier);
VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceOpticalFlowImageFormatsNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId physicalDevice, StructPointerDecoder<Decoded_VkOpticalFlowImageFormatInfoNV>* pOpticalFlowImageFormatInfo, PointerDecoder<uint32_t>* pFormatCount, StructPointerDecoder<Decoded_VkOpticalFlowImageFormatPropertiesNV>* pImageFormatProperties);
VKAPI_ATTR void VKAPI_CALL CreateOpticalFlowSessionNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkOpticalFlowSessionCreateInfoNV>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkOpticalFlowSessionNV>* pSession);
VKAPI_ATTR void VKAPI_CALL DestroyOpticalFlowSessionNV_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId session, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL BindOpticalFlowSessionImageNV_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId session, VkOpticalFlowSessionBindingPointNV bindingPoint, format::HandleId view, VkImageLayout layout);
VKAPI_ATTR void VKAPI_CALL CmdOpticalFlowExecuteNV_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId session, StructPointerDecoder<Decoded_VkOpticalFlowExecuteInfoNV>* pExecuteInfo);
VKAPI_ATTR void VKAPI_CALL GetFramebufferTilePropertiesQCOM_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId framebuffer, PointerDecoder<uint32_t>* pPropertiesCount, StructPointerDecoder<Decoded_VkTilePropertiesQCOM>* pProperties);
VKAPI_ATTR void VKAPI_CALL GetDynamicRenderingTilePropertiesQCOM_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkRenderingInfo>* pRenderingInfo, StructPointerDecoder<Decoded_VkTilePropertiesQCOM>* pProperties);
VKAPI_ATTR void VKAPI_CALL CreateAccelerationStructureKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkAccelerationStructureCreateInfoKHR>* pCreateInfo, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkAccelerationStructureKHR>* pAccelerationStructure);
VKAPI_ATTR void VKAPI_CALL DestroyAccelerationStructureKHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, format::HandleId accelerationStructure, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator);
VKAPI_ATTR void VKAPI_CALL CmdBuildAccelerationStructuresKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t infoCount, StructPointerDecoder<Decoded_VkAccelerationStructureBuildGeometryInfoKHR>* pInfos, StructPointerDecoder<Decoded_VkAccelerationStructureBuildRangeInfoKHR*>* ppBuildRangeInfos);
VKAPI_ATTR void VKAPI_CALL CmdBuildAccelerationStructuresIndirectKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t infoCount, StructPointerDecoder<Decoded_VkAccelerationStructureBuildGeometryInfoKHR>* pInfos, PointerDecoder<VkDeviceAddress>* pIndirectDeviceAddresses, PointerDecoder<uint32_t>* pIndirectStrides, PointerDecoder<uint32_t*>* ppMaxPrimitiveCounts);
VKAPI_ATTR void VKAPI_CALL CopyAccelerationStructureToMemoryKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId deferredOperation, StructPointerDecoder<Decoded_VkCopyAccelerationStructureToMemoryInfoKHR>* pInfo);
VKAPI_ATTR void VKAPI_CALL CopyMemoryToAccelerationStructureKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId deferredOperation, StructPointerDecoder<Decoded_VkCopyMemoryToAccelerationStructureInfoKHR>* pInfo);
VKAPI_ATTR void VKAPI_CALL WriteAccelerationStructuresPropertiesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, uint32_t accelerationStructureCount, HandlePointerDecoder<VkAccelerationStructureKHR>* pAccelerationStructures, VkQueryType queryType, size_t dataSize, PointerDecoder<uint8_t>* pData, size_t stride);
VKAPI_ATTR void VKAPI_CALL CmdCopyAccelerationStructureKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkCopyAccelerationStructureInfoKHR>* pInfo);
VKAPI_ATTR void VKAPI_CALL CmdCopyAccelerationStructureToMemoryKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkCopyAccelerationStructureToMemoryInfoKHR>* pInfo);
VKAPI_ATTR void VKAPI_CALL CmdCopyMemoryToAccelerationStructureKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkCopyMemoryToAccelerationStructureInfoKHR>* pInfo);
VKAPI_ATTR void VKAPI_CALL GetAccelerationStructureDeviceAddressKHR_PreCall(const ApiCallInfo& call_info, VkDeviceAddress returnValue, format::HandleId device, StructPointerDecoder<Decoded_VkAccelerationStructureDeviceAddressInfoKHR>* pInfo);
VKAPI_ATTR void VKAPI_CALL CmdWriteAccelerationStructuresPropertiesKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t accelerationStructureCount, HandlePointerDecoder<VkAccelerationStructureKHR>* pAccelerationStructures, VkQueryType queryType, format::HandleId queryPool, uint32_t firstQuery);
VKAPI_ATTR void VKAPI_CALL GetDeviceAccelerationStructureCompatibilityKHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, StructPointerDecoder<Decoded_VkAccelerationStructureVersionInfoKHR>* pVersionInfo, PointerDecoder<VkAccelerationStructureCompatibilityKHR>* pCompatibility);
VKAPI_ATTR void VKAPI_CALL GetAccelerationStructureBuildSizesKHR_PreCall(const ApiCallInfo& call_info, format::HandleId device, VkAccelerationStructureBuildTypeKHR buildType, StructPointerDecoder<Decoded_VkAccelerationStructureBuildGeometryInfoKHR>* pBuildInfo, PointerDecoder<uint32_t>* pMaxPrimitiveCounts, StructPointerDecoder<Decoded_VkAccelerationStructureBuildSizesInfoKHR>* pSizeInfo);
VKAPI_ATTR void VKAPI_CALL CmdTraceRaysKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkStridedDeviceAddressRegionKHR>* pRaygenShaderBindingTable, StructPointerDecoder<Decoded_VkStridedDeviceAddressRegionKHR>* pMissShaderBindingTable, StructPointerDecoder<Decoded_VkStridedDeviceAddressRegionKHR>* pHitShaderBindingTable, StructPointerDecoder<Decoded_VkStridedDeviceAddressRegionKHR>* pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth);
VKAPI_ATTR void VKAPI_CALL CreateRayTracingPipelinesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId deferredOperation, format::HandleId pipelineCache, uint32_t createInfoCount, StructPointerDecoder<Decoded_VkRayTracingPipelineCreateInfoKHR>* pCreateInfos, StructPointerDecoder<Decoded_VkAllocationCallbacks>* pAllocator, HandlePointerDecoder<VkPipeline>* pPipelines);
VKAPI_ATTR void VKAPI_CALL GetRayTracingCaptureReplayShaderGroupHandlesKHR_PreCall(const ApiCallInfo& call_info, VkResult returnValue, format::HandleId device, format::HandleId pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, PointerDecoder<uint8_t>* pData);
VKAPI_ATTR void VKAPI_CALL CmdTraceRaysIndirectKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, StructPointerDecoder<Decoded_VkStridedDeviceAddressRegionKHR>* pRaygenShaderBindingTable, StructPointerDecoder<Decoded_VkStridedDeviceAddressRegionKHR>* pMissShaderBindingTable, StructPointerDecoder<Decoded_VkStridedDeviceAddressRegionKHR>* pHitShaderBindingTable, StructPointerDecoder<Decoded_VkStridedDeviceAddressRegionKHR>* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress);
VKAPI_ATTR void VKAPI_CALL GetRayTracingShaderGroupStackSizeKHR_PreCall(const ApiCallInfo& call_info, VkDeviceSize returnValue, format::HandleId device, format::HandleId pipeline, uint32_t group, VkShaderGroupShaderKHR groupShader);
VKAPI_ATTR void VKAPI_CALL CmdSetRayTracingPipelineStackSizeKHR_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t pipelineStackSize);
VKAPI_ATTR void VKAPI_CALL CmdDrawMeshTasksEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
VKAPI_ATTR void VKAPI_CALL CmdDrawMeshTasksIndirectEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
VKAPI_ATTR void VKAPI_CALL CmdDrawMeshTasksIndirectCountEXT_PreCall(const ApiCallInfo& call_info, format::HandleId commandBuffer, format::HandleId buffer, VkDeviceSize offset, format::HandleId countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
}
// clang-format on

GFXRECON_END_NAMESPACE(replay)
GFXRECON_END_NAMESPACE(plugins)
GFXRECON_END_NAMESPACE(gfxrecon)

#endif
