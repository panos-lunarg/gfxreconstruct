/*
** Copyright (c) 2018-2021 Valve Corporation
** Copyright (c) 2018-2022 LunarG, Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and associated documentation files (the "Software"),
** to deal in the Software without restriction, including without limitation
** the rights to use, copy, modify, merge, publish, distribute, sublicense,
** and/or sell copies of the Software, and to permit persons to whom the
** Software is furnished to do so, subject to the following conditions:
**
** The above copyright notice and this permission notice shall be included in
** all copies or substantial portions of the Software.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
** FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
*/

/*
** This file is generated from the Khronos Vulkan XML API Registry.
**
*/

#ifndef GFXRECON_ENCODE_GENERATED_VULKAN_ENCODER_COMMANDS_H
#define GFXRECON_ENCODE_GENERATED_VULKAN_ENCODER_COMMANDS_H

#include "encode/custom_vulkan_encoder_commands.h"
// #include "encode/perfetto/perfetto_encoder_commands.h"

#include "encode/vulkan_capture_manager.h"
#include "format/api_call_id.h"
#include "util/defines.h"

GFXRECON_BEGIN_NAMESPACE(gfxrecon)
GFXRECON_BEGIN_NAMESPACE(encode)

template <format::ApiCallId Id>
struct EncoderPreCall
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {}
};

template <format::ApiCallId Id>
struct EncoderPostCall
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {}

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult, Args... args)
    {}
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateInstance>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateInstance>::Dispatch(manager, args...);

        // for (auto &plugin : manager->loaded_plugins_)
        // {
        //     plugins::PFN_CreateInstance_PreCall func = reinterpret_cast<plugins::PFN_CreateInstance_PreCall>( plugin.funcs_pre["CreateInstance_PreCall"]);
        //     if (func) func(manager, args...);
        //     // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateInstance>::Dispatch(manager, args...);
        // }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateInstance>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateInstance>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateInstance>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateInstance>::Dispatch(manager, result, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateInstance_PreCall func = reinterpret_cast<plugins::PFN_CreateInstance_PreCall>( plugin.funcs_pre["CreateInstance_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateInstance>::Dispatch(manager, args...);
        }

        // if (manager->GetEmitPerfettoData())
        // {
        //     // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateInstance>::Dispatch(manager, result, args...);
        // }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyInstance>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyInstance>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyInstance_PreCall func = reinterpret_cast<plugins::PFN_DestroyInstance_PreCall>( plugin.funcs_pre["DestroyInstance_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyInstance>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyInstance>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyInstance>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyInstance>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyInstance>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyInstance>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDevices>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDevices>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_EnumeratePhysicalDevices_PreCall func = reinterpret_cast<plugins::PFN_EnumeratePhysicalDevices_PreCall>( plugin.funcs_pre["EnumeratePhysicalDevices_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDevices>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDevices>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDevices>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDevices>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDevices>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDevices>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceFeatures_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceFeatures_PreCall>( plugin.funcs_pre["GetPhysicalDeviceFeatures_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceFormatProperties_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceFormatProperties_PreCall>( plugin.funcs_pre["GetPhysicalDeviceFormatProperties_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceImageFormatProperties_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceImageFormatProperties_PreCall>( plugin.funcs_pre["GetPhysicalDeviceImageFormatProperties_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceProperties_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceProperties_PreCall>( plugin.funcs_pre["GetPhysicalDeviceProperties_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceQueueFamilyProperties_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceQueueFamilyProperties_PreCall>( plugin.funcs_pre["GetPhysicalDeviceQueueFamilyProperties_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceMemoryProperties_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceMemoryProperties_PreCall>( plugin.funcs_pre["GetPhysicalDeviceMemoryProperties_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetInstanceProcAddr>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetInstanceProcAddr>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_GetInstanceProcAddr_PreCall func = reinterpret_cast<plugins::PFN_GetInstanceProcAddr_PreCall>( plugin.funcs_pre["GetInstanceProcAddr_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetInstanceProcAddr>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetInstanceProcAddr>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetInstanceProcAddr>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetInstanceProcAddr>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetInstanceProcAddr>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetInstanceProcAddr>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceProcAddr>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceProcAddr>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_GetDeviceProcAddr_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceProcAddr_PreCall>( plugin.funcs_pre["GetDeviceProcAddr_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceProcAddr>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceProcAddr>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceProcAddr>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceProcAddr>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceProcAddr>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceProcAddr>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateDevice>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDevice>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateDevice_PreCall func = reinterpret_cast<plugins::PFN_CreateDevice_PreCall>( plugin.funcs_pre["CreateDevice_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDevice>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateDevice>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDevice>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDevice>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDevice>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDevice>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDevice>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDevice>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyDevice_PreCall func = reinterpret_cast<plugins::PFN_DestroyDevice_PreCall>( plugin.funcs_pre["DestroyDevice_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDevice>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDevice>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDevice>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDevice>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDevice>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDevice>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkEnumerateInstanceExtensionProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkEnumerateInstanceExtensionProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_EnumerateInstanceExtensionProperties_PreCall func = reinterpret_cast<plugins::PFN_EnumerateInstanceExtensionProperties_PreCall>( plugin.funcs_pre["EnumerateInstanceExtensionProperties_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkEnumerateInstanceExtensionProperties>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateInstanceExtensionProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateInstanceExtensionProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateInstanceExtensionProperties>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateInstanceExtensionProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateInstanceExtensionProperties>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkEnumerateDeviceExtensionProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkEnumerateDeviceExtensionProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_EnumerateDeviceExtensionProperties_PreCall func = reinterpret_cast<plugins::PFN_EnumerateDeviceExtensionProperties_PreCall>( plugin.funcs_pre["EnumerateDeviceExtensionProperties_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkEnumerateDeviceExtensionProperties>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateDeviceExtensionProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateDeviceExtensionProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateDeviceExtensionProperties>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateDeviceExtensionProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateDeviceExtensionProperties>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkEnumerateInstanceLayerProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkEnumerateInstanceLayerProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_EnumerateInstanceLayerProperties_PreCall func = reinterpret_cast<plugins::PFN_EnumerateInstanceLayerProperties_PreCall>( plugin.funcs_pre["EnumerateInstanceLayerProperties_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkEnumerateInstanceLayerProperties>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateInstanceLayerProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateInstanceLayerProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateInstanceLayerProperties>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateInstanceLayerProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateInstanceLayerProperties>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkEnumerateDeviceLayerProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkEnumerateDeviceLayerProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_EnumerateDeviceLayerProperties_PreCall func = reinterpret_cast<plugins::PFN_EnumerateDeviceLayerProperties_PreCall>( plugin.funcs_pre["EnumerateDeviceLayerProperties_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkEnumerateDeviceLayerProperties>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateDeviceLayerProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateDeviceLayerProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateDeviceLayerProperties>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateDeviceLayerProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateDeviceLayerProperties>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceQueue>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceQueue>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceQueue_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceQueue_PreCall>( plugin.funcs_pre["GetDeviceQueue_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceQueue>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceQueue>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceQueue>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceQueue>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceQueue>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceQueue>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkQueueSubmit>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkQueueSubmit>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_QueueSubmit_PreCall func = reinterpret_cast<plugins::PFN_QueueSubmit_PreCall>( plugin.funcs_pre["QueueSubmit_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkQueueSubmit>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkQueueSubmit>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueSubmit>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueSubmit>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueSubmit>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueSubmit>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkQueueWaitIdle>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkQueueWaitIdle>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_QueueWaitIdle_PreCall func = reinterpret_cast<plugins::PFN_QueueWaitIdle_PreCall>( plugin.funcs_pre["QueueWaitIdle_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkQueueWaitIdle>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkQueueWaitIdle>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueWaitIdle>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueWaitIdle>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueWaitIdle>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueWaitIdle>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDeviceWaitIdle>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDeviceWaitIdle>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DeviceWaitIdle_PreCall func = reinterpret_cast<plugins::PFN_DeviceWaitIdle_PreCall>( plugin.funcs_pre["DeviceWaitIdle_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDeviceWaitIdle>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDeviceWaitIdle>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDeviceWaitIdle>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDeviceWaitIdle>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDeviceWaitIdle>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDeviceWaitIdle>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkAllocateMemory>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkAllocateMemory>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_AllocateMemory_PreCall func = reinterpret_cast<plugins::PFN_AllocateMemory_PreCall>( plugin.funcs_pre["AllocateMemory_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkAllocateMemory>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkAllocateMemory>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAllocateMemory>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAllocateMemory>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAllocateMemory>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAllocateMemory>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkFreeMemory>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkFreeMemory>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_FreeMemory_PreCall func = reinterpret_cast<plugins::PFN_FreeMemory_PreCall>( plugin.funcs_pre["FreeMemory_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkFreeMemory>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkFreeMemory>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkFreeMemory>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkFreeMemory>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkFreeMemory>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkFreeMemory>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkMapMemory>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkMapMemory>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_MapMemory_PreCall func = reinterpret_cast<plugins::PFN_MapMemory_PreCall>( plugin.funcs_pre["MapMemory_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkMapMemory>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkMapMemory>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkMapMemory>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkMapMemory>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkMapMemory>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkMapMemory>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkUnmapMemory>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkUnmapMemory>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_UnmapMemory_PreCall func = reinterpret_cast<plugins::PFN_UnmapMemory_PreCall>( plugin.funcs_pre["UnmapMemory_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkUnmapMemory>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkUnmapMemory>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkUnmapMemory>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkUnmapMemory>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkUnmapMemory>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkUnmapMemory>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkFlushMappedMemoryRanges>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkFlushMappedMemoryRanges>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_FlushMappedMemoryRanges_PreCall func = reinterpret_cast<plugins::PFN_FlushMappedMemoryRanges_PreCall>( plugin.funcs_pre["FlushMappedMemoryRanges_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkFlushMappedMemoryRanges>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkFlushMappedMemoryRanges>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkFlushMappedMemoryRanges>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkFlushMappedMemoryRanges>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkFlushMappedMemoryRanges>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkFlushMappedMemoryRanges>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkInvalidateMappedMemoryRanges>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkInvalidateMappedMemoryRanges>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_InvalidateMappedMemoryRanges_PreCall func = reinterpret_cast<plugins::PFN_InvalidateMappedMemoryRanges_PreCall>( plugin.funcs_pre["InvalidateMappedMemoryRanges_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkInvalidateMappedMemoryRanges>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkInvalidateMappedMemoryRanges>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkInvalidateMappedMemoryRanges>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkInvalidateMappedMemoryRanges>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkInvalidateMappedMemoryRanges>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkInvalidateMappedMemoryRanges>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryCommitment>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryCommitment>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceMemoryCommitment_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceMemoryCommitment_PreCall>( plugin.funcs_pre["GetDeviceMemoryCommitment_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryCommitment>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryCommitment>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryCommitment>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryCommitment>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryCommitment>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryCommitment>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkBindBufferMemory>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkBindBufferMemory>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_BindBufferMemory_PreCall func = reinterpret_cast<plugins::PFN_BindBufferMemory_PreCall>( plugin.funcs_pre["BindBufferMemory_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkBindBufferMemory>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkBindBufferMemory>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindBufferMemory>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindBufferMemory>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindBufferMemory>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindBufferMemory>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkBindImageMemory>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkBindImageMemory>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_BindImageMemory_PreCall func = reinterpret_cast<plugins::PFN_BindImageMemory_PreCall>( plugin.funcs_pre["BindImageMemory_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkBindImageMemory>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkBindImageMemory>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindImageMemory>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindImageMemory>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindImageMemory>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindImageMemory>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetBufferMemoryRequirements_PreCall func = reinterpret_cast<plugins::PFN_GetBufferMemoryRequirements_PreCall>( plugin.funcs_pre["GetBufferMemoryRequirements_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetImageMemoryRequirements_PreCall func = reinterpret_cast<plugins::PFN_GetImageMemoryRequirements_PreCall>( plugin.funcs_pre["GetImageMemoryRequirements_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetImageSparseMemoryRequirements_PreCall func = reinterpret_cast<plugins::PFN_GetImageSparseMemoryRequirements_PreCall>( plugin.funcs_pre["GetImageSparseMemoryRequirements_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceSparseImageFormatProperties_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceSparseImageFormatProperties_PreCall>( plugin.funcs_pre["GetPhysicalDeviceSparseImageFormatProperties_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkQueueBindSparse>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkQueueBindSparse>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_QueueBindSparse_PreCall func = reinterpret_cast<plugins::PFN_QueueBindSparse_PreCall>( plugin.funcs_pre["QueueBindSparse_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkQueueBindSparse>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkQueueBindSparse>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueBindSparse>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueBindSparse>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueBindSparse>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueBindSparse>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateFence>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateFence>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateFence_PreCall func = reinterpret_cast<plugins::PFN_CreateFence_PreCall>( plugin.funcs_pre["CreateFence_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateFence>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateFence>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateFence>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateFence>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateFence>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateFence>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyFence>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyFence>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyFence_PreCall func = reinterpret_cast<plugins::PFN_DestroyFence_PreCall>( plugin.funcs_pre["DestroyFence_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyFence>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyFence>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyFence>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyFence>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyFence>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyFence>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkResetFences>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkResetFences>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ResetFences_PreCall func = reinterpret_cast<plugins::PFN_ResetFences_PreCall>( plugin.funcs_pre["ResetFences_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkResetFences>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkResetFences>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkResetFences>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkResetFences>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkResetFences>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkResetFences>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetFenceStatus>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetFenceStatus>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetFenceStatus_PreCall func = reinterpret_cast<plugins::PFN_GetFenceStatus_PreCall>( plugin.funcs_pre["GetFenceStatus_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetFenceStatus>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetFenceStatus>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetFenceStatus>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetFenceStatus>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetFenceStatus>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetFenceStatus>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkWaitForFences>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkWaitForFences>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_WaitForFences_PreCall func = reinterpret_cast<plugins::PFN_WaitForFences_PreCall>( plugin.funcs_pre["WaitForFences_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkWaitForFences>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkWaitForFences>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkWaitForFences>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkWaitForFences>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkWaitForFences>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkWaitForFences>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateSemaphore>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateSemaphore>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateSemaphore_PreCall func = reinterpret_cast<plugins::PFN_CreateSemaphore_PreCall>( plugin.funcs_pre["CreateSemaphore_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateSemaphore>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateSemaphore>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSemaphore>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSemaphore>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSemaphore>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSemaphore>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroySemaphore>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroySemaphore>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroySemaphore_PreCall func = reinterpret_cast<plugins::PFN_DestroySemaphore_PreCall>( plugin.funcs_pre["DestroySemaphore_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroySemaphore>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroySemaphore>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySemaphore>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySemaphore>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySemaphore>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySemaphore>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateEvent>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateEvent>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateEvent_PreCall func = reinterpret_cast<plugins::PFN_CreateEvent_PreCall>( plugin.funcs_pre["CreateEvent_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateEvent>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateEvent>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateEvent>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateEvent>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateEvent>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateEvent>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyEvent>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyEvent>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyEvent_PreCall func = reinterpret_cast<plugins::PFN_DestroyEvent_PreCall>( plugin.funcs_pre["DestroyEvent_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyEvent>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyEvent>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyEvent>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyEvent>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyEvent>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyEvent>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetEventStatus>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetEventStatus>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetEventStatus_PreCall func = reinterpret_cast<plugins::PFN_GetEventStatus_PreCall>( plugin.funcs_pre["GetEventStatus_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetEventStatus>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetEventStatus>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetEventStatus>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetEventStatus>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetEventStatus>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetEventStatus>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkSetEvent>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkSetEvent>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_SetEvent_PreCall func = reinterpret_cast<plugins::PFN_SetEvent_PreCall>( plugin.funcs_pre["SetEvent_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkSetEvent>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkSetEvent>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSetEvent>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSetEvent>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSetEvent>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSetEvent>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkResetEvent>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkResetEvent>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ResetEvent_PreCall func = reinterpret_cast<plugins::PFN_ResetEvent_PreCall>( plugin.funcs_pre["ResetEvent_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkResetEvent>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkResetEvent>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkResetEvent>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkResetEvent>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkResetEvent>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkResetEvent>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateQueryPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateQueryPool>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateQueryPool_PreCall func = reinterpret_cast<plugins::PFN_CreateQueryPool_PreCall>( plugin.funcs_pre["CreateQueryPool_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateQueryPool>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateQueryPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateQueryPool>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateQueryPool>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateQueryPool>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateQueryPool>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyQueryPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyQueryPool>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyQueryPool_PreCall func = reinterpret_cast<plugins::PFN_DestroyQueryPool_PreCall>( plugin.funcs_pre["DestroyQueryPool_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyQueryPool>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyQueryPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyQueryPool>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyQueryPool>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyQueryPool>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyQueryPool>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetQueryPoolResults>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetQueryPoolResults>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetQueryPoolResults_PreCall func = reinterpret_cast<plugins::PFN_GetQueryPoolResults_PreCall>( plugin.funcs_pre["GetQueryPoolResults_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetQueryPoolResults>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetQueryPoolResults>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetQueryPoolResults>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetQueryPoolResults>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetQueryPoolResults>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetQueryPoolResults>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateBuffer>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateBuffer_PreCall func = reinterpret_cast<plugins::PFN_CreateBuffer_PreCall>( plugin.funcs_pre["CreateBuffer_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateBuffer>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateBuffer>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateBuffer>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateBuffer>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateBuffer>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyBuffer>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyBuffer_PreCall func = reinterpret_cast<plugins::PFN_DestroyBuffer_PreCall>( plugin.funcs_pre["DestroyBuffer_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyBuffer>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyBuffer>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyBuffer>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyBuffer>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyBuffer>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateBufferView>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateBufferView>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateBufferView_PreCall func = reinterpret_cast<plugins::PFN_CreateBufferView_PreCall>( plugin.funcs_pre["CreateBufferView_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateBufferView>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateBufferView>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateBufferView>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateBufferView>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateBufferView>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateBufferView>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyBufferView>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyBufferView>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyBufferView_PreCall func = reinterpret_cast<plugins::PFN_DestroyBufferView_PreCall>( plugin.funcs_pre["DestroyBufferView_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyBufferView>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyBufferView>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyBufferView>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyBufferView>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyBufferView>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyBufferView>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateImage>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateImage>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateImage_PreCall func = reinterpret_cast<plugins::PFN_CreateImage_PreCall>( plugin.funcs_pre["CreateImage_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateImage>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateImage>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateImage>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateImage>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateImage>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateImage>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyImage>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyImage>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyImage_PreCall func = reinterpret_cast<plugins::PFN_DestroyImage_PreCall>( plugin.funcs_pre["DestroyImage_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyImage>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyImage>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyImage>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyImage>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyImage>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyImage>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetImageSubresourceLayout>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageSubresourceLayout>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetImageSubresourceLayout_PreCall func = reinterpret_cast<plugins::PFN_GetImageSubresourceLayout_PreCall>( plugin.funcs_pre["GetImageSubresourceLayout_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageSubresourceLayout>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSubresourceLayout>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSubresourceLayout>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSubresourceLayout>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSubresourceLayout>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSubresourceLayout>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateImageView>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateImageView>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateImageView_PreCall func = reinterpret_cast<plugins::PFN_CreateImageView_PreCall>( plugin.funcs_pre["CreateImageView_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateImageView>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateImageView>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateImageView>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateImageView>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateImageView>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateImageView>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyImageView>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyImageView>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyImageView_PreCall func = reinterpret_cast<plugins::PFN_DestroyImageView_PreCall>( plugin.funcs_pre["DestroyImageView_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyImageView>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyImageView>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyImageView>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyImageView>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyImageView>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyImageView>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateShaderModule>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateShaderModule>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateShaderModule_PreCall func = reinterpret_cast<plugins::PFN_CreateShaderModule_PreCall>( plugin.funcs_pre["CreateShaderModule_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateShaderModule>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateShaderModule>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateShaderModule>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateShaderModule>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateShaderModule>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateShaderModule>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyShaderModule>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyShaderModule>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyShaderModule_PreCall func = reinterpret_cast<plugins::PFN_DestroyShaderModule_PreCall>( plugin.funcs_pre["DestroyShaderModule_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyShaderModule>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyShaderModule>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyShaderModule>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyShaderModule>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyShaderModule>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyShaderModule>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreatePipelineCache>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreatePipelineCache>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreatePipelineCache_PreCall func = reinterpret_cast<plugins::PFN_CreatePipelineCache_PreCall>( plugin.funcs_pre["CreatePipelineCache_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreatePipelineCache>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreatePipelineCache>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreatePipelineCache>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreatePipelineCache>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreatePipelineCache>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreatePipelineCache>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyPipelineCache>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyPipelineCache>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyPipelineCache_PreCall func = reinterpret_cast<plugins::PFN_DestroyPipelineCache_PreCall>( plugin.funcs_pre["DestroyPipelineCache_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyPipelineCache>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPipelineCache>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPipelineCache>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPipelineCache>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPipelineCache>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPipelineCache>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPipelineCacheData>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPipelineCacheData>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPipelineCacheData_PreCall func = reinterpret_cast<plugins::PFN_GetPipelineCacheData_PreCall>( plugin.funcs_pre["GetPipelineCacheData_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPipelineCacheData>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineCacheData>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineCacheData>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineCacheData>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineCacheData>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineCacheData>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkMergePipelineCaches>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkMergePipelineCaches>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_MergePipelineCaches_PreCall func = reinterpret_cast<plugins::PFN_MergePipelineCaches_PreCall>( plugin.funcs_pre["MergePipelineCaches_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkMergePipelineCaches>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkMergePipelineCaches>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkMergePipelineCaches>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkMergePipelineCaches>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkMergePipelineCaches>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkMergePipelineCaches>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateGraphicsPipelines>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateGraphicsPipelines>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateGraphicsPipelines_PreCall func = reinterpret_cast<plugins::PFN_CreateGraphicsPipelines_PreCall>( plugin.funcs_pre["CreateGraphicsPipelines_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateGraphicsPipelines>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateGraphicsPipelines>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateGraphicsPipelines>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateGraphicsPipelines>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateGraphicsPipelines>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateGraphicsPipelines>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateComputePipelines>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateComputePipelines>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateComputePipelines_PreCall func = reinterpret_cast<plugins::PFN_CreateComputePipelines_PreCall>( plugin.funcs_pre["CreateComputePipelines_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateComputePipelines>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateComputePipelines>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateComputePipelines>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateComputePipelines>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateComputePipelines>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateComputePipelines>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyPipeline>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyPipeline>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyPipeline_PreCall func = reinterpret_cast<plugins::PFN_DestroyPipeline_PreCall>( plugin.funcs_pre["DestroyPipeline_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyPipeline>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPipeline>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPipeline>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPipeline>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPipeline>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPipeline>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreatePipelineLayout>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreatePipelineLayout>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreatePipelineLayout_PreCall func = reinterpret_cast<plugins::PFN_CreatePipelineLayout_PreCall>( plugin.funcs_pre["CreatePipelineLayout_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreatePipelineLayout>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreatePipelineLayout>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreatePipelineLayout>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreatePipelineLayout>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreatePipelineLayout>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreatePipelineLayout>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyPipelineLayout>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyPipelineLayout>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyPipelineLayout_PreCall func = reinterpret_cast<plugins::PFN_DestroyPipelineLayout_PreCall>( plugin.funcs_pre["DestroyPipelineLayout_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyPipelineLayout>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPipelineLayout>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPipelineLayout>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPipelineLayout>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPipelineLayout>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPipelineLayout>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateSampler>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateSampler>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateSampler_PreCall func = reinterpret_cast<plugins::PFN_CreateSampler_PreCall>( plugin.funcs_pre["CreateSampler_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateSampler>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateSampler>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSampler>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSampler>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSampler>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSampler>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroySampler>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroySampler>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroySampler_PreCall func = reinterpret_cast<plugins::PFN_DestroySampler_PreCall>( plugin.funcs_pre["DestroySampler_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroySampler>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroySampler>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySampler>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySampler>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySampler>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySampler>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateDescriptorSetLayout>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDescriptorSetLayout>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateDescriptorSetLayout_PreCall func = reinterpret_cast<plugins::PFN_CreateDescriptorSetLayout_PreCall>( plugin.funcs_pre["CreateDescriptorSetLayout_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDescriptorSetLayout>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorSetLayout>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorSetLayout>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorSetLayout>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorSetLayout>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorSetLayout>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDescriptorSetLayout>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDescriptorSetLayout>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyDescriptorSetLayout_PreCall func = reinterpret_cast<plugins::PFN_DestroyDescriptorSetLayout_PreCall>( plugin.funcs_pre["DestroyDescriptorSetLayout_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDescriptorSetLayout>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorSetLayout>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorSetLayout>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorSetLayout>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorSetLayout>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorSetLayout>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateDescriptorPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDescriptorPool>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateDescriptorPool_PreCall func = reinterpret_cast<plugins::PFN_CreateDescriptorPool_PreCall>( plugin.funcs_pre["CreateDescriptorPool_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDescriptorPool>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorPool>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorPool>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorPool>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorPool>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDescriptorPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDescriptorPool>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyDescriptorPool_PreCall func = reinterpret_cast<plugins::PFN_DestroyDescriptorPool_PreCall>( plugin.funcs_pre["DestroyDescriptorPool_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDescriptorPool>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorPool>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorPool>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorPool>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorPool>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkResetDescriptorPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkResetDescriptorPool>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ResetDescriptorPool_PreCall func = reinterpret_cast<plugins::PFN_ResetDescriptorPool_PreCall>( plugin.funcs_pre["ResetDescriptorPool_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkResetDescriptorPool>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkResetDescriptorPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkResetDescriptorPool>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkResetDescriptorPool>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkResetDescriptorPool>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkResetDescriptorPool>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkAllocateDescriptorSets>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkAllocateDescriptorSets>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_AllocateDescriptorSets_PreCall func = reinterpret_cast<plugins::PFN_AllocateDescriptorSets_PreCall>( plugin.funcs_pre["AllocateDescriptorSets_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkAllocateDescriptorSets>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkAllocateDescriptorSets>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAllocateDescriptorSets>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAllocateDescriptorSets>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAllocateDescriptorSets>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAllocateDescriptorSets>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkFreeDescriptorSets>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkFreeDescriptorSets>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_FreeDescriptorSets_PreCall func = reinterpret_cast<plugins::PFN_FreeDescriptorSets_PreCall>( plugin.funcs_pre["FreeDescriptorSets_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkFreeDescriptorSets>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkFreeDescriptorSets>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkFreeDescriptorSets>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkFreeDescriptorSets>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkFreeDescriptorSets>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkFreeDescriptorSets>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSets>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSets>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_UpdateDescriptorSets_PreCall func = reinterpret_cast<plugins::PFN_UpdateDescriptorSets_PreCall>( plugin.funcs_pre["UpdateDescriptorSets_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSets>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSets>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSets>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSets>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSets>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSets>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateFramebuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateFramebuffer>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateFramebuffer_PreCall func = reinterpret_cast<plugins::PFN_CreateFramebuffer_PreCall>( plugin.funcs_pre["CreateFramebuffer_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateFramebuffer>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateFramebuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateFramebuffer>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateFramebuffer>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateFramebuffer>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateFramebuffer>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyFramebuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyFramebuffer>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyFramebuffer_PreCall func = reinterpret_cast<plugins::PFN_DestroyFramebuffer_PreCall>( plugin.funcs_pre["DestroyFramebuffer_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyFramebuffer>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyFramebuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyFramebuffer>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyFramebuffer>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyFramebuffer>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyFramebuffer>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateRenderPass>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateRenderPass>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateRenderPass_PreCall func = reinterpret_cast<plugins::PFN_CreateRenderPass_PreCall>( plugin.funcs_pre["CreateRenderPass_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateRenderPass>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateRenderPass>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRenderPass>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRenderPass>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRenderPass>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRenderPass>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyRenderPass>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyRenderPass>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyRenderPass_PreCall func = reinterpret_cast<plugins::PFN_DestroyRenderPass_PreCall>( plugin.funcs_pre["DestroyRenderPass_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyRenderPass>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyRenderPass>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyRenderPass>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyRenderPass>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyRenderPass>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyRenderPass>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetRenderAreaGranularity>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetRenderAreaGranularity>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetRenderAreaGranularity_PreCall func = reinterpret_cast<plugins::PFN_GetRenderAreaGranularity_PreCall>( plugin.funcs_pre["GetRenderAreaGranularity_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetRenderAreaGranularity>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetRenderAreaGranularity>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetRenderAreaGranularity>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetRenderAreaGranularity>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetRenderAreaGranularity>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetRenderAreaGranularity>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateCommandPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateCommandPool>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateCommandPool_PreCall func = reinterpret_cast<plugins::PFN_CreateCommandPool_PreCall>( plugin.funcs_pre["CreateCommandPool_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateCommandPool>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateCommandPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateCommandPool>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateCommandPool>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateCommandPool>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateCommandPool>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyCommandPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyCommandPool>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyCommandPool_PreCall func = reinterpret_cast<plugins::PFN_DestroyCommandPool_PreCall>( plugin.funcs_pre["DestroyCommandPool_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyCommandPool>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyCommandPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyCommandPool>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyCommandPool>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyCommandPool>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyCommandPool>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkResetCommandPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkResetCommandPool>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ResetCommandPool_PreCall func = reinterpret_cast<plugins::PFN_ResetCommandPool_PreCall>( plugin.funcs_pre["ResetCommandPool_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkResetCommandPool>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkResetCommandPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkResetCommandPool>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkResetCommandPool>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkResetCommandPool>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkResetCommandPool>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkAllocateCommandBuffers>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkAllocateCommandBuffers>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_AllocateCommandBuffers_PreCall func = reinterpret_cast<plugins::PFN_AllocateCommandBuffers_PreCall>( plugin.funcs_pre["AllocateCommandBuffers_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkAllocateCommandBuffers>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkAllocateCommandBuffers>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAllocateCommandBuffers>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAllocateCommandBuffers>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAllocateCommandBuffers>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAllocateCommandBuffers>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkFreeCommandBuffers>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkFreeCommandBuffers>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_FreeCommandBuffers_PreCall func = reinterpret_cast<plugins::PFN_FreeCommandBuffers_PreCall>( plugin.funcs_pre["FreeCommandBuffers_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkFreeCommandBuffers>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkFreeCommandBuffers>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkFreeCommandBuffers>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkFreeCommandBuffers>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkFreeCommandBuffers>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkFreeCommandBuffers>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkBeginCommandBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkBeginCommandBuffer>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_BeginCommandBuffer_PreCall func = reinterpret_cast<plugins::PFN_BeginCommandBuffer_PreCall>( plugin.funcs_pre["BeginCommandBuffer_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkBeginCommandBuffer>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkBeginCommandBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBeginCommandBuffer>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBeginCommandBuffer>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBeginCommandBuffer>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBeginCommandBuffer>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkEndCommandBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkEndCommandBuffer>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_EndCommandBuffer_PreCall func = reinterpret_cast<plugins::PFN_EndCommandBuffer_PreCall>( plugin.funcs_pre["EndCommandBuffer_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkEndCommandBuffer>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkEndCommandBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEndCommandBuffer>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEndCommandBuffer>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEndCommandBuffer>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEndCommandBuffer>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkResetCommandBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkResetCommandBuffer>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ResetCommandBuffer_PreCall func = reinterpret_cast<plugins::PFN_ResetCommandBuffer_PreCall>( plugin.funcs_pre["ResetCommandBuffer_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkResetCommandBuffer>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkResetCommandBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkResetCommandBuffer>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkResetCommandBuffer>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkResetCommandBuffer>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkResetCommandBuffer>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindPipeline>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindPipeline>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBindPipeline_PreCall func = reinterpret_cast<plugins::PFN_CmdBindPipeline_PreCall>( plugin.funcs_pre["CmdBindPipeline_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindPipeline>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindPipeline>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindPipeline>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindPipeline>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindPipeline>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindPipeline>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewport>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewport>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetViewport_PreCall func = reinterpret_cast<plugins::PFN_CmdSetViewport_PreCall>( plugin.funcs_pre["CmdSetViewport_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewport>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewport>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewport>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewport>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewport>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewport>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetScissor>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetScissor>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetScissor_PreCall func = reinterpret_cast<plugins::PFN_CmdSetScissor_PreCall>( plugin.funcs_pre["CmdSetScissor_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetScissor>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetScissor>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetScissor>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetScissor>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetScissor>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetScissor>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLineWidth>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLineWidth>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetLineWidth_PreCall func = reinterpret_cast<plugins::PFN_CmdSetLineWidth_PreCall>( plugin.funcs_pre["CmdSetLineWidth_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLineWidth>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineWidth>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineWidth>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineWidth>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineWidth>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineWidth>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBias>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBias>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDepthBias_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDepthBias_PreCall>( plugin.funcs_pre["CmdSetDepthBias_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBias>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBias>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBias>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBias>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBias>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBias>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetBlendConstants>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetBlendConstants>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetBlendConstants_PreCall func = reinterpret_cast<plugins::PFN_CmdSetBlendConstants_PreCall>( plugin.funcs_pre["CmdSetBlendConstants_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetBlendConstants>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetBlendConstants>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetBlendConstants>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetBlendConstants>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetBlendConstants>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetBlendConstants>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBounds>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBounds>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDepthBounds_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDepthBounds_PreCall>( plugin.funcs_pre["CmdSetDepthBounds_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBounds>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBounds>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBounds>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBounds>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBounds>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBounds>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilCompareMask>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilCompareMask>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetStencilCompareMask_PreCall func = reinterpret_cast<plugins::PFN_CmdSetStencilCompareMask_PreCall>( plugin.funcs_pre["CmdSetStencilCompareMask_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilCompareMask>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilCompareMask>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilCompareMask>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilCompareMask>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilCompareMask>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilCompareMask>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilWriteMask>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilWriteMask>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetStencilWriteMask_PreCall func = reinterpret_cast<plugins::PFN_CmdSetStencilWriteMask_PreCall>( plugin.funcs_pre["CmdSetStencilWriteMask_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilWriteMask>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilWriteMask>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilWriteMask>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilWriteMask>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilWriteMask>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilWriteMask>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilReference>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilReference>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetStencilReference_PreCall func = reinterpret_cast<plugins::PFN_CmdSetStencilReference_PreCall>( plugin.funcs_pre["CmdSetStencilReference_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilReference>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilReference>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilReference>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilReference>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilReference>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilReference>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindDescriptorSets>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindDescriptorSets>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBindDescriptorSets_PreCall func = reinterpret_cast<plugins::PFN_CmdBindDescriptorSets_PreCall>( plugin.funcs_pre["CmdBindDescriptorSets_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindDescriptorSets>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindDescriptorSets>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindDescriptorSets>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindDescriptorSets>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindDescriptorSets>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindDescriptorSets>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindIndexBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindIndexBuffer>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBindIndexBuffer_PreCall func = reinterpret_cast<plugins::PFN_CmdBindIndexBuffer_PreCall>( plugin.funcs_pre["CmdBindIndexBuffer_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindIndexBuffer>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindIndexBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindIndexBuffer>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindIndexBuffer>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindIndexBuffer>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindIndexBuffer>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBindVertexBuffers_PreCall func = reinterpret_cast<plugins::PFN_CmdBindVertexBuffers_PreCall>( plugin.funcs_pre["CmdBindVertexBuffers_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDraw>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDraw>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDraw_PreCall func = reinterpret_cast<plugins::PFN_CmdDraw_PreCall>( plugin.funcs_pre["CmdDraw_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDraw>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDraw>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDraw>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDraw>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDraw>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDraw>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndexed>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndexed>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawIndexed_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawIndexed_PreCall>( plugin.funcs_pre["CmdDrawIndexed_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndexed>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexed>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexed>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexed>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexed>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexed>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndirect>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndirect>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawIndirect_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawIndirect_PreCall>( plugin.funcs_pre["CmdDrawIndirect_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndirect>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirect>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirect>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirect>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirect>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirect>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirect>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirect>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawIndexedIndirect_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawIndexedIndirect_PreCall>( plugin.funcs_pre["CmdDrawIndexedIndirect_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirect>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirect>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirect>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirect>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirect>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirect>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDispatch>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDispatch>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDispatch_PreCall func = reinterpret_cast<plugins::PFN_CmdDispatch_PreCall>( plugin.funcs_pre["CmdDispatch_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDispatch>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatch>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatch>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatch>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatch>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatch>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDispatchIndirect>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDispatchIndirect>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDispatchIndirect_PreCall func = reinterpret_cast<plugins::PFN_CmdDispatchIndirect_PreCall>( plugin.funcs_pre["CmdDispatchIndirect_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDispatchIndirect>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatchIndirect>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatchIndirect>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatchIndirect>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatchIndirect>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatchIndirect>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyBuffer_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyBuffer_PreCall>( plugin.funcs_pre["CmdCopyBuffer_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImage>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImage>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyImage_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyImage_PreCall>( plugin.funcs_pre["CmdCopyImage_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImage>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImage>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImage>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImage>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImage>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImage>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBlitImage>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBlitImage>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBlitImage_PreCall func = reinterpret_cast<plugins::PFN_CmdBlitImage_PreCall>( plugin.funcs_pre["CmdBlitImage_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBlitImage>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBlitImage>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBlitImage>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBlitImage>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBlitImage>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBlitImage>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyBufferToImage_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyBufferToImage_PreCall>( plugin.funcs_pre["CmdCopyBufferToImage_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyImageToBuffer_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyImageToBuffer_PreCall>( plugin.funcs_pre["CmdCopyImageToBuffer_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdUpdateBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdUpdateBuffer>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdUpdateBuffer_PreCall func = reinterpret_cast<plugins::PFN_CmdUpdateBuffer_PreCall>( plugin.funcs_pre["CmdUpdateBuffer_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdUpdateBuffer>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdUpdateBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdUpdateBuffer>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdUpdateBuffer>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdUpdateBuffer>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdUpdateBuffer>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdFillBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdFillBuffer>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdFillBuffer_PreCall func = reinterpret_cast<plugins::PFN_CmdFillBuffer_PreCall>( plugin.funcs_pre["CmdFillBuffer_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdFillBuffer>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdFillBuffer>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdFillBuffer>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdFillBuffer>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdFillBuffer>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdFillBuffer>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdClearColorImage>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdClearColorImage>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdClearColorImage_PreCall func = reinterpret_cast<plugins::PFN_CmdClearColorImage_PreCall>( plugin.funcs_pre["CmdClearColorImage_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdClearColorImage>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdClearColorImage>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdClearColorImage>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdClearColorImage>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdClearColorImage>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdClearColorImage>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdClearDepthStencilImage>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdClearDepthStencilImage>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdClearDepthStencilImage_PreCall func = reinterpret_cast<plugins::PFN_CmdClearDepthStencilImage_PreCall>( plugin.funcs_pre["CmdClearDepthStencilImage_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdClearDepthStencilImage>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdClearDepthStencilImage>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdClearDepthStencilImage>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdClearDepthStencilImage>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdClearDepthStencilImage>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdClearDepthStencilImage>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdClearAttachments>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdClearAttachments>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdClearAttachments_PreCall func = reinterpret_cast<plugins::PFN_CmdClearAttachments_PreCall>( plugin.funcs_pre["CmdClearAttachments_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdClearAttachments>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdClearAttachments>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdClearAttachments>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdClearAttachments>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdClearAttachments>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdClearAttachments>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdResolveImage>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdResolveImage>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdResolveImage_PreCall func = reinterpret_cast<plugins::PFN_CmdResolveImage_PreCall>( plugin.funcs_pre["CmdResolveImage_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdResolveImage>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdResolveImage>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResolveImage>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResolveImage>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResolveImage>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResolveImage>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetEvent>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetEvent>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetEvent_PreCall func = reinterpret_cast<plugins::PFN_CmdSetEvent_PreCall>( plugin.funcs_pre["CmdSetEvent_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetEvent>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetEvent>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetEvent>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetEvent>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetEvent>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetEvent>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdResetEvent>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdResetEvent>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdResetEvent_PreCall func = reinterpret_cast<plugins::PFN_CmdResetEvent_PreCall>( plugin.funcs_pre["CmdResetEvent_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdResetEvent>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetEvent>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetEvent>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetEvent>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetEvent>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetEvent>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdWaitEvents>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWaitEvents>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdWaitEvents_PreCall func = reinterpret_cast<plugins::PFN_CmdWaitEvents_PreCall>( plugin.funcs_pre["CmdWaitEvents_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWaitEvents>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdWaitEvents>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWaitEvents>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWaitEvents>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWaitEvents>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWaitEvents>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdPipelineBarrier_PreCall func = reinterpret_cast<plugins::PFN_CmdPipelineBarrier_PreCall>( plugin.funcs_pre["CmdPipelineBarrier_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginQuery>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginQuery>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBeginQuery_PreCall func = reinterpret_cast<plugins::PFN_CmdBeginQuery_PreCall>( plugin.funcs_pre["CmdBeginQuery_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginQuery>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginQuery>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginQuery>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginQuery>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginQuery>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginQuery>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndQuery>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndQuery>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdEndQuery_PreCall func = reinterpret_cast<plugins::PFN_CmdEndQuery_PreCall>( plugin.funcs_pre["CmdEndQuery_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndQuery>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndQuery>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndQuery>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndQuery>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndQuery>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndQuery>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdResetQueryPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdResetQueryPool>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdResetQueryPool_PreCall func = reinterpret_cast<plugins::PFN_CmdResetQueryPool_PreCall>( plugin.funcs_pre["CmdResetQueryPool_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdResetQueryPool>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetQueryPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetQueryPool>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetQueryPool>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetQueryPool>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetQueryPool>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdWriteTimestamp_PreCall func = reinterpret_cast<plugins::PFN_CmdWriteTimestamp_PreCall>( plugin.funcs_pre["CmdWriteTimestamp_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyQueryPoolResults>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyQueryPoolResults>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyQueryPoolResults_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyQueryPoolResults_PreCall>( plugin.funcs_pre["CmdCopyQueryPoolResults_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyQueryPoolResults>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyQueryPoolResults>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyQueryPoolResults>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyQueryPoolResults>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyQueryPoolResults>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyQueryPoolResults>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdPushConstants>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdPushConstants>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdPushConstants_PreCall func = reinterpret_cast<plugins::PFN_CmdPushConstants_PreCall>( plugin.funcs_pre["CmdPushConstants_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdPushConstants>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdPushConstants>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPushConstants>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPushConstants>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPushConstants>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPushConstants>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBeginRenderPass_PreCall func = reinterpret_cast<plugins::PFN_CmdBeginRenderPass_PreCall>( plugin.funcs_pre["CmdBeginRenderPass_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdNextSubpass>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdNextSubpass>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdNextSubpass_PreCall func = reinterpret_cast<plugins::PFN_CmdNextSubpass_PreCall>( plugin.funcs_pre["CmdNextSubpass_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdNextSubpass>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdNextSubpass>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdNextSubpass>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdNextSubpass>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdNextSubpass>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdNextSubpass>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdEndRenderPass_PreCall func = reinterpret_cast<plugins::PFN_CmdEndRenderPass_PreCall>( plugin.funcs_pre["CmdEndRenderPass_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdExecuteCommands>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdExecuteCommands>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdExecuteCommands_PreCall func = reinterpret_cast<plugins::PFN_CmdExecuteCommands_PreCall>( plugin.funcs_pre["CmdExecuteCommands_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdExecuteCommands>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdExecuteCommands>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdExecuteCommands>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdExecuteCommands>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdExecuteCommands>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdExecuteCommands>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkEnumerateInstanceVersion>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkEnumerateInstanceVersion>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_EnumerateInstanceVersion_PreCall func = reinterpret_cast<plugins::PFN_EnumerateInstanceVersion_PreCall>( plugin.funcs_pre["EnumerateInstanceVersion_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkEnumerateInstanceVersion>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateInstanceVersion>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateInstanceVersion>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateInstanceVersion>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateInstanceVersion>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumerateInstanceVersion>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkBindBufferMemory2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkBindBufferMemory2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_BindBufferMemory2_PreCall func = reinterpret_cast<plugins::PFN_BindBufferMemory2_PreCall>( plugin.funcs_pre["BindBufferMemory2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkBindBufferMemory2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkBindBufferMemory2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindBufferMemory2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindBufferMemory2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindBufferMemory2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindBufferMemory2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkBindImageMemory2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkBindImageMemory2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_BindImageMemory2_PreCall func = reinterpret_cast<plugins::PFN_BindImageMemory2_PreCall>( plugin.funcs_pre["BindImageMemory2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkBindImageMemory2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkBindImageMemory2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindImageMemory2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindImageMemory2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindImageMemory2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindImageMemory2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPeerMemoryFeatures>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPeerMemoryFeatures>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceGroupPeerMemoryFeatures_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceGroupPeerMemoryFeatures_PreCall>( plugin.funcs_pre["GetDeviceGroupPeerMemoryFeatures_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPeerMemoryFeatures>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPeerMemoryFeatures>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPeerMemoryFeatures>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPeerMemoryFeatures>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPeerMemoryFeatures>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPeerMemoryFeatures>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDeviceMask>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDeviceMask>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDeviceMask_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDeviceMask_PreCall>( plugin.funcs_pre["CmdSetDeviceMask_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDeviceMask>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDeviceMask>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDeviceMask>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDeviceMask>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDeviceMask>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDeviceMask>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDispatchBase>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDispatchBase>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDispatchBase_PreCall func = reinterpret_cast<plugins::PFN_CmdDispatchBase_PreCall>( plugin.funcs_pre["CmdDispatchBase_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDispatchBase>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatchBase>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatchBase>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatchBase>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatchBase>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatchBase>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceGroups>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceGroups>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_EnumeratePhysicalDeviceGroups_PreCall func = reinterpret_cast<plugins::PFN_EnumeratePhysicalDeviceGroups_PreCall>( plugin.funcs_pre["EnumeratePhysicalDeviceGroups_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceGroups>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceGroups>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceGroups>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceGroups>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceGroups>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceGroups>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetImageMemoryRequirements2_PreCall func = reinterpret_cast<plugins::PFN_GetImageMemoryRequirements2_PreCall>( plugin.funcs_pre["GetImageMemoryRequirements2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetBufferMemoryRequirements2_PreCall func = reinterpret_cast<plugins::PFN_GetBufferMemoryRequirements2_PreCall>( plugin.funcs_pre["GetBufferMemoryRequirements2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetImageSparseMemoryRequirements2_PreCall func = reinterpret_cast<plugins::PFN_GetImageSparseMemoryRequirements2_PreCall>( plugin.funcs_pre["GetImageSparseMemoryRequirements2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements2>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements2>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceFeatures2_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceFeatures2_PreCall>( plugin.funcs_pre["GetPhysicalDeviceFeatures2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceProperties2_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceProperties2_PreCall>( plugin.funcs_pre["GetPhysicalDeviceProperties2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceFormatProperties2_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceFormatProperties2_PreCall>( plugin.funcs_pre["GetPhysicalDeviceFormatProperties2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties2>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties2>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceImageFormatProperties2_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceImageFormatProperties2_PreCall>( plugin.funcs_pre["GetPhysicalDeviceImageFormatProperties2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties2>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceQueueFamilyProperties2_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceQueueFamilyProperties2_PreCall>( plugin.funcs_pre["GetPhysicalDeviceQueueFamilyProperties2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties2>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties2>::Dispatch(manager,  args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties2>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceMemoryProperties2_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceMemoryProperties2_PreCall>( plugin.funcs_pre["GetPhysicalDeviceMemoryProperties2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties2>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties2>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceSparseImageFormatProperties2_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceSparseImageFormatProperties2_PreCall>( plugin.funcs_pre["GetPhysicalDeviceSparseImageFormatProperties2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkTrimCommandPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkTrimCommandPool>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_TrimCommandPool_PreCall func = reinterpret_cast<plugins::PFN_TrimCommandPool_PreCall>( plugin.funcs_pre["TrimCommandPool_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkTrimCommandPool>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkTrimCommandPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkTrimCommandPool>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkTrimCommandPool>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkTrimCommandPool>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkTrimCommandPool>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceQueue2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceQueue2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceQueue2_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceQueue2_PreCall>( plugin.funcs_pre["GetDeviceQueue2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceQueue2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceQueue2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceQueue2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceQueue2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceQueue2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceQueue2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateSamplerYcbcrConversion>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateSamplerYcbcrConversion>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateSamplerYcbcrConversion_PreCall func = reinterpret_cast<plugins::PFN_CreateSamplerYcbcrConversion_PreCall>( plugin.funcs_pre["CreateSamplerYcbcrConversion_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateSamplerYcbcrConversion>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateSamplerYcbcrConversion>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSamplerYcbcrConversion>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSamplerYcbcrConversion>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSamplerYcbcrConversion>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSamplerYcbcrConversion>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroySamplerYcbcrConversion>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroySamplerYcbcrConversion>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroySamplerYcbcrConversion_PreCall func = reinterpret_cast<plugins::PFN_DestroySamplerYcbcrConversion_PreCall>( plugin.funcs_pre["DestroySamplerYcbcrConversion_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroySamplerYcbcrConversion>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroySamplerYcbcrConversion>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySamplerYcbcrConversion>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySamplerYcbcrConversion>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySamplerYcbcrConversion>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySamplerYcbcrConversion>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateDescriptorUpdateTemplate>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDescriptorUpdateTemplate>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateDescriptorUpdateTemplate_PreCall func = reinterpret_cast<plugins::PFN_CreateDescriptorUpdateTemplate_PreCall>( plugin.funcs_pre["CreateDescriptorUpdateTemplate_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDescriptorUpdateTemplate>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorUpdateTemplate>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorUpdateTemplate>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorUpdateTemplate>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorUpdateTemplate>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorUpdateTemplate>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDescriptorUpdateTemplate>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDescriptorUpdateTemplate>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyDescriptorUpdateTemplate_PreCall func = reinterpret_cast<plugins::PFN_DestroyDescriptorUpdateTemplate_PreCall>( plugin.funcs_pre["DestroyDescriptorUpdateTemplate_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDescriptorUpdateTemplate>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorUpdateTemplate>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorUpdateTemplate>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorUpdateTemplate>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorUpdateTemplate>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorUpdateTemplate>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSetWithTemplate>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSetWithTemplate>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_UpdateDescriptorSetWithTemplate_PreCall func = reinterpret_cast<plugins::PFN_UpdateDescriptorSetWithTemplate_PreCall>( plugin.funcs_pre["UpdateDescriptorSetWithTemplate_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSetWithTemplate>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSetWithTemplate>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSetWithTemplate>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSetWithTemplate>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSetWithTemplate>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSetWithTemplate>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalBufferProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalBufferProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceExternalBufferProperties_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceExternalBufferProperties_PreCall>( plugin.funcs_pre["GetPhysicalDeviceExternalBufferProperties_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalBufferProperties>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalBufferProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalBufferProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalBufferProperties>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalBufferProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalBufferProperties>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalFenceProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalFenceProperties>::Dispatch(manager,  args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceExternalFenceProperties_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceExternalFenceProperties_PreCall>( plugin.funcs_pre["GetPhysicalDeviceExternalFenceProperties_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalFenceProperties>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalFenceProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalFenceProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalFenceProperties>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalFenceProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalFenceProperties>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalSemaphoreProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalSemaphoreProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceExternalSemaphoreProperties_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceExternalSemaphoreProperties_PreCall>( plugin.funcs_pre["GetPhysicalDeviceExternalSemaphoreProperties_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalSemaphoreProperties>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalSemaphoreProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalSemaphoreProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalSemaphoreProperties>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalSemaphoreProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalSemaphoreProperties>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutSupport>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutSupport>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDescriptorSetLayoutSupport_PreCall func = reinterpret_cast<plugins::PFN_GetDescriptorSetLayoutSupport_PreCall>( plugin.funcs_pre["GetDescriptorSetLayoutSupport_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutSupport>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutSupport>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutSupport>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutSupport>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutSupport>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutSupport>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroySurfaceKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroySurfaceKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroySurfaceKHR_PreCall func = reinterpret_cast<plugins::PFN_DestroySurfaceKHR_PreCall>( plugin.funcs_pre["DestroySurfaceKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroySurfaceKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroySurfaceKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySurfaceKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySurfaceKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySurfaceKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySurfaceKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceSupportKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceSupportKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceSurfaceSupportKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceSurfaceSupportKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceSurfaceSupportKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceSupportKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceSupportKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceSupportKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceSupportKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceSupportKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceSupportKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilitiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilitiesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceSurfaceCapabilitiesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceSurfaceCapabilitiesKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceSurfaceCapabilitiesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilitiesKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilitiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilitiesKHR>::Dispatch(manager,  args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilitiesKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilitiesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilitiesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceFormatsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceFormatsKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceSurfaceFormatsKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceSurfaceFormatsKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceSurfaceFormatsKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceFormatsKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceFormatsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceFormatsKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceFormatsKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceFormatsKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceFormatsKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfacePresentModesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfacePresentModesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceSurfacePresentModesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceSurfacePresentModesKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceSurfacePresentModesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfacePresentModesKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfacePresentModesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfacePresentModesKHR>::Dispatch(manager,  args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfacePresentModesKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfacePresentModesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfacePresentModesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateSwapchainKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateSwapchainKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateSwapchainKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateSwapchainKHR_PreCall>( plugin.funcs_pre["CreateSwapchainKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateSwapchainKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateSwapchainKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSwapchainKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSwapchainKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSwapchainKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSwapchainKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroySwapchainKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroySwapchainKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroySwapchainKHR_PreCall func = reinterpret_cast<plugins::PFN_DestroySwapchainKHR_PreCall>( plugin.funcs_pre["DestroySwapchainKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroySwapchainKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroySwapchainKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySwapchainKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySwapchainKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySwapchainKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySwapchainKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetSwapchainImagesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetSwapchainImagesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetSwapchainImagesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetSwapchainImagesKHR_PreCall>( plugin.funcs_pre["GetSwapchainImagesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetSwapchainImagesKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetSwapchainImagesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetSwapchainImagesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetSwapchainImagesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetSwapchainImagesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetSwapchainImagesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkAcquireNextImageKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkAcquireNextImageKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_AcquireNextImageKHR_PreCall func = reinterpret_cast<plugins::PFN_AcquireNextImageKHR_PreCall>( plugin.funcs_pre["AcquireNextImageKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkAcquireNextImageKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkAcquireNextImageKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireNextImageKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireNextImageKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireNextImageKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireNextImageKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkQueuePresentKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkQueuePresentKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_QueuePresentKHR_PreCall func = reinterpret_cast<plugins::PFN_QueuePresentKHR_PreCall>( plugin.funcs_pre["QueuePresentKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkQueuePresentKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkQueuePresentKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueuePresentKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueuePresentKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueuePresentKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueuePresentKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPresentCapabilitiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPresentCapabilitiesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceGroupPresentCapabilitiesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceGroupPresentCapabilitiesKHR_PreCall>( plugin.funcs_pre["GetDeviceGroupPresentCapabilitiesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPresentCapabilitiesKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPresentCapabilitiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPresentCapabilitiesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPresentCapabilitiesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPresentCapabilitiesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPresentCapabilitiesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceGroupSurfacePresentModesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceGroupSurfacePresentModesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceGroupSurfacePresentModesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceGroupSurfacePresentModesKHR_PreCall>( plugin.funcs_pre["GetDeviceGroupSurfacePresentModesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceGroupSurfacePresentModesKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupSurfacePresentModesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupSurfacePresentModesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupSurfacePresentModesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupSurfacePresentModesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupSurfacePresentModesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDevicePresentRectanglesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDevicePresentRectanglesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDevicePresentRectanglesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDevicePresentRectanglesKHR_PreCall>( plugin.funcs_pre["GetPhysicalDevicePresentRectanglesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDevicePresentRectanglesKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDevicePresentRectanglesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDevicePresentRectanglesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDevicePresentRectanglesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDevicePresentRectanglesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDevicePresentRectanglesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkAcquireNextImage2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkAcquireNextImage2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_AcquireNextImage2KHR_PreCall func = reinterpret_cast<plugins::PFN_AcquireNextImage2KHR_PreCall>( plugin.funcs_pre["AcquireNextImage2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkAcquireNextImage2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkAcquireNextImage2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireNextImage2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireNextImage2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireNextImage2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireNextImage2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPropertiesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceDisplayPropertiesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceDisplayPropertiesKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceDisplayPropertiesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPropertiesKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPropertiesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPropertiesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPropertiesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPropertiesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPlanePropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPlanePropertiesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceDisplayPlanePropertiesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceDisplayPlanePropertiesKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceDisplayPlanePropertiesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPlanePropertiesKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPlanePropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPlanePropertiesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPlanePropertiesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPlanePropertiesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPlanePropertiesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneSupportedDisplaysKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneSupportedDisplaysKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDisplayPlaneSupportedDisplaysKHR_PreCall func = reinterpret_cast<plugins::PFN_GetDisplayPlaneSupportedDisplaysKHR_PreCall>( plugin.funcs_pre["GetDisplayPlaneSupportedDisplaysKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneSupportedDisplaysKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneSupportedDisplaysKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneSupportedDisplaysKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneSupportedDisplaysKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneSupportedDisplaysKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneSupportedDisplaysKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDisplayModePropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDisplayModePropertiesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDisplayModePropertiesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetDisplayModePropertiesKHR_PreCall>( plugin.funcs_pre["GetDisplayModePropertiesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDisplayModePropertiesKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayModePropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayModePropertiesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayModePropertiesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayModePropertiesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayModePropertiesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateDisplayModeKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDisplayModeKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateDisplayModeKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateDisplayModeKHR_PreCall>( plugin.funcs_pre["CreateDisplayModeKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDisplayModeKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateDisplayModeKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDisplayModeKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDisplayModeKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDisplayModeKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDisplayModeKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneCapabilitiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneCapabilitiesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDisplayPlaneCapabilitiesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetDisplayPlaneCapabilitiesKHR_PreCall>( plugin.funcs_pre["GetDisplayPlaneCapabilitiesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneCapabilitiesKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneCapabilitiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneCapabilitiesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneCapabilitiesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneCapabilitiesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneCapabilitiesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateDisplayPlaneSurfaceKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDisplayPlaneSurfaceKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateDisplayPlaneSurfaceKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateDisplayPlaneSurfaceKHR_PreCall>( plugin.funcs_pre["CreateDisplayPlaneSurfaceKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDisplayPlaneSurfaceKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateDisplayPlaneSurfaceKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDisplayPlaneSurfaceKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDisplayPlaneSurfaceKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDisplayPlaneSurfaceKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDisplayPlaneSurfaceKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateSharedSwapchainsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateSharedSwapchainsKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateSharedSwapchainsKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateSharedSwapchainsKHR_PreCall>( plugin.funcs_pre["CreateSharedSwapchainsKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateSharedSwapchainsKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateSharedSwapchainsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSharedSwapchainsKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSharedSwapchainsKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSharedSwapchainsKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSharedSwapchainsKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateXlibSurfaceKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateXlibSurfaceKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateXlibSurfaceKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateXlibSurfaceKHR_PreCall>( plugin.funcs_pre["CreateXlibSurfaceKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateXlibSurfaceKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateXlibSurfaceKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateXlibSurfaceKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateXlibSurfaceKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateXlibSurfaceKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateXlibSurfaceKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceXlibPresentationSupportKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceXlibPresentationSupportKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceXlibPresentationSupportKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceXlibPresentationSupportKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceXlibPresentationSupportKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceXlibPresentationSupportKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceXlibPresentationSupportKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceXlibPresentationSupportKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceXlibPresentationSupportKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceXlibPresentationSupportKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceXlibPresentationSupportKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateXcbSurfaceKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateXcbSurfaceKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateXcbSurfaceKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateXcbSurfaceKHR_PreCall>( plugin.funcs_pre["CreateXcbSurfaceKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateXcbSurfaceKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateXcbSurfaceKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateXcbSurfaceKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateXcbSurfaceKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateXcbSurfaceKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateXcbSurfaceKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceXcbPresentationSupportKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceXcbPresentationSupportKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceXcbPresentationSupportKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceXcbPresentationSupportKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceXcbPresentationSupportKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceXcbPresentationSupportKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceXcbPresentationSupportKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceXcbPresentationSupportKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceXcbPresentationSupportKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceXcbPresentationSupportKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceXcbPresentationSupportKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateWaylandSurfaceKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateWaylandSurfaceKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateWaylandSurfaceKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateWaylandSurfaceKHR_PreCall>( plugin.funcs_pre["CreateWaylandSurfaceKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateWaylandSurfaceKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateWaylandSurfaceKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateWaylandSurfaceKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateWaylandSurfaceKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateWaylandSurfaceKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateWaylandSurfaceKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceWaylandPresentationSupportKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceWaylandPresentationSupportKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceWaylandPresentationSupportKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceWaylandPresentationSupportKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceWaylandPresentationSupportKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceWaylandPresentationSupportKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceWaylandPresentationSupportKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceWaylandPresentationSupportKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceWaylandPresentationSupportKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceWaylandPresentationSupportKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceWaylandPresentationSupportKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateMirSurfaceKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateMirSurfaceKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_CreateMirSurfaceKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateMirSurfaceKHR_PreCall>( plugin.funcs_pre["CreateMirSurfaceKHR_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateMirSurfaceKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateMirSurfaceKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateMirSurfaceKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateMirSurfaceKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateMirSurfaceKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateMirSurfaceKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMirPresentationSupportKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMirPresentationSupportKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_GetPhysicalDeviceMirPresentationSupportKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceMirPresentationSupportKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceMirPresentationSupportKHR_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMirPresentationSupportKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMirPresentationSupportKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMirPresentationSupportKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMirPresentationSupportKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMirPresentationSupportKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMirPresentationSupportKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateAndroidSurfaceKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateAndroidSurfaceKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateAndroidSurfaceKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateAndroidSurfaceKHR_PreCall>( plugin.funcs_pre["CreateAndroidSurfaceKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateAndroidSurfaceKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateAndroidSurfaceKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateAndroidSurfaceKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateAndroidSurfaceKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateAndroidSurfaceKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateAndroidSurfaceKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateWin32SurfaceKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateWin32SurfaceKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateWin32SurfaceKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateWin32SurfaceKHR_PreCall>( plugin.funcs_pre["CreateWin32SurfaceKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateWin32SurfaceKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateWin32SurfaceKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateWin32SurfaceKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateWin32SurfaceKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateWin32SurfaceKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateWin32SurfaceKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceWin32PresentationSupportKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceWin32PresentationSupportKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceWin32PresentationSupportKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceWin32PresentationSupportKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceWin32PresentationSupportKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceWin32PresentationSupportKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceWin32PresentationSupportKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceWin32PresentationSupportKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceWin32PresentationSupportKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceWin32PresentationSupportKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceWin32PresentationSupportKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceFeatures2KHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceFeatures2KHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceFeatures2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFeatures2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceProperties2KHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceProperties2KHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceProperties2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceProperties2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceFormatProperties2KHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceFormatProperties2KHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceFormatProperties2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFormatProperties2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceImageFormatProperties2KHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceImageFormatProperties2KHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceImageFormatProperties2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties2KHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceImageFormatProperties2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceQueueFamilyProperties2KHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceQueueFamilyProperties2KHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceQueueFamilyProperties2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyProperties2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceMemoryProperties2KHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceMemoryProperties2KHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceMemoryProperties2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMemoryProperties2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceSparseImageFormatProperties2KHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceSparseImageFormatProperties2KHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceSparseImageFormatProperties2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSparseImageFormatProperties2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPeerMemoryFeaturesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPeerMemoryFeaturesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceGroupPeerMemoryFeaturesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceGroupPeerMemoryFeaturesKHR_PreCall>( plugin.funcs_pre["GetDeviceGroupPeerMemoryFeaturesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPeerMemoryFeaturesKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPeerMemoryFeaturesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPeerMemoryFeaturesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPeerMemoryFeaturesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPeerMemoryFeaturesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupPeerMemoryFeaturesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDeviceMaskKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDeviceMaskKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDeviceMaskKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDeviceMaskKHR_PreCall>( plugin.funcs_pre["CmdSetDeviceMaskKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDeviceMaskKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDeviceMaskKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDeviceMaskKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDeviceMaskKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDeviceMaskKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDeviceMaskKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDispatchBaseKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDispatchBaseKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDispatchBaseKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdDispatchBaseKHR_PreCall>( plugin.funcs_pre["CmdDispatchBaseKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDispatchBaseKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatchBaseKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatchBaseKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatchBaseKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatchBaseKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDispatchBaseKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkTrimCommandPoolKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkTrimCommandPoolKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_TrimCommandPoolKHR_PreCall func = reinterpret_cast<plugins::PFN_TrimCommandPoolKHR_PreCall>( plugin.funcs_pre["TrimCommandPoolKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkTrimCommandPoolKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkTrimCommandPoolKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkTrimCommandPoolKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkTrimCommandPoolKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkTrimCommandPoolKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkTrimCommandPoolKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceGroupsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceGroupsKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_EnumeratePhysicalDeviceGroupsKHR_PreCall func = reinterpret_cast<plugins::PFN_EnumeratePhysicalDeviceGroupsKHR_PreCall>( plugin.funcs_pre["EnumeratePhysicalDeviceGroupsKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceGroupsKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceGroupsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceGroupsKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceGroupsKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceGroupsKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceGroupsKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalBufferPropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalBufferProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceExternalBufferPropertiesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceExternalBufferPropertiesKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceExternalBufferPropertiesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalBufferPropertiesKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalBufferPropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalBufferProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalBufferPropertiesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalBufferProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalBufferPropertiesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandleKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandleKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetMemoryWin32HandleKHR_PreCall func = reinterpret_cast<plugins::PFN_GetMemoryWin32HandleKHR_PreCall>( plugin.funcs_pre["GetMemoryWin32HandleKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandleKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandleKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandleKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandleKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandleKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandleKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandlePropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandlePropertiesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetMemoryWin32HandlePropertiesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetMemoryWin32HandlePropertiesKHR_PreCall>( plugin.funcs_pre["GetMemoryWin32HandlePropertiesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandlePropertiesKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandlePropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandlePropertiesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandlePropertiesKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandlePropertiesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandlePropertiesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryFdKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryFdKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetMemoryFdKHR_PreCall func = reinterpret_cast<plugins::PFN_GetMemoryFdKHR_PreCall>( plugin.funcs_pre["GetMemoryFdKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryFdKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryFdKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryFdKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryFdKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryFdKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryFdKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryFdPropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryFdPropertiesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetMemoryFdPropertiesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetMemoryFdPropertiesKHR_PreCall>( plugin.funcs_pre["GetMemoryFdPropertiesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryFdPropertiesKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryFdPropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryFdPropertiesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryFdPropertiesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryFdPropertiesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryFdPropertiesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalSemaphoreProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceExternalSemaphorePropertiesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceExternalSemaphorePropertiesKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceExternalSemaphorePropertiesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalSemaphoreProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalSemaphoreProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkImportSemaphoreWin32HandleKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkImportSemaphoreWin32HandleKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ImportSemaphoreWin32HandleKHR_PreCall func = reinterpret_cast<plugins::PFN_ImportSemaphoreWin32HandleKHR_PreCall>( plugin.funcs_pre["ImportSemaphoreWin32HandleKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkImportSemaphoreWin32HandleKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkImportSemaphoreWin32HandleKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkImportSemaphoreWin32HandleKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkImportSemaphoreWin32HandleKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkImportSemaphoreWin32HandleKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkImportSemaphoreWin32HandleKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetSemaphoreWin32HandleKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetSemaphoreWin32HandleKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetSemaphoreWin32HandleKHR_PreCall func = reinterpret_cast<plugins::PFN_GetSemaphoreWin32HandleKHR_PreCall>( plugin.funcs_pre["GetSemaphoreWin32HandleKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetSemaphoreWin32HandleKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreWin32HandleKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreWin32HandleKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreWin32HandleKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreWin32HandleKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreWin32HandleKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkImportSemaphoreFdKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkImportSemaphoreFdKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ImportSemaphoreFdKHR_PreCall func = reinterpret_cast<plugins::PFN_ImportSemaphoreFdKHR_PreCall>( plugin.funcs_pre["ImportSemaphoreFdKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkImportSemaphoreFdKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkImportSemaphoreFdKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkImportSemaphoreFdKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkImportSemaphoreFdKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkImportSemaphoreFdKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkImportSemaphoreFdKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetSemaphoreFdKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetSemaphoreFdKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetSemaphoreFdKHR_PreCall func = reinterpret_cast<plugins::PFN_GetSemaphoreFdKHR_PreCall>( plugin.funcs_pre["GetSemaphoreFdKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetSemaphoreFdKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreFdKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreFdKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreFdKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreFdKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreFdKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdPushDescriptorSetKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdPushDescriptorSetKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdPushDescriptorSetKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdPushDescriptorSetKHR_PreCall>( plugin.funcs_pre["CmdPushDescriptorSetKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdPushDescriptorSetKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdPushDescriptorSetKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPushDescriptorSetKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPushDescriptorSetKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPushDescriptorSetKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPushDescriptorSetKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdPushDescriptorSetWithTemplateKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdPushDescriptorSetWithTemplateKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_CmdPushDescriptorSetWithTemplateKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdPushDescriptorSetWithTemplateKHR_PreCall>( plugin.funcs_pre["CmdPushDescriptorSetWithTemplateKHR_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdPushDescriptorSetWithTemplateKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdPushDescriptorSetWithTemplateKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPushDescriptorSetWithTemplateKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPushDescriptorSetWithTemplateKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPushDescriptorSetWithTemplateKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPushDescriptorSetWithTemplateKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateDescriptorUpdateTemplateKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDescriptorUpdateTemplateKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateDescriptorUpdateTemplateKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateDescriptorUpdateTemplateKHR_PreCall>( plugin.funcs_pre["CreateDescriptorUpdateTemplateKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDescriptorUpdateTemplateKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorUpdateTemplateKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorUpdateTemplateKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorUpdateTemplateKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorUpdateTemplateKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDescriptorUpdateTemplateKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDescriptorUpdateTemplateKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDescriptorUpdateTemplateKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyDescriptorUpdateTemplateKHR_PreCall func = reinterpret_cast<plugins::PFN_DestroyDescriptorUpdateTemplateKHR_PreCall>( plugin.funcs_pre["DestroyDescriptorUpdateTemplateKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDescriptorUpdateTemplateKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorUpdateTemplateKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorUpdateTemplateKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorUpdateTemplateKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorUpdateTemplateKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDescriptorUpdateTemplateKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSetWithTemplateKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSetWithTemplateKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_UpdateDescriptorSetWithTemplateKHR_PreCall func = reinterpret_cast<plugins::PFN_UpdateDescriptorSetWithTemplateKHR_PreCall>( plugin.funcs_pre["UpdateDescriptorSetWithTemplateKHR_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSetWithTemplateKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSetWithTemplateKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSetWithTemplateKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSetWithTemplateKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSetWithTemplateKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkUpdateDescriptorSetWithTemplateKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateRenderPass2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateRenderPass2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateRenderPass2KHR_PreCall func = reinterpret_cast<plugins::PFN_CreateRenderPass2KHR_PreCall>( plugin.funcs_pre["CreateRenderPass2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateRenderPass2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateRenderPass2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRenderPass2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRenderPass2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRenderPass2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRenderPass2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBeginRenderPass2KHR_PreCall func = reinterpret_cast<plugins::PFN_CmdBeginRenderPass2KHR_PreCall>( plugin.funcs_pre["CmdBeginRenderPass2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdNextSubpass2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdNextSubpass2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdNextSubpass2KHR_PreCall func = reinterpret_cast<plugins::PFN_CmdNextSubpass2KHR_PreCall>( plugin.funcs_pre["CmdNextSubpass2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdNextSubpass2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdNextSubpass2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdNextSubpass2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdNextSubpass2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdNextSubpass2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdNextSubpass2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdEndRenderPass2KHR_PreCall func = reinterpret_cast<plugins::PFN_CmdEndRenderPass2KHR_PreCall>( plugin.funcs_pre["CmdEndRenderPass2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetSwapchainStatusKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetSwapchainStatusKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetSwapchainStatusKHR_PreCall func = reinterpret_cast<plugins::PFN_GetSwapchainStatusKHR_PreCall>( plugin.funcs_pre["GetSwapchainStatusKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetSwapchainStatusKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetSwapchainStatusKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetSwapchainStatusKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetSwapchainStatusKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetSwapchainStatusKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetSwapchainStatusKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalFencePropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalFenceProperties>::Dispatch(manager,  args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceExternalFencePropertiesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceExternalFencePropertiesKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceExternalFencePropertiesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalFencePropertiesKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalFencePropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalFenceProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalFencePropertiesKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalFenceProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalFencePropertiesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkImportFenceWin32HandleKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkImportFenceWin32HandleKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ImportFenceWin32HandleKHR_PreCall func = reinterpret_cast<plugins::PFN_ImportFenceWin32HandleKHR_PreCall>( plugin.funcs_pre["ImportFenceWin32HandleKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkImportFenceWin32HandleKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkImportFenceWin32HandleKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkImportFenceWin32HandleKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkImportFenceWin32HandleKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkImportFenceWin32HandleKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkImportFenceWin32HandleKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetFenceWin32HandleKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetFenceWin32HandleKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetFenceWin32HandleKHR_PreCall func = reinterpret_cast<plugins::PFN_GetFenceWin32HandleKHR_PreCall>( plugin.funcs_pre["GetFenceWin32HandleKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetFenceWin32HandleKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetFenceWin32HandleKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetFenceWin32HandleKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetFenceWin32HandleKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetFenceWin32HandleKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetFenceWin32HandleKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkImportFenceFdKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkImportFenceFdKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ImportFenceFdKHR_PreCall func = reinterpret_cast<plugins::PFN_ImportFenceFdKHR_PreCall>( plugin.funcs_pre["ImportFenceFdKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkImportFenceFdKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkImportFenceFdKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkImportFenceFdKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkImportFenceFdKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkImportFenceFdKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkImportFenceFdKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetFenceFdKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetFenceFdKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetFenceFdKHR_PreCall func = reinterpret_cast<plugins::PFN_GetFenceFdKHR_PreCall>( plugin.funcs_pre["GetFenceFdKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetFenceFdKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetFenceFdKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetFenceFdKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetFenceFdKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetFenceFdKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetFenceFdKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilities2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilities2KHR>::Dispatch(manager,  args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceSurfaceCapabilities2KHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceSurfaceCapabilities2KHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceSurfaceCapabilities2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilities2KHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilities2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilities2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilities2KHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilities2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilities2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceFormats2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceFormats2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceSurfaceFormats2KHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceSurfaceFormats2KHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceSurfaceFormats2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceFormats2KHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceFormats2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceFormats2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceFormats2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceFormats2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceFormats2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayProperties2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceDisplayProperties2KHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceDisplayProperties2KHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceDisplayProperties2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayProperties2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayProperties2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayProperties2KHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayProperties2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayProperties2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPlaneProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPlanePropertiesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceDisplayPlaneProperties2KHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceDisplayPlaneProperties2KHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceDisplayPlaneProperties2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPlaneProperties2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPlaneProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPlanePropertiesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPlaneProperties2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPlanePropertiesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDisplayPlaneProperties2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDisplayModeProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDisplayModeProperties2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDisplayModeProperties2KHR_PreCall func = reinterpret_cast<plugins::PFN_GetDisplayModeProperties2KHR_PreCall>( plugin.funcs_pre["GetDisplayModeProperties2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDisplayModeProperties2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayModeProperties2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayModeProperties2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayModeProperties2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayModeProperties2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayModeProperties2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneCapabilities2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneCapabilities2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDisplayPlaneCapabilities2KHR_PreCall func = reinterpret_cast<plugins::PFN_GetDisplayPlaneCapabilities2KHR_PreCall>( plugin.funcs_pre["GetDisplayPlaneCapabilities2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneCapabilities2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneCapabilities2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneCapabilities2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneCapabilities2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneCapabilities2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDisplayPlaneCapabilities2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetImageMemoryRequirements2KHR_PreCall func = reinterpret_cast<plugins::PFN_GetImageMemoryRequirements2KHR_PreCall>( plugin.funcs_pre["GetImageMemoryRequirements2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageMemoryRequirements2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetBufferMemoryRequirements2KHR_PreCall func = reinterpret_cast<plugins::PFN_GetBufferMemoryRequirements2KHR_PreCall>( plugin.funcs_pre["GetBufferMemoryRequirements2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferMemoryRequirements2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetImageSparseMemoryRequirements2KHR_PreCall func = reinterpret_cast<plugins::PFN_GetImageSparseMemoryRequirements2KHR_PreCall>( plugin.funcs_pre["GetImageSparseMemoryRequirements2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSparseMemoryRequirements2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateSamplerYcbcrConversionKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateSamplerYcbcrConversionKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateSamplerYcbcrConversionKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateSamplerYcbcrConversionKHR_PreCall>( plugin.funcs_pre["CreateSamplerYcbcrConversionKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateSamplerYcbcrConversionKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateSamplerYcbcrConversionKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSamplerYcbcrConversionKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSamplerYcbcrConversionKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSamplerYcbcrConversionKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateSamplerYcbcrConversionKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroySamplerYcbcrConversionKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroySamplerYcbcrConversionKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroySamplerYcbcrConversionKHR_PreCall func = reinterpret_cast<plugins::PFN_DestroySamplerYcbcrConversionKHR_PreCall>( plugin.funcs_pre["DestroySamplerYcbcrConversionKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroySamplerYcbcrConversionKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroySamplerYcbcrConversionKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySamplerYcbcrConversionKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySamplerYcbcrConversionKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySamplerYcbcrConversionKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroySamplerYcbcrConversionKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkBindBufferMemory2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkBindBufferMemory2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_BindBufferMemory2KHR_PreCall func = reinterpret_cast<plugins::PFN_BindBufferMemory2KHR_PreCall>( plugin.funcs_pre["BindBufferMemory2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkBindBufferMemory2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkBindBufferMemory2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindBufferMemory2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindBufferMemory2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindBufferMemory2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindBufferMemory2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkBindImageMemory2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkBindImageMemory2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_BindImageMemory2KHR_PreCall func = reinterpret_cast<plugins::PFN_BindImageMemory2KHR_PreCall>( plugin.funcs_pre["BindImageMemory2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkBindImageMemory2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkBindImageMemory2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindImageMemory2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindImageMemory2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindImageMemory2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindImageMemory2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutSupportKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutSupportKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDescriptorSetLayoutSupportKHR_PreCall func = reinterpret_cast<plugins::PFN_GetDescriptorSetLayoutSupportKHR_PreCall>( plugin.funcs_pre["GetDescriptorSetLayoutSupportKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutSupportKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutSupportKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutSupportKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutSupportKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutSupportKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutSupportKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCountKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCountKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawIndirectCountKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawIndirectCountKHR_PreCall>( plugin.funcs_pre["CmdDrawIndirectCountKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCountKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCountKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCountKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCountKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCountKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCountKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCountKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCountKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawIndexedIndirectCountKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawIndexedIndirectCountKHR_PreCall>( plugin.funcs_pre["CmdDrawIndexedIndirectCountKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCountKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCountKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCountKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCountKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCountKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCountKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateDebugReportCallbackEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDebugReportCallbackEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateDebugReportCallbackEXT_PreCall func = reinterpret_cast<plugins::PFN_CreateDebugReportCallbackEXT_PreCall>( plugin.funcs_pre["CreateDebugReportCallbackEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDebugReportCallbackEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateDebugReportCallbackEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDebugReportCallbackEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDebugReportCallbackEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDebugReportCallbackEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDebugReportCallbackEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDebugReportCallbackEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDebugReportCallbackEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyDebugReportCallbackEXT_PreCall func = reinterpret_cast<plugins::PFN_DestroyDebugReportCallbackEXT_PreCall>( plugin.funcs_pre["DestroyDebugReportCallbackEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDebugReportCallbackEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDebugReportCallbackEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDebugReportCallbackEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDebugReportCallbackEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDebugReportCallbackEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDebugReportCallbackEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDebugReportMessageEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDebugReportMessageEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DebugReportMessageEXT_PreCall func = reinterpret_cast<plugins::PFN_DebugReportMessageEXT_PreCall>( plugin.funcs_pre["DebugReportMessageEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDebugReportMessageEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDebugReportMessageEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDebugReportMessageEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDebugReportMessageEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDebugReportMessageEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDebugReportMessageEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDebugMarkerSetObjectTagEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDebugMarkerSetObjectTagEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DebugMarkerSetObjectTagEXT_PreCall func = reinterpret_cast<plugins::PFN_DebugMarkerSetObjectTagEXT_PreCall>( plugin.funcs_pre["DebugMarkerSetObjectTagEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDebugMarkerSetObjectTagEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDebugMarkerSetObjectTagEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDebugMarkerSetObjectTagEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDebugMarkerSetObjectTagEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDebugMarkerSetObjectTagEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDebugMarkerSetObjectTagEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDebugMarkerSetObjectNameEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDebugMarkerSetObjectNameEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DebugMarkerSetObjectNameEXT_PreCall func = reinterpret_cast<plugins::PFN_DebugMarkerSetObjectNameEXT_PreCall>( plugin.funcs_pre["DebugMarkerSetObjectNameEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDebugMarkerSetObjectNameEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDebugMarkerSetObjectNameEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDebugMarkerSetObjectNameEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDebugMarkerSetObjectNameEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDebugMarkerSetObjectNameEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDebugMarkerSetObjectNameEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerBeginEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerBeginEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDebugMarkerBeginEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdDebugMarkerBeginEXT_PreCall>( plugin.funcs_pre["CmdDebugMarkerBeginEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerBeginEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerBeginEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerBeginEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerBeginEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerBeginEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerBeginEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerEndEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerEndEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDebugMarkerEndEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdDebugMarkerEndEXT_PreCall>( plugin.funcs_pre["CmdDebugMarkerEndEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerEndEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerEndEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerEndEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerEndEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerEndEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerEndEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerInsertEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerInsertEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDebugMarkerInsertEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdDebugMarkerInsertEXT_PreCall>( plugin.funcs_pre["CmdDebugMarkerInsertEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerInsertEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerInsertEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerInsertEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerInsertEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerInsertEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDebugMarkerInsertEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCountAMD>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCountAMD>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawIndirectCountAMD_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawIndirectCountAMD_PreCall>( plugin.funcs_pre["CmdDrawIndirectCountAMD_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCountAMD>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCountAMD>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCountAMD>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCountAMD>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCountAMD>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCountAMD>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCountAMD>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCountAMD>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawIndexedIndirectCountAMD_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawIndexedIndirectCountAMD_PreCall>( plugin.funcs_pre["CmdDrawIndexedIndirectCountAMD_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCountAMD>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCountAMD>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCountAMD>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCountAMD>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCountAMD>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCountAMD>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetShaderInfoAMD>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetShaderInfoAMD>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetShaderInfoAMD_PreCall func = reinterpret_cast<plugins::PFN_GetShaderInfoAMD_PreCall>( plugin.funcs_pre["GetShaderInfoAMD_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetShaderInfoAMD>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetShaderInfoAMD>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetShaderInfoAMD>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetShaderInfoAMD>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetShaderInfoAMD>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetShaderInfoAMD>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalImageFormatPropertiesNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalImageFormatPropertiesNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceExternalImageFormatPropertiesNV_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceExternalImageFormatPropertiesNV_PreCall>( plugin.funcs_pre["GetPhysicalDeviceExternalImageFormatPropertiesNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalImageFormatPropertiesNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalImageFormatPropertiesNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalImageFormatPropertiesNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalImageFormatPropertiesNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalImageFormatPropertiesNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceExternalImageFormatPropertiesNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandleNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandleNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetMemoryWin32HandleNV_PreCall func = reinterpret_cast<plugins::PFN_GetMemoryWin32HandleNV_PreCall>( plugin.funcs_pre["GetMemoryWin32HandleNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandleNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandleNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandleNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandleNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandleNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryWin32HandleNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateViSurfaceNN>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateViSurfaceNN>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateViSurfaceNN_PreCall func = reinterpret_cast<plugins::PFN_CreateViSurfaceNN_PreCall>( plugin.funcs_pre["CreateViSurfaceNN_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateViSurfaceNN>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateViSurfaceNN>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateViSurfaceNN>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateViSurfaceNN>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateViSurfaceNN>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateViSurfaceNN>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginConditionalRenderingEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginConditionalRenderingEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBeginConditionalRenderingEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdBeginConditionalRenderingEXT_PreCall>( plugin.funcs_pre["CmdBeginConditionalRenderingEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginConditionalRenderingEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginConditionalRenderingEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginConditionalRenderingEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginConditionalRenderingEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginConditionalRenderingEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginConditionalRenderingEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndConditionalRenderingEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndConditionalRenderingEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdEndConditionalRenderingEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdEndConditionalRenderingEXT_PreCall>( plugin.funcs_pre["CmdEndConditionalRenderingEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndConditionalRenderingEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndConditionalRenderingEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndConditionalRenderingEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndConditionalRenderingEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndConditionalRenderingEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndConditionalRenderingEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdProcessCommandsNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdProcessCommandsNVX>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_CmdProcessCommandsNVX_PreCall func = reinterpret_cast<plugins::PFN_CmdProcessCommandsNVX_PreCall>( plugin.funcs_pre["CmdProcessCommandsNVX_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdProcessCommandsNVX>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdProcessCommandsNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdProcessCommandsNVX>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdProcessCommandsNVX>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdProcessCommandsNVX>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdProcessCommandsNVX>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdReserveSpaceForCommandsNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdReserveSpaceForCommandsNVX>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_CmdReserveSpaceForCommandsNVX_PreCall func = reinterpret_cast<plugins::PFN_CmdReserveSpaceForCommandsNVX_PreCall>( plugin.funcs_pre["CmdReserveSpaceForCommandsNVX_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdReserveSpaceForCommandsNVX>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdReserveSpaceForCommandsNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdReserveSpaceForCommandsNVX>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdReserveSpaceForCommandsNVX>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdReserveSpaceForCommandsNVX>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdReserveSpaceForCommandsNVX>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateIndirectCommandsLayoutNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateIndirectCommandsLayoutNVX>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_CreateIndirectCommandsLayoutNVX_PreCall func = reinterpret_cast<plugins::PFN_CreateIndirectCommandsLayoutNVX_PreCall>( plugin.funcs_pre["CreateIndirectCommandsLayoutNVX_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateIndirectCommandsLayoutNVX>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateIndirectCommandsLayoutNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateIndirectCommandsLayoutNVX>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateIndirectCommandsLayoutNVX>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateIndirectCommandsLayoutNVX>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateIndirectCommandsLayoutNVX>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyIndirectCommandsLayoutNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyIndirectCommandsLayoutNVX>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_DestroyIndirectCommandsLayoutNVX_PreCall func = reinterpret_cast<plugins::PFN_DestroyIndirectCommandsLayoutNVX_PreCall>( plugin.funcs_pre["DestroyIndirectCommandsLayoutNVX_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyIndirectCommandsLayoutNVX>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyIndirectCommandsLayoutNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyIndirectCommandsLayoutNVX>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyIndirectCommandsLayoutNVX>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyIndirectCommandsLayoutNVX>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyIndirectCommandsLayoutNVX>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateObjectTableNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateObjectTableNVX>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_CreateObjectTableNVX_PreCall func = reinterpret_cast<plugins::PFN_CreateObjectTableNVX_PreCall>( plugin.funcs_pre["CreateObjectTableNVX_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateObjectTableNVX>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateObjectTableNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateObjectTableNVX>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateObjectTableNVX>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateObjectTableNVX>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateObjectTableNVX>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyObjectTableNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyObjectTableNVX>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_DestroyObjectTableNVX_PreCall func = reinterpret_cast<plugins::PFN_DestroyObjectTableNVX_PreCall>( plugin.funcs_pre["DestroyObjectTableNVX_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyObjectTableNVX>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyObjectTableNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyObjectTableNVX>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyObjectTableNVX>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyObjectTableNVX>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyObjectTableNVX>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkRegisterObjectsNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkRegisterObjectsNVX>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_RegisterObjectsNVX_PreCall func = reinterpret_cast<plugins::PFN_RegisterObjectsNVX_PreCall>( plugin.funcs_pre["RegisterObjectsNVX_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkRegisterObjectsNVX>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkRegisterObjectsNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkRegisterObjectsNVX>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkRegisterObjectsNVX>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkRegisterObjectsNVX>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkRegisterObjectsNVX>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkUnregisterObjectsNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkUnregisterObjectsNVX>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_UnregisterObjectsNVX_PreCall func = reinterpret_cast<plugins::PFN_UnregisterObjectsNVX_PreCall>( plugin.funcs_pre["UnregisterObjectsNVX_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkUnregisterObjectsNVX>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkUnregisterObjectsNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkUnregisterObjectsNVX>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkUnregisterObjectsNVX>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkUnregisterObjectsNVX>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkUnregisterObjectsNVX>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_GetPhysicalDeviceGeneratedCommandsPropertiesNVX_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceGeneratedCommandsPropertiesNVX_PreCall>( plugin.funcs_pre["GetPhysicalDeviceGeneratedCommandsPropertiesNVX_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportWScalingNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportWScalingNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetViewportWScalingNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetViewportWScalingNV_PreCall>( plugin.funcs_pre["CmdSetViewportWScalingNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportWScalingNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWScalingNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWScalingNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWScalingNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWScalingNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWScalingNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkReleaseDisplayEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkReleaseDisplayEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ReleaseDisplayEXT_PreCall func = reinterpret_cast<plugins::PFN_ReleaseDisplayEXT_PreCall>( plugin.funcs_pre["ReleaseDisplayEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkReleaseDisplayEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkReleaseDisplayEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkReleaseDisplayEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkReleaseDisplayEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkReleaseDisplayEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkReleaseDisplayEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkAcquireXlibDisplayEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkAcquireXlibDisplayEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_AcquireXlibDisplayEXT_PreCall func = reinterpret_cast<plugins::PFN_AcquireXlibDisplayEXT_PreCall>( plugin.funcs_pre["AcquireXlibDisplayEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkAcquireXlibDisplayEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkAcquireXlibDisplayEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireXlibDisplayEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireXlibDisplayEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireXlibDisplayEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireXlibDisplayEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetRandROutputDisplayEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetRandROutputDisplayEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetRandROutputDisplayEXT_PreCall func = reinterpret_cast<plugins::PFN_GetRandROutputDisplayEXT_PreCall>( plugin.funcs_pre["GetRandROutputDisplayEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetRandROutputDisplayEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetRandROutputDisplayEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetRandROutputDisplayEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetRandROutputDisplayEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetRandROutputDisplayEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetRandROutputDisplayEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilities2EXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilities2EXT>::Dispatch(manager,  args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceSurfaceCapabilities2EXT_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceSurfaceCapabilities2EXT_PreCall>( plugin.funcs_pre["GetPhysicalDeviceSurfaceCapabilities2EXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilities2EXT>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilities2EXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilities2EXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilities2EXT>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilities2EXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfaceCapabilities2EXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDisplayPowerControlEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDisplayPowerControlEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DisplayPowerControlEXT_PreCall func = reinterpret_cast<plugins::PFN_DisplayPowerControlEXT_PreCall>( plugin.funcs_pre["DisplayPowerControlEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDisplayPowerControlEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDisplayPowerControlEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDisplayPowerControlEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDisplayPowerControlEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDisplayPowerControlEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDisplayPowerControlEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkRegisterDeviceEventEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkRegisterDeviceEventEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_RegisterDeviceEventEXT_PreCall func = reinterpret_cast<plugins::PFN_RegisterDeviceEventEXT_PreCall>( plugin.funcs_pre["RegisterDeviceEventEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkRegisterDeviceEventEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkRegisterDeviceEventEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkRegisterDeviceEventEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkRegisterDeviceEventEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkRegisterDeviceEventEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkRegisterDeviceEventEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkRegisterDisplayEventEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkRegisterDisplayEventEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_RegisterDisplayEventEXT_PreCall func = reinterpret_cast<plugins::PFN_RegisterDisplayEventEXT_PreCall>( plugin.funcs_pre["RegisterDisplayEventEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkRegisterDisplayEventEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkRegisterDisplayEventEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkRegisterDisplayEventEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkRegisterDisplayEventEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkRegisterDisplayEventEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkRegisterDisplayEventEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetSwapchainCounterEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetSwapchainCounterEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetSwapchainCounterEXT_PreCall func = reinterpret_cast<plugins::PFN_GetSwapchainCounterEXT_PreCall>( plugin.funcs_pre["GetSwapchainCounterEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetSwapchainCounterEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetSwapchainCounterEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetSwapchainCounterEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetSwapchainCounterEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetSwapchainCounterEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetSwapchainCounterEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetRefreshCycleDurationGOOGLE>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetRefreshCycleDurationGOOGLE>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetRefreshCycleDurationGOOGLE_PreCall func = reinterpret_cast<plugins::PFN_GetRefreshCycleDurationGOOGLE_PreCall>( plugin.funcs_pre["GetRefreshCycleDurationGOOGLE_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetRefreshCycleDurationGOOGLE>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetRefreshCycleDurationGOOGLE>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetRefreshCycleDurationGOOGLE>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetRefreshCycleDurationGOOGLE>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetRefreshCycleDurationGOOGLE>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetRefreshCycleDurationGOOGLE>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPastPresentationTimingGOOGLE>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPastPresentationTimingGOOGLE>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPastPresentationTimingGOOGLE_PreCall func = reinterpret_cast<plugins::PFN_GetPastPresentationTimingGOOGLE_PreCall>( plugin.funcs_pre["GetPastPresentationTimingGOOGLE_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPastPresentationTimingGOOGLE>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPastPresentationTimingGOOGLE>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPastPresentationTimingGOOGLE>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPastPresentationTimingGOOGLE>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPastPresentationTimingGOOGLE>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPastPresentationTimingGOOGLE>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDiscardRectangleEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDiscardRectangleEXT_PreCall>( plugin.funcs_pre["CmdSetDiscardRectangleEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkSetHdrMetadataEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkSetHdrMetadataEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_SetHdrMetadataEXT_PreCall func = reinterpret_cast<plugins::PFN_SetHdrMetadataEXT_PreCall>( plugin.funcs_pre["SetHdrMetadataEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkSetHdrMetadataEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkSetHdrMetadataEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSetHdrMetadataEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSetHdrMetadataEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSetHdrMetadataEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSetHdrMetadataEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateIOSSurfaceMVK>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateIOSSurfaceMVK>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateIOSSurfaceMVK_PreCall func = reinterpret_cast<plugins::PFN_CreateIOSSurfaceMVK_PreCall>( plugin.funcs_pre["CreateIOSSurfaceMVK_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateIOSSurfaceMVK>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateIOSSurfaceMVK>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateIOSSurfaceMVK>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateIOSSurfaceMVK>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateIOSSurfaceMVK>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateIOSSurfaceMVK>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateMacOSSurfaceMVK>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateMacOSSurfaceMVK>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateMacOSSurfaceMVK_PreCall func = reinterpret_cast<plugins::PFN_CreateMacOSSurfaceMVK_PreCall>( plugin.funcs_pre["CreateMacOSSurfaceMVK_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateMacOSSurfaceMVK>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateMacOSSurfaceMVK>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateMacOSSurfaceMVK>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateMacOSSurfaceMVK>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateMacOSSurfaceMVK>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateMacOSSurfaceMVK>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkSetDebugUtilsObjectNameEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkSetDebugUtilsObjectNameEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_SetDebugUtilsObjectNameEXT_PreCall func = reinterpret_cast<plugins::PFN_SetDebugUtilsObjectNameEXT_PreCall>( plugin.funcs_pre["SetDebugUtilsObjectNameEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkSetDebugUtilsObjectNameEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkSetDebugUtilsObjectNameEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSetDebugUtilsObjectNameEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSetDebugUtilsObjectNameEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSetDebugUtilsObjectNameEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSetDebugUtilsObjectNameEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkSetDebugUtilsObjectTagEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkSetDebugUtilsObjectTagEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_SetDebugUtilsObjectTagEXT_PreCall func = reinterpret_cast<plugins::PFN_SetDebugUtilsObjectTagEXT_PreCall>( plugin.funcs_pre["SetDebugUtilsObjectTagEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkSetDebugUtilsObjectTagEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkSetDebugUtilsObjectTagEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSetDebugUtilsObjectTagEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSetDebugUtilsObjectTagEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSetDebugUtilsObjectTagEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSetDebugUtilsObjectTagEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkQueueBeginDebugUtilsLabelEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkQueueBeginDebugUtilsLabelEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_QueueBeginDebugUtilsLabelEXT_PreCall func = reinterpret_cast<plugins::PFN_QueueBeginDebugUtilsLabelEXT_PreCall>( plugin.funcs_pre["QueueBeginDebugUtilsLabelEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkQueueBeginDebugUtilsLabelEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkQueueBeginDebugUtilsLabelEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueBeginDebugUtilsLabelEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueBeginDebugUtilsLabelEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueBeginDebugUtilsLabelEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueBeginDebugUtilsLabelEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkQueueEndDebugUtilsLabelEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkQueueEndDebugUtilsLabelEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_QueueEndDebugUtilsLabelEXT_PreCall func = reinterpret_cast<plugins::PFN_QueueEndDebugUtilsLabelEXT_PreCall>( plugin.funcs_pre["QueueEndDebugUtilsLabelEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkQueueEndDebugUtilsLabelEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkQueueEndDebugUtilsLabelEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueEndDebugUtilsLabelEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueEndDebugUtilsLabelEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueEndDebugUtilsLabelEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueEndDebugUtilsLabelEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkQueueInsertDebugUtilsLabelEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkQueueInsertDebugUtilsLabelEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_QueueInsertDebugUtilsLabelEXT_PreCall func = reinterpret_cast<plugins::PFN_QueueInsertDebugUtilsLabelEXT_PreCall>( plugin.funcs_pre["QueueInsertDebugUtilsLabelEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkQueueInsertDebugUtilsLabelEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkQueueInsertDebugUtilsLabelEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueInsertDebugUtilsLabelEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueInsertDebugUtilsLabelEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueInsertDebugUtilsLabelEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueInsertDebugUtilsLabelEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginDebugUtilsLabelEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginDebugUtilsLabelEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBeginDebugUtilsLabelEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdBeginDebugUtilsLabelEXT_PreCall>( plugin.funcs_pre["CmdBeginDebugUtilsLabelEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginDebugUtilsLabelEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginDebugUtilsLabelEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginDebugUtilsLabelEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginDebugUtilsLabelEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginDebugUtilsLabelEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginDebugUtilsLabelEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndDebugUtilsLabelEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndDebugUtilsLabelEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdEndDebugUtilsLabelEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdEndDebugUtilsLabelEXT_PreCall>( plugin.funcs_pre["CmdEndDebugUtilsLabelEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndDebugUtilsLabelEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndDebugUtilsLabelEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndDebugUtilsLabelEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndDebugUtilsLabelEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndDebugUtilsLabelEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndDebugUtilsLabelEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdInsertDebugUtilsLabelEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdInsertDebugUtilsLabelEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdInsertDebugUtilsLabelEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdInsertDebugUtilsLabelEXT_PreCall>( plugin.funcs_pre["CmdInsertDebugUtilsLabelEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdInsertDebugUtilsLabelEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdInsertDebugUtilsLabelEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdInsertDebugUtilsLabelEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdInsertDebugUtilsLabelEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdInsertDebugUtilsLabelEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdInsertDebugUtilsLabelEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateDebugUtilsMessengerEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDebugUtilsMessengerEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateDebugUtilsMessengerEXT_PreCall func = reinterpret_cast<plugins::PFN_CreateDebugUtilsMessengerEXT_PreCall>( plugin.funcs_pre["CreateDebugUtilsMessengerEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDebugUtilsMessengerEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateDebugUtilsMessengerEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDebugUtilsMessengerEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDebugUtilsMessengerEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDebugUtilsMessengerEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDebugUtilsMessengerEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDebugUtilsMessengerEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDebugUtilsMessengerEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyDebugUtilsMessengerEXT_PreCall func = reinterpret_cast<plugins::PFN_DestroyDebugUtilsMessengerEXT_PreCall>( plugin.funcs_pre["DestroyDebugUtilsMessengerEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDebugUtilsMessengerEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDebugUtilsMessengerEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDebugUtilsMessengerEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDebugUtilsMessengerEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDebugUtilsMessengerEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDebugUtilsMessengerEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkSubmitDebugUtilsMessageEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkSubmitDebugUtilsMessageEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_SubmitDebugUtilsMessageEXT_PreCall func = reinterpret_cast<plugins::PFN_SubmitDebugUtilsMessageEXT_PreCall>( plugin.funcs_pre["SubmitDebugUtilsMessageEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkSubmitDebugUtilsMessageEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkSubmitDebugUtilsMessageEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSubmitDebugUtilsMessageEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSubmitDebugUtilsMessageEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSubmitDebugUtilsMessageEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSubmitDebugUtilsMessageEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetAndroidHardwareBufferPropertiesANDROID>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetAndroidHardwareBufferPropertiesANDROID>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetAndroidHardwareBufferPropertiesANDROID_PreCall func = reinterpret_cast<plugins::PFN_GetAndroidHardwareBufferPropertiesANDROID_PreCall>( plugin.funcs_pre["GetAndroidHardwareBufferPropertiesANDROID_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetAndroidHardwareBufferPropertiesANDROID>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetAndroidHardwareBufferPropertiesANDROID>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetAndroidHardwareBufferPropertiesANDROID>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetAndroidHardwareBufferPropertiesANDROID>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetAndroidHardwareBufferPropertiesANDROID>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetAndroidHardwareBufferPropertiesANDROID>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryAndroidHardwareBufferANDROID>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryAndroidHardwareBufferANDROID>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetMemoryAndroidHardwareBufferANDROID_PreCall func = reinterpret_cast<plugins::PFN_GetMemoryAndroidHardwareBufferANDROID_PreCall>( plugin.funcs_pre["GetMemoryAndroidHardwareBufferANDROID_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryAndroidHardwareBufferANDROID>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryAndroidHardwareBufferANDROID>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryAndroidHardwareBufferANDROID>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryAndroidHardwareBufferANDROID>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryAndroidHardwareBufferANDROID>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryAndroidHardwareBufferANDROID>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetSampleLocationsEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetSampleLocationsEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetSampleLocationsEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetSampleLocationsEXT_PreCall>( plugin.funcs_pre["CmdSetSampleLocationsEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetSampleLocationsEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetSampleLocationsEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetSampleLocationsEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetSampleLocationsEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetSampleLocationsEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetSampleLocationsEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMultisamplePropertiesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMultisamplePropertiesEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceMultisamplePropertiesEXT_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceMultisamplePropertiesEXT_PreCall>( plugin.funcs_pre["GetPhysicalDeviceMultisamplePropertiesEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMultisamplePropertiesEXT>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMultisamplePropertiesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMultisamplePropertiesEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMultisamplePropertiesEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMultisamplePropertiesEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceMultisamplePropertiesEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateValidationCacheEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateValidationCacheEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateValidationCacheEXT_PreCall func = reinterpret_cast<plugins::PFN_CreateValidationCacheEXT_PreCall>( plugin.funcs_pre["CreateValidationCacheEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateValidationCacheEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateValidationCacheEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateValidationCacheEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateValidationCacheEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateValidationCacheEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateValidationCacheEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyValidationCacheEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyValidationCacheEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyValidationCacheEXT_PreCall func = reinterpret_cast<plugins::PFN_DestroyValidationCacheEXT_PreCall>( plugin.funcs_pre["DestroyValidationCacheEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyValidationCacheEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyValidationCacheEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyValidationCacheEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyValidationCacheEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyValidationCacheEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyValidationCacheEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkMergeValidationCachesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkMergeValidationCachesEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_MergeValidationCachesEXT_PreCall func = reinterpret_cast<plugins::PFN_MergeValidationCachesEXT_PreCall>( plugin.funcs_pre["MergeValidationCachesEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkMergeValidationCachesEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkMergeValidationCachesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkMergeValidationCachesEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkMergeValidationCachesEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkMergeValidationCachesEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkMergeValidationCachesEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetValidationCacheDataEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetValidationCacheDataEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetValidationCacheDataEXT_PreCall func = reinterpret_cast<plugins::PFN_GetValidationCacheDataEXT_PreCall>( plugin.funcs_pre["GetValidationCacheDataEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetValidationCacheDataEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetValidationCacheDataEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetValidationCacheDataEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetValidationCacheDataEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetValidationCacheDataEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetValidationCacheDataEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryHostPointerPropertiesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryHostPointerPropertiesEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetMemoryHostPointerPropertiesEXT_PreCall func = reinterpret_cast<plugins::PFN_GetMemoryHostPointerPropertiesEXT_PreCall>( plugin.funcs_pre["GetMemoryHostPointerPropertiesEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryHostPointerPropertiesEXT>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryHostPointerPropertiesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryHostPointerPropertiesEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryHostPointerPropertiesEXT>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryHostPointerPropertiesEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryHostPointerPropertiesEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteBufferMarkerAMD>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteBufferMarkerAMD>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdWriteBufferMarkerAMD_PreCall func = reinterpret_cast<plugins::PFN_CmdWriteBufferMarkerAMD_PreCall>( plugin.funcs_pre["CmdWriteBufferMarkerAMD_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteBufferMarkerAMD>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteBufferMarkerAMD>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteBufferMarkerAMD>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteBufferMarkerAMD>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteBufferMarkerAMD>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteBufferMarkerAMD>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindShadingRateImageNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindShadingRateImageNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBindShadingRateImageNV_PreCall func = reinterpret_cast<plugins::PFN_CmdBindShadingRateImageNV_PreCall>( plugin.funcs_pre["CmdBindShadingRateImageNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindShadingRateImageNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindShadingRateImageNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindShadingRateImageNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindShadingRateImageNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindShadingRateImageNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindShadingRateImageNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportShadingRatePaletteNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportShadingRatePaletteNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetViewportShadingRatePaletteNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetViewportShadingRatePaletteNV_PreCall>( plugin.funcs_pre["CmdSetViewportShadingRatePaletteNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportShadingRatePaletteNV>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportShadingRatePaletteNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportShadingRatePaletteNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportShadingRatePaletteNV>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportShadingRatePaletteNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportShadingRatePaletteNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoarseSampleOrderNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoarseSampleOrderNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetCoarseSampleOrderNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetCoarseSampleOrderNV_PreCall>( plugin.funcs_pre["CmdSetCoarseSampleOrderNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoarseSampleOrderNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoarseSampleOrderNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoarseSampleOrderNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoarseSampleOrderNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoarseSampleOrderNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoarseSampleOrderNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetImageDrmFormatModifierPropertiesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageDrmFormatModifierPropertiesEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetImageDrmFormatModifierPropertiesEXT_PreCall func = reinterpret_cast<plugins::PFN_GetImageDrmFormatModifierPropertiesEXT_PreCall>( plugin.funcs_pre["GetImageDrmFormatModifierPropertiesEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageDrmFormatModifierPropertiesEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetImageDrmFormatModifierPropertiesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageDrmFormatModifierPropertiesEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageDrmFormatModifierPropertiesEXT>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageDrmFormatModifierPropertiesEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageDrmFormatModifierPropertiesEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateAccelerationStructureNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateAccelerationStructureNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateAccelerationStructureNV_PreCall func = reinterpret_cast<plugins::PFN_CreateAccelerationStructureNV_PreCall>( plugin.funcs_pre["CreateAccelerationStructureNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateAccelerationStructureNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateAccelerationStructureNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateAccelerationStructureNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateAccelerationStructureNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateAccelerationStructureNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateAccelerationStructureNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyAccelerationStructureNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyAccelerationStructureNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyAccelerationStructureNV_PreCall func = reinterpret_cast<plugins::PFN_DestroyAccelerationStructureNV_PreCall>( plugin.funcs_pre["DestroyAccelerationStructureNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyAccelerationStructureNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyAccelerationStructureNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyAccelerationStructureNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyAccelerationStructureNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyAccelerationStructureNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyAccelerationStructureNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureMemoryRequirementsNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureMemoryRequirementsNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetAccelerationStructureMemoryRequirementsNV_PreCall func = reinterpret_cast<plugins::PFN_GetAccelerationStructureMemoryRequirementsNV_PreCall>( plugin.funcs_pre["GetAccelerationStructureMemoryRequirementsNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureMemoryRequirementsNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureMemoryRequirementsNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureMemoryRequirementsNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureMemoryRequirementsNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureMemoryRequirementsNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureMemoryRequirementsNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkBindAccelerationStructureMemoryNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkBindAccelerationStructureMemoryNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_BindAccelerationStructureMemoryNV_PreCall func = reinterpret_cast<plugins::PFN_BindAccelerationStructureMemoryNV_PreCall>( plugin.funcs_pre["BindAccelerationStructureMemoryNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkBindAccelerationStructureMemoryNV>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkBindAccelerationStructureMemoryNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindAccelerationStructureMemoryNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindAccelerationStructureMemoryNV>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindAccelerationStructureMemoryNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindAccelerationStructureMemoryNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructureNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructureNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBuildAccelerationStructureNV_PreCall func = reinterpret_cast<plugins::PFN_CmdBuildAccelerationStructureNV_PreCall>( plugin.funcs_pre["CmdBuildAccelerationStructureNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructureNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructureNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructureNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructureNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructureNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructureNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyAccelerationStructureNV_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyAccelerationStructureNV_PreCall>( plugin.funcs_pre["CmdCopyAccelerationStructureNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdTraceRaysNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdTraceRaysNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdTraceRaysNV_PreCall func = reinterpret_cast<plugins::PFN_CmdTraceRaysNV_PreCall>( plugin.funcs_pre["CmdTraceRaysNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdTraceRaysNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateRayTracingPipelinesNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateRayTracingPipelinesNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateRayTracingPipelinesNV_PreCall func = reinterpret_cast<plugins::PFN_CreateRayTracingPipelinesNV_PreCall>( plugin.funcs_pre["CreateRayTracingPipelinesNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateRayTracingPipelinesNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateRayTracingPipelinesNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRayTracingPipelinesNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRayTracingPipelinesNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRayTracingPipelinesNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRayTracingPipelinesNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupHandlesNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupHandlesNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetRayTracingShaderGroupHandlesNV_PreCall func = reinterpret_cast<plugins::PFN_GetRayTracingShaderGroupHandlesNV_PreCall>( plugin.funcs_pre["GetRayTracingShaderGroupHandlesNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupHandlesNV>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupHandlesNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupHandlesNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupHandlesNV>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupHandlesNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupHandlesNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureHandleNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureHandleNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetAccelerationStructureHandleNV_PreCall func = reinterpret_cast<plugins::PFN_GetAccelerationStructureHandleNV_PreCall>( plugin.funcs_pre["GetAccelerationStructureHandleNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureHandleNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureHandleNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureHandleNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureHandleNV>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureHandleNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureHandleNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteAccelerationStructuresPropertiesNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteAccelerationStructuresPropertiesNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdWriteAccelerationStructuresPropertiesNV_PreCall func = reinterpret_cast<plugins::PFN_CmdWriteAccelerationStructuresPropertiesNV_PreCall>( plugin.funcs_pre["CmdWriteAccelerationStructuresPropertiesNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteAccelerationStructuresPropertiesNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteAccelerationStructuresPropertiesNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteAccelerationStructuresPropertiesNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteAccelerationStructuresPropertiesNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteAccelerationStructuresPropertiesNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteAccelerationStructuresPropertiesNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCompileDeferredNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCompileDeferredNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CompileDeferredNV_PreCall func = reinterpret_cast<plugins::PFN_CompileDeferredNV_PreCall>( plugin.funcs_pre["CompileDeferredNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCompileDeferredNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCompileDeferredNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCompileDeferredNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCompileDeferredNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCompileDeferredNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCompileDeferredNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawMeshTasksNV_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawMeshTasksNV_PreCall>( plugin.funcs_pre["CmdDrawMeshTasksNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawMeshTasksIndirectNV_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawMeshTasksIndirectNV_PreCall>( plugin.funcs_pre["CmdDrawMeshTasksIndirectNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectCountNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectCountNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawMeshTasksIndirectCountNV_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawMeshTasksIndirectCountNV_PreCall>( plugin.funcs_pre["CmdDrawMeshTasksIndirectCountNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectCountNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectCountNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectCountNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectCountNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectCountNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectCountNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetExclusiveScissorNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetExclusiveScissorNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetExclusiveScissorNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetExclusiveScissorNV_PreCall>( plugin.funcs_pre["CmdSetExclusiveScissorNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetExclusiveScissorNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetExclusiveScissorNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetExclusiveScissorNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetExclusiveScissorNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetExclusiveScissorNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetExclusiveScissorNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCheckpointNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCheckpointNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetCheckpointNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetCheckpointNV_PreCall>( plugin.funcs_pre["CmdSetCheckpointNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCheckpointNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCheckpointNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCheckpointNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCheckpointNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCheckpointNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCheckpointNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetQueueCheckpointDataNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetQueueCheckpointDataNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetQueueCheckpointDataNV_PreCall func = reinterpret_cast<plugins::PFN_GetQueueCheckpointDataNV_PreCall>( plugin.funcs_pre["GetQueueCheckpointDataNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetQueueCheckpointDataNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetQueueCheckpointDataNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetQueueCheckpointDataNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetQueueCheckpointDataNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetQueueCheckpointDataNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetQueueCheckpointDataNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateImagePipeSurfaceFUCHSIA>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateImagePipeSurfaceFUCHSIA>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateImagePipeSurfaceFUCHSIA_PreCall func = reinterpret_cast<plugins::PFN_CreateImagePipeSurfaceFUCHSIA_PreCall>( plugin.funcs_pre["CreateImagePipeSurfaceFUCHSIA_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateImagePipeSurfaceFUCHSIA>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateImagePipeSurfaceFUCHSIA>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateImagePipeSurfaceFUCHSIA>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateImagePipeSurfaceFUCHSIA>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateImagePipeSurfaceFUCHSIA>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateImagePipeSurfaceFUCHSIA>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindTransformFeedbackBuffersEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindTransformFeedbackBuffersEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBindTransformFeedbackBuffersEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdBindTransformFeedbackBuffersEXT_PreCall>( plugin.funcs_pre["CmdBindTransformFeedbackBuffersEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindTransformFeedbackBuffersEXT>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindTransformFeedbackBuffersEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindTransformFeedbackBuffersEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindTransformFeedbackBuffersEXT>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindTransformFeedbackBuffersEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindTransformFeedbackBuffersEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginTransformFeedbackEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginTransformFeedbackEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBeginTransformFeedbackEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdBeginTransformFeedbackEXT_PreCall>( plugin.funcs_pre["CmdBeginTransformFeedbackEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginTransformFeedbackEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginTransformFeedbackEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginTransformFeedbackEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginTransformFeedbackEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginTransformFeedbackEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginTransformFeedbackEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndTransformFeedbackEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndTransformFeedbackEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdEndTransformFeedbackEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdEndTransformFeedbackEXT_PreCall>( plugin.funcs_pre["CmdEndTransformFeedbackEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndTransformFeedbackEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndTransformFeedbackEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndTransformFeedbackEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndTransformFeedbackEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndTransformFeedbackEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndTransformFeedbackEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginQueryIndexedEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginQueryIndexedEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBeginQueryIndexedEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdBeginQueryIndexedEXT_PreCall>( plugin.funcs_pre["CmdBeginQueryIndexedEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginQueryIndexedEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginQueryIndexedEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginQueryIndexedEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginQueryIndexedEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginQueryIndexedEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginQueryIndexedEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndQueryIndexedEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndQueryIndexedEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdEndQueryIndexedEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdEndQueryIndexedEXT_PreCall>( plugin.funcs_pre["CmdEndQueryIndexedEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndQueryIndexedEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndQueryIndexedEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndQueryIndexedEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndQueryIndexedEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndQueryIndexedEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndQueryIndexedEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectByteCountEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectByteCountEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawIndirectByteCountEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawIndirectByteCountEXT_PreCall>( plugin.funcs_pre["CmdDrawIndirectByteCountEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectByteCountEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectByteCountEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectByteCountEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectByteCountEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectByteCountEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectByteCountEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceCalibrateableTimeDomainsEXT_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceCalibrateableTimeDomainsEXT_PreCall>( plugin.funcs_pre["GetPhysicalDeviceCalibrateableTimeDomainsEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetCalibratedTimestampsEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetCalibratedTimestampsEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetCalibratedTimestampsEXT_PreCall func = reinterpret_cast<plugins::PFN_GetCalibratedTimestampsEXT_PreCall>( plugin.funcs_pre["GetCalibratedTimestampsEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetCalibratedTimestampsEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetCalibratedTimestampsEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetCalibratedTimestampsEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetCalibratedTimestampsEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetCalibratedTimestampsEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetCalibratedTimestampsEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddressEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddressEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetBufferDeviceAddressEXT_PreCall func = reinterpret_cast<plugins::PFN_GetBufferDeviceAddressEXT_PreCall>( plugin.funcs_pre["GetBufferDeviceAddressEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddressEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddressEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddressEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddressEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddressEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddressEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceCooperativeMatrixPropertiesNV_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceCooperativeMatrixPropertiesNV_PreCall>( plugin.funcs_pre["GetPhysicalDeviceCooperativeMatrixPropertiesNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetImageViewHandleNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageViewHandleNVX>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetImageViewHandleNVX_PreCall func = reinterpret_cast<plugins::PFN_GetImageViewHandleNVX_PreCall>( plugin.funcs_pre["GetImageViewHandleNVX_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageViewHandleNVX>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetImageViewHandleNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageViewHandleNVX>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageViewHandleNVX>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageViewHandleNVX>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageViewHandleNVX>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateMetalSurfaceEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateMetalSurfaceEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateMetalSurfaceEXT_PreCall func = reinterpret_cast<plugins::PFN_CreateMetalSurfaceEXT_PreCall>( plugin.funcs_pre["CreateMetalSurfaceEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateMetalSurfaceEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateMetalSurfaceEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateMetalSurfaceEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateMetalSurfaceEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateMetalSurfaceEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateMetalSurfaceEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateStreamDescriptorSurfaceGGP>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateStreamDescriptorSurfaceGGP>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateStreamDescriptorSurfaceGGP_PreCall func = reinterpret_cast<plugins::PFN_CreateStreamDescriptorSurfaceGGP_PreCall>( plugin.funcs_pre["CreateStreamDescriptorSurfaceGGP_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateStreamDescriptorSurfaceGGP>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateStreamDescriptorSurfaceGGP>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateStreamDescriptorSurfaceGGP>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateStreamDescriptorSurfaceGGP>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateStreamDescriptorSurfaceGGP>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateStreamDescriptorSurfaceGGP>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkSetLocalDimmingAMD>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkSetLocalDimmingAMD>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_SetLocalDimmingAMD_PreCall func = reinterpret_cast<plugins::PFN_SetLocalDimmingAMD_PreCall>( plugin.funcs_pre["SetLocalDimmingAMD_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkSetLocalDimmingAMD>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkSetLocalDimmingAMD>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSetLocalDimmingAMD>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSetLocalDimmingAMD>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSetLocalDimmingAMD>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSetLocalDimmingAMD>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<
            format::ApiCallId::ApiCall_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV_PreCall>( plugin.funcs_pre["GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfacePresentModes2EXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfacePresentModes2EXT>::Dispatch(manager,  args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceSurfacePresentModes2EXT_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceSurfacePresentModes2EXT_PreCall>( plugin.funcs_pre["GetPhysicalDeviceSurfacePresentModes2EXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfacePresentModes2EXT>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfacePresentModes2EXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfacePresentModes2EXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfacePresentModes2EXT>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfacePresentModes2EXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceSurfacePresentModes2EXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkAcquireFullScreenExclusiveModeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkAcquireFullScreenExclusiveModeEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_AcquireFullScreenExclusiveModeEXT_PreCall func = reinterpret_cast<plugins::PFN_AcquireFullScreenExclusiveModeEXT_PreCall>( plugin.funcs_pre["AcquireFullScreenExclusiveModeEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkAcquireFullScreenExclusiveModeEXT>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkAcquireFullScreenExclusiveModeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireFullScreenExclusiveModeEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireFullScreenExclusiveModeEXT>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireFullScreenExclusiveModeEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireFullScreenExclusiveModeEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkReleaseFullScreenExclusiveModeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkReleaseFullScreenExclusiveModeEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ReleaseFullScreenExclusiveModeEXT_PreCall func = reinterpret_cast<plugins::PFN_ReleaseFullScreenExclusiveModeEXT_PreCall>( plugin.funcs_pre["ReleaseFullScreenExclusiveModeEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkReleaseFullScreenExclusiveModeEXT>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkReleaseFullScreenExclusiveModeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkReleaseFullScreenExclusiveModeEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkReleaseFullScreenExclusiveModeEXT>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkReleaseFullScreenExclusiveModeEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkReleaseFullScreenExclusiveModeEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceGroupSurfacePresentModes2EXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceGroupSurfacePresentModes2EXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceGroupSurfacePresentModes2EXT_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceGroupSurfacePresentModes2EXT_PreCall>( plugin.funcs_pre["GetDeviceGroupSurfacePresentModes2EXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceGroupSurfacePresentModes2EXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupSurfacePresentModes2EXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupSurfacePresentModes2EXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupSurfacePresentModes2EXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupSurfacePresentModes2EXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceGroupSurfacePresentModes2EXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateHeadlessSurfaceEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateHeadlessSurfaceEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateHeadlessSurfaceEXT_PreCall func = reinterpret_cast<plugins::PFN_CreateHeadlessSurfaceEXT_PreCall>( plugin.funcs_pre["CreateHeadlessSurfaceEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateHeadlessSurfaceEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateHeadlessSurfaceEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateHeadlessSurfaceEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateHeadlessSurfaceEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateHeadlessSurfaceEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateHeadlessSurfaceEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkResetQueryPoolEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkResetQueryPoolEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ResetQueryPoolEXT_PreCall func = reinterpret_cast<plugins::PFN_ResetQueryPoolEXT_PreCall>( plugin.funcs_pre["ResetQueryPoolEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkResetQueryPoolEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkResetQueryPoolEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkResetQueryPoolEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkResetQueryPoolEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkResetQueryPoolEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkResetQueryPoolEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPipelineExecutablePropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPipelineExecutablePropertiesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPipelineExecutablePropertiesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPipelineExecutablePropertiesKHR_PreCall>( plugin.funcs_pre["GetPipelineExecutablePropertiesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPipelineExecutablePropertiesKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineExecutablePropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineExecutablePropertiesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineExecutablePropertiesKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineExecutablePropertiesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineExecutablePropertiesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPipelineExecutableStatisticsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPipelineExecutableStatisticsKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPipelineExecutableStatisticsKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPipelineExecutableStatisticsKHR_PreCall>( plugin.funcs_pre["GetPipelineExecutableStatisticsKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPipelineExecutableStatisticsKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineExecutableStatisticsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineExecutableStatisticsKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineExecutableStatisticsKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineExecutableStatisticsKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineExecutableStatisticsKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPipelineExecutableInternalRepresentationsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPipelineExecutableInternalRepresentationsKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPipelineExecutableInternalRepresentationsKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPipelineExecutableInternalRepresentationsKHR_PreCall>( plugin.funcs_pre["GetPipelineExecutableInternalRepresentationsKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPipelineExecutableInternalRepresentationsKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineExecutableInternalRepresentationsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineExecutableInternalRepresentationsKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineExecutableInternalRepresentationsKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineExecutableInternalRepresentationsKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelineExecutableInternalRepresentationsKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkInitializePerformanceApiINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkInitializePerformanceApiINTEL>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_InitializePerformanceApiINTEL_PreCall func = reinterpret_cast<plugins::PFN_InitializePerformanceApiINTEL_PreCall>( plugin.funcs_pre["InitializePerformanceApiINTEL_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkInitializePerformanceApiINTEL>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkInitializePerformanceApiINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkInitializePerformanceApiINTEL>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkInitializePerformanceApiINTEL>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkInitializePerformanceApiINTEL>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkInitializePerformanceApiINTEL>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkUninitializePerformanceApiINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkUninitializePerformanceApiINTEL>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_UninitializePerformanceApiINTEL_PreCall func = reinterpret_cast<plugins::PFN_UninitializePerformanceApiINTEL_PreCall>( plugin.funcs_pre["UninitializePerformanceApiINTEL_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkUninitializePerformanceApiINTEL>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkUninitializePerformanceApiINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkUninitializePerformanceApiINTEL>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkUninitializePerformanceApiINTEL>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkUninitializePerformanceApiINTEL>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkUninitializePerformanceApiINTEL>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceMarkerINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceMarkerINTEL>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetPerformanceMarkerINTEL_PreCall func = reinterpret_cast<plugins::PFN_CmdSetPerformanceMarkerINTEL_PreCall>( plugin.funcs_pre["CmdSetPerformanceMarkerINTEL_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceMarkerINTEL>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceMarkerINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceMarkerINTEL>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceMarkerINTEL>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceMarkerINTEL>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceMarkerINTEL>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceStreamMarkerINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceStreamMarkerINTEL>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetPerformanceStreamMarkerINTEL_PreCall func = reinterpret_cast<plugins::PFN_CmdSetPerformanceStreamMarkerINTEL_PreCall>( plugin.funcs_pre["CmdSetPerformanceStreamMarkerINTEL_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceStreamMarkerINTEL>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceStreamMarkerINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceStreamMarkerINTEL>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceStreamMarkerINTEL>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceStreamMarkerINTEL>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceStreamMarkerINTEL>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceOverrideINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceOverrideINTEL>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetPerformanceOverrideINTEL_PreCall func = reinterpret_cast<plugins::PFN_CmdSetPerformanceOverrideINTEL_PreCall>( plugin.funcs_pre["CmdSetPerformanceOverrideINTEL_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceOverrideINTEL>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceOverrideINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceOverrideINTEL>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceOverrideINTEL>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceOverrideINTEL>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPerformanceOverrideINTEL>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkAcquirePerformanceConfigurationINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkAcquirePerformanceConfigurationINTEL>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_AcquirePerformanceConfigurationINTEL_PreCall func = reinterpret_cast<plugins::PFN_AcquirePerformanceConfigurationINTEL_PreCall>( plugin.funcs_pre["AcquirePerformanceConfigurationINTEL_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkAcquirePerformanceConfigurationINTEL>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkAcquirePerformanceConfigurationINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAcquirePerformanceConfigurationINTEL>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAcquirePerformanceConfigurationINTEL>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAcquirePerformanceConfigurationINTEL>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAcquirePerformanceConfigurationINTEL>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkReleasePerformanceConfigurationINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkReleasePerformanceConfigurationINTEL>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ReleasePerformanceConfigurationINTEL_PreCall func = reinterpret_cast<plugins::PFN_ReleasePerformanceConfigurationINTEL_PreCall>( plugin.funcs_pre["ReleasePerformanceConfigurationINTEL_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkReleasePerformanceConfigurationINTEL>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkReleasePerformanceConfigurationINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkReleasePerformanceConfigurationINTEL>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkReleasePerformanceConfigurationINTEL>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkReleasePerformanceConfigurationINTEL>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkReleasePerformanceConfigurationINTEL>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkQueueSetPerformanceConfigurationINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkQueueSetPerformanceConfigurationINTEL>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_QueueSetPerformanceConfigurationINTEL_PreCall func = reinterpret_cast<plugins::PFN_QueueSetPerformanceConfigurationINTEL_PreCall>( plugin.funcs_pre["QueueSetPerformanceConfigurationINTEL_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkQueueSetPerformanceConfigurationINTEL>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkQueueSetPerformanceConfigurationINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueSetPerformanceConfigurationINTEL>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueSetPerformanceConfigurationINTEL>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueSetPerformanceConfigurationINTEL>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueSetPerformanceConfigurationINTEL>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPerformanceParameterINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPerformanceParameterINTEL>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPerformanceParameterINTEL_PreCall func = reinterpret_cast<plugins::PFN_GetPerformanceParameterINTEL_PreCall>( plugin.funcs_pre["GetPerformanceParameterINTEL_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPerformanceParameterINTEL>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPerformanceParameterINTEL>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPerformanceParameterINTEL>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPerformanceParameterINTEL>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPerformanceParameterINTEL>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPerformanceParameterINTEL>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLineStippleEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLineStippleEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetLineStippleEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetLineStippleEXT_PreCall>( plugin.funcs_pre["CmdSetLineStippleEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLineStippleEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineStippleEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineStippleEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineStippleEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineStippleEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineStippleEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetSemaphoreCounterValueKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetSemaphoreCounterValueKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetSemaphoreCounterValueKHR_PreCall func = reinterpret_cast<plugins::PFN_GetSemaphoreCounterValueKHR_PreCall>( plugin.funcs_pre["GetSemaphoreCounterValueKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetSemaphoreCounterValueKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreCounterValueKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreCounterValueKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreCounterValueKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreCounterValueKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreCounterValueKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkWaitSemaphoresKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkWaitSemaphoresKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_WaitSemaphoresKHR_PreCall func = reinterpret_cast<plugins::PFN_WaitSemaphoresKHR_PreCall>( plugin.funcs_pre["WaitSemaphoresKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkWaitSemaphoresKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkWaitSemaphoresKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkWaitSemaphoresKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkWaitSemaphoresKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkWaitSemaphoresKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkWaitSemaphoresKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkSignalSemaphoreKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkSignalSemaphoreKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_SignalSemaphoreKHR_PreCall func = reinterpret_cast<plugins::PFN_SignalSemaphoreKHR_PreCall>( plugin.funcs_pre["SignalSemaphoreKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkSignalSemaphoreKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkSignalSemaphoreKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSignalSemaphoreKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSignalSemaphoreKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSignalSemaphoreKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSignalSemaphoreKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<
            format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR_PreCall func = reinterpret_cast<plugins::PFN_EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR_PreCall>( plugin.funcs_pre["EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<
            format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkAcquireProfilingLockKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkAcquireProfilingLockKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_AcquireProfilingLockKHR_PreCall func = reinterpret_cast<plugins::PFN_AcquireProfilingLockKHR_PreCall>( plugin.funcs_pre["AcquireProfilingLockKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkAcquireProfilingLockKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkAcquireProfilingLockKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireProfilingLockKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireProfilingLockKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireProfilingLockKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireProfilingLockKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkReleaseProfilingLockKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkReleaseProfilingLockKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ReleaseProfilingLockKHR_PreCall func = reinterpret_cast<plugins::PFN_ReleaseProfilingLockKHR_PreCall>( plugin.funcs_pre["ReleaseProfilingLockKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkReleaseProfilingLockKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkReleaseProfilingLockKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkReleaseProfilingLockKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkReleaseProfilingLockKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkReleaseProfilingLockKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkReleaseProfilingLockKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddressKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddressKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetBufferDeviceAddressKHR_PreCall func = reinterpret_cast<plugins::PFN_GetBufferDeviceAddressKHR_PreCall>( plugin.funcs_pre["GetBufferDeviceAddressKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddressKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddressKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddressKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddressKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddressKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddressKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferOpaqueCaptureAddressKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferOpaqueCaptureAddressKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetBufferOpaqueCaptureAddressKHR_PreCall func = reinterpret_cast<plugins::PFN_GetBufferOpaqueCaptureAddressKHR_PreCall>( plugin.funcs_pre["GetBufferOpaqueCaptureAddressKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferOpaqueCaptureAddressKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferOpaqueCaptureAddressKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferOpaqueCaptureAddressKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferOpaqueCaptureAddressKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferOpaqueCaptureAddressKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferOpaqueCaptureAddressKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryOpaqueCaptureAddressKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryOpaqueCaptureAddressKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceMemoryOpaqueCaptureAddressKHR_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceMemoryOpaqueCaptureAddressKHR_PreCall>( plugin.funcs_pre["GetDeviceMemoryOpaqueCaptureAddressKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryOpaqueCaptureAddressKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryOpaqueCaptureAddressKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryOpaqueCaptureAddressKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryOpaqueCaptureAddressKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryOpaqueCaptureAddressKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryOpaqueCaptureAddressKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceToolPropertiesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceToolPropertiesEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceToolPropertiesEXT_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceToolPropertiesEXT_PreCall>( plugin.funcs_pre["GetPhysicalDeviceToolPropertiesEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceToolPropertiesEXT>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceToolPropertiesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceToolPropertiesEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceToolPropertiesEXT>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceToolPropertiesEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceToolPropertiesEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCount>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCount>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawIndirectCount_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawIndirectCount_PreCall>( plugin.funcs_pre["CmdDrawIndirectCount_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCount>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCount>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCount>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCount>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCount>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndirectCount>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCount>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCount>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawIndexedIndirectCount_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawIndexedIndirectCount_PreCall>( plugin.funcs_pre["CmdDrawIndexedIndirectCount_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCount>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCount>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCount>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCount>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCount>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawIndexedIndirectCount>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateRenderPass2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateRenderPass2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateRenderPass2_PreCall func = reinterpret_cast<plugins::PFN_CreateRenderPass2_PreCall>( plugin.funcs_pre["CreateRenderPass2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateRenderPass2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateRenderPass2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRenderPass2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRenderPass2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRenderPass2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRenderPass2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBeginRenderPass2_PreCall func = reinterpret_cast<plugins::PFN_CmdBeginRenderPass2_PreCall>( plugin.funcs_pre["CmdBeginRenderPass2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderPass2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdNextSubpass2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdNextSubpass2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdNextSubpass2_PreCall func = reinterpret_cast<plugins::PFN_CmdNextSubpass2_PreCall>( plugin.funcs_pre["CmdNextSubpass2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdNextSubpass2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdNextSubpass2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdNextSubpass2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdNextSubpass2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdNextSubpass2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdNextSubpass2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdEndRenderPass2_PreCall func = reinterpret_cast<plugins::PFN_CmdEndRenderPass2_PreCall>( plugin.funcs_pre["CmdEndRenderPass2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderPass2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkResetQueryPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkResetQueryPool>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ResetQueryPool_PreCall func = reinterpret_cast<plugins::PFN_ResetQueryPool_PreCall>( plugin.funcs_pre["ResetQueryPool_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkResetQueryPool>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkResetQueryPool>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkResetQueryPool>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkResetQueryPool>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkResetQueryPool>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkResetQueryPool>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetSemaphoreCounterValue>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetSemaphoreCounterValue>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetSemaphoreCounterValue_PreCall func = reinterpret_cast<plugins::PFN_GetSemaphoreCounterValue_PreCall>( plugin.funcs_pre["GetSemaphoreCounterValue_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetSemaphoreCounterValue>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreCounterValue>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreCounterValue>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreCounterValue>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreCounterValue>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreCounterValue>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkWaitSemaphores>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkWaitSemaphores>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_WaitSemaphores_PreCall func = reinterpret_cast<plugins::PFN_WaitSemaphores_PreCall>( plugin.funcs_pre["WaitSemaphores_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkWaitSemaphores>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkWaitSemaphores>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkWaitSemaphores>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkWaitSemaphores>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkWaitSemaphores>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkWaitSemaphores>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkSignalSemaphore>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkSignalSemaphore>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_SignalSemaphore_PreCall func = reinterpret_cast<plugins::PFN_SignalSemaphore_PreCall>( plugin.funcs_pre["SignalSemaphore_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkSignalSemaphore>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkSignalSemaphore>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSignalSemaphore>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSignalSemaphore>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSignalSemaphore>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSignalSemaphore>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddress>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddress>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetBufferDeviceAddress_PreCall func = reinterpret_cast<plugins::PFN_GetBufferDeviceAddress_PreCall>( plugin.funcs_pre["GetBufferDeviceAddress_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddress>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddress>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddress>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddress>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddress>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferDeviceAddress>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferOpaqueCaptureAddress>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferOpaqueCaptureAddress>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetBufferOpaqueCaptureAddress_PreCall func = reinterpret_cast<plugins::PFN_GetBufferOpaqueCaptureAddress_PreCall>( plugin.funcs_pre["GetBufferOpaqueCaptureAddress_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetBufferOpaqueCaptureAddress>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferOpaqueCaptureAddress>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferOpaqueCaptureAddress>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferOpaqueCaptureAddress>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferOpaqueCaptureAddress>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetBufferOpaqueCaptureAddress>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryOpaqueCaptureAddress>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryOpaqueCaptureAddress>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceMemoryOpaqueCaptureAddress_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceMemoryOpaqueCaptureAddress_PreCall>( plugin.funcs_pre["GetDeviceMemoryOpaqueCaptureAddress_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryOpaqueCaptureAddress>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryOpaqueCaptureAddress>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryOpaqueCaptureAddress>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryOpaqueCaptureAddress>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryOpaqueCaptureAddress>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMemoryOpaqueCaptureAddress>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateDeferredOperationKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDeferredOperationKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateDeferredOperationKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateDeferredOperationKHR_PreCall>( plugin.funcs_pre["CreateDeferredOperationKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDeferredOperationKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateDeferredOperationKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDeferredOperationKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDeferredOperationKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDeferredOperationKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDeferredOperationKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDeferredOperationKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDeferredOperationKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyDeferredOperationKHR_PreCall func = reinterpret_cast<plugins::PFN_DestroyDeferredOperationKHR_PreCall>( plugin.funcs_pre["DestroyDeferredOperationKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyDeferredOperationKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDeferredOperationKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDeferredOperationKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDeferredOperationKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDeferredOperationKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyDeferredOperationKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeferredOperationMaxConcurrencyKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeferredOperationMaxConcurrencyKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeferredOperationMaxConcurrencyKHR_PreCall func = reinterpret_cast<plugins::PFN_GetDeferredOperationMaxConcurrencyKHR_PreCall>( plugin.funcs_pre["GetDeferredOperationMaxConcurrencyKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeferredOperationMaxConcurrencyKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeferredOperationMaxConcurrencyKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeferredOperationMaxConcurrencyKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeferredOperationMaxConcurrencyKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeferredOperationMaxConcurrencyKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeferredOperationMaxConcurrencyKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeferredOperationResultKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeferredOperationResultKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeferredOperationResultKHR_PreCall func = reinterpret_cast<plugins::PFN_GetDeferredOperationResultKHR_PreCall>( plugin.funcs_pre["GetDeferredOperationResultKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeferredOperationResultKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeferredOperationResultKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeferredOperationResultKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeferredOperationResultKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeferredOperationResultKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeferredOperationResultKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDeferredOperationJoinKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDeferredOperationJoinKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DeferredOperationJoinKHR_PreCall func = reinterpret_cast<plugins::PFN_DeferredOperationJoinKHR_PreCall>( plugin.funcs_pre["DeferredOperationJoinKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDeferredOperationJoinKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDeferredOperationJoinKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDeferredOperationJoinKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDeferredOperationJoinKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDeferredOperationJoinKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDeferredOperationJoinKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateAccelerationStructureKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateAccelerationStructureKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateAccelerationStructureKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateAccelerationStructureKHR_PreCall>( plugin.funcs_pre["CreateAccelerationStructureKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateAccelerationStructureKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateAccelerationStructureKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateAccelerationStructureKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateAccelerationStructureKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateAccelerationStructureKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateAccelerationStructureKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyAccelerationStructureKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyAccelerationStructureKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyAccelerationStructureKHR_PreCall func = reinterpret_cast<plugins::PFN_DestroyAccelerationStructureKHR_PreCall>( plugin.funcs_pre["DestroyAccelerationStructureKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyAccelerationStructureKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyAccelerationStructureKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyAccelerationStructureKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyAccelerationStructureKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyAccelerationStructureKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyAccelerationStructureKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureMemoryRequirementsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureMemoryRequirementsNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_GetAccelerationStructureMemoryRequirementsKHR_PreCall func = reinterpret_cast<plugins::PFN_GetAccelerationStructureMemoryRequirementsKHR_PreCall>( plugin.funcs_pre["GetAccelerationStructureMemoryRequirementsKHR_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureMemoryRequirementsKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureMemoryRequirementsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureMemoryRequirementsNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureMemoryRequirementsKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureMemoryRequirementsNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureMemoryRequirementsKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkBindAccelerationStructureMemoryKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkBindAccelerationStructureMemoryKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_BindAccelerationStructureMemoryKHR_PreCall func = reinterpret_cast<plugins::PFN_BindAccelerationStructureMemoryKHR_PreCall>( plugin.funcs_pre["BindAccelerationStructureMemoryKHR_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkBindAccelerationStructureMemoryKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkBindAccelerationStructureMemoryKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindAccelerationStructureMemoryKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindAccelerationStructureMemoryKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindAccelerationStructureMemoryKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindAccelerationStructureMemoryKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructuresKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructuresKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBuildAccelerationStructuresKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdBuildAccelerationStructuresKHR_PreCall>( plugin.funcs_pre["CmdBuildAccelerationStructuresKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructuresKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructuresKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructuresKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructuresKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructuresKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructuresKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructuresIndirectKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructuresIndirectKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBuildAccelerationStructuresIndirectKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdBuildAccelerationStructuresIndirectKHR_PreCall>( plugin.funcs_pre["CmdBuildAccelerationStructuresIndirectKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructuresIndirectKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructuresIndirectKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructuresIndirectKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructuresIndirectKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructuresIndirectKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildAccelerationStructuresIndirectKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkBuildAccelerationStructuresKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkBuildAccelerationStructuresKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_BuildAccelerationStructuresKHR_PreCall func = reinterpret_cast<plugins::PFN_BuildAccelerationStructuresKHR_PreCall>( plugin.funcs_pre["BuildAccelerationStructuresKHR_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkBuildAccelerationStructuresKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkBuildAccelerationStructuresKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBuildAccelerationStructuresKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBuildAccelerationStructuresKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBuildAccelerationStructuresKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBuildAccelerationStructuresKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCopyAccelerationStructureKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCopyAccelerationStructureKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_CopyAccelerationStructureKHR_PreCall func = reinterpret_cast<plugins::PFN_CopyAccelerationStructureKHR_PreCall>( plugin.funcs_pre["CopyAccelerationStructureKHR_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCopyAccelerationStructureKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCopyAccelerationStructureKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCopyAccelerationStructureKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCopyAccelerationStructureKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCopyAccelerationStructureKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCopyAccelerationStructureKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCopyAccelerationStructureToMemoryKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCopyAccelerationStructureToMemoryKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CopyAccelerationStructureToMemoryKHR_PreCall func = reinterpret_cast<plugins::PFN_CopyAccelerationStructureToMemoryKHR_PreCall>( plugin.funcs_pre["CopyAccelerationStructureToMemoryKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCopyAccelerationStructureToMemoryKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCopyAccelerationStructureToMemoryKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCopyAccelerationStructureToMemoryKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCopyAccelerationStructureToMemoryKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCopyAccelerationStructureToMemoryKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCopyAccelerationStructureToMemoryKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCopyMemoryToAccelerationStructureKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCopyMemoryToAccelerationStructureKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CopyMemoryToAccelerationStructureKHR_PreCall func = reinterpret_cast<plugins::PFN_CopyMemoryToAccelerationStructureKHR_PreCall>( plugin.funcs_pre["CopyMemoryToAccelerationStructureKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCopyMemoryToAccelerationStructureKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCopyMemoryToAccelerationStructureKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCopyMemoryToAccelerationStructureKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCopyMemoryToAccelerationStructureKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCopyMemoryToAccelerationStructureKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCopyMemoryToAccelerationStructureKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkWriteAccelerationStructuresPropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkWriteAccelerationStructuresPropertiesKHR>::Dispatch(manager,  args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_WriteAccelerationStructuresPropertiesKHR_PreCall func = reinterpret_cast<plugins::PFN_WriteAccelerationStructuresPropertiesKHR_PreCall>( plugin.funcs_pre["WriteAccelerationStructuresPropertiesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkWriteAccelerationStructuresPropertiesKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkWriteAccelerationStructuresPropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkWriteAccelerationStructuresPropertiesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkWriteAccelerationStructuresPropertiesKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkWriteAccelerationStructuresPropertiesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkWriteAccelerationStructuresPropertiesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyAccelerationStructureKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyAccelerationStructureKHR_PreCall>( plugin.funcs_pre["CmdCopyAccelerationStructureKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureToMemoryKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureToMemoryKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyAccelerationStructureToMemoryKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyAccelerationStructureToMemoryKHR_PreCall>( plugin.funcs_pre["CmdCopyAccelerationStructureToMemoryKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureToMemoryKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureToMemoryKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureToMemoryKHR>::Dispatch(manager,  args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureToMemoryKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureToMemoryKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyAccelerationStructureToMemoryKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyMemoryToAccelerationStructureKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyMemoryToAccelerationStructureKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyMemoryToAccelerationStructureKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyMemoryToAccelerationStructureKHR_PreCall>( plugin.funcs_pre["CmdCopyMemoryToAccelerationStructureKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyMemoryToAccelerationStructureKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMemoryToAccelerationStructureKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMemoryToAccelerationStructureKHR>::Dispatch(manager,  args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMemoryToAccelerationStructureKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMemoryToAccelerationStructureKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMemoryToAccelerationStructureKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdTraceRaysKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdTraceRaysKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdTraceRaysKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdTraceRaysKHR_PreCall>( plugin.funcs_pre["CmdTraceRaysKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdTraceRaysKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateRayTracingPipelinesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateRayTracingPipelinesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateRayTracingPipelinesKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateRayTracingPipelinesKHR_PreCall>( plugin.funcs_pre["CreateRayTracingPipelinesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateRayTracingPipelinesKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateRayTracingPipelinesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRayTracingPipelinesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRayTracingPipelinesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRayTracingPipelinesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateRayTracingPipelinesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupHandlesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupHandlesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetRayTracingShaderGroupHandlesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetRayTracingShaderGroupHandlesKHR_PreCall>( plugin.funcs_pre["GetRayTracingShaderGroupHandlesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupHandlesKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupHandlesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupHandlesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupHandlesKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupHandlesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupHandlesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteAccelerationStructuresPropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteAccelerationStructuresPropertiesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdWriteAccelerationStructuresPropertiesKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdWriteAccelerationStructuresPropertiesKHR_PreCall>( plugin.funcs_pre["CmdWriteAccelerationStructuresPropertiesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteAccelerationStructuresPropertiesKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteAccelerationStructuresPropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteAccelerationStructuresPropertiesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteAccelerationStructuresPropertiesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteAccelerationStructuresPropertiesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteAccelerationStructuresPropertiesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureDeviceAddressKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureDeviceAddressKHR>::Dispatch(manager,  args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetAccelerationStructureDeviceAddressKHR_PreCall func = reinterpret_cast<plugins::PFN_GetAccelerationStructureDeviceAddressKHR_PreCall>( plugin.funcs_pre["GetAccelerationStructureDeviceAddressKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureDeviceAddressKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureDeviceAddressKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureDeviceAddressKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureDeviceAddressKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureDeviceAddressKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureDeviceAddressKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetRayTracingCaptureReplayShaderGroupHandlesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetRayTracingCaptureReplayShaderGroupHandlesKHR_PreCall>( plugin.funcs_pre["GetRayTracingCaptureReplayShaderGroupHandlesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdTraceRaysIndirectKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdTraceRaysIndirectKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdTraceRaysIndirectKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdTraceRaysIndirectKHR_PreCall>( plugin.funcs_pre["CmdTraceRaysIndirectKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdTraceRaysIndirectKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysIndirectKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysIndirectKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysIndirectKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysIndirectKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysIndirectKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceAccelerationStructureCompatibilityKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceAccelerationStructureCompatibilityKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceAccelerationStructureCompatibilityKHR_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceAccelerationStructureCompatibilityKHR_PreCall>( plugin.funcs_pre["GetDeviceAccelerationStructureCompatibilityKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceAccelerationStructureCompatibilityKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceAccelerationStructureCompatibilityKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceAccelerationStructureCompatibilityKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceAccelerationStructureCompatibilityKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceAccelerationStructureCompatibilityKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceAccelerationStructureCompatibilityKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetGeneratedCommandsMemoryRequirementsNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetGeneratedCommandsMemoryRequirementsNV>::Dispatch(manager,  args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetGeneratedCommandsMemoryRequirementsNV_PreCall func = reinterpret_cast<plugins::PFN_GetGeneratedCommandsMemoryRequirementsNV_PreCall>( plugin.funcs_pre["GetGeneratedCommandsMemoryRequirementsNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetGeneratedCommandsMemoryRequirementsNV>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetGeneratedCommandsMemoryRequirementsNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetGeneratedCommandsMemoryRequirementsNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetGeneratedCommandsMemoryRequirementsNV>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetGeneratedCommandsMemoryRequirementsNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetGeneratedCommandsMemoryRequirementsNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdPreprocessGeneratedCommandsNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdPreprocessGeneratedCommandsNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdPreprocessGeneratedCommandsNV_PreCall func = reinterpret_cast<plugins::PFN_CmdPreprocessGeneratedCommandsNV_PreCall>( plugin.funcs_pre["CmdPreprocessGeneratedCommandsNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdPreprocessGeneratedCommandsNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdPreprocessGeneratedCommandsNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPreprocessGeneratedCommandsNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPreprocessGeneratedCommandsNV>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPreprocessGeneratedCommandsNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPreprocessGeneratedCommandsNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdExecuteGeneratedCommandsNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdExecuteGeneratedCommandsNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdExecuteGeneratedCommandsNV_PreCall func = reinterpret_cast<plugins::PFN_CmdExecuteGeneratedCommandsNV_PreCall>( plugin.funcs_pre["CmdExecuteGeneratedCommandsNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdExecuteGeneratedCommandsNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdExecuteGeneratedCommandsNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdExecuteGeneratedCommandsNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdExecuteGeneratedCommandsNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdExecuteGeneratedCommandsNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdExecuteGeneratedCommandsNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindPipelineShaderGroupNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindPipelineShaderGroupNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBindPipelineShaderGroupNV_PreCall func = reinterpret_cast<plugins::PFN_CmdBindPipelineShaderGroupNV_PreCall>( plugin.funcs_pre["CmdBindPipelineShaderGroupNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindPipelineShaderGroupNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindPipelineShaderGroupNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindPipelineShaderGroupNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindPipelineShaderGroupNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindPipelineShaderGroupNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindPipelineShaderGroupNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateIndirectCommandsLayoutNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateIndirectCommandsLayoutNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateIndirectCommandsLayoutNV_PreCall func = reinterpret_cast<plugins::PFN_CreateIndirectCommandsLayoutNV_PreCall>( plugin.funcs_pre["CreateIndirectCommandsLayoutNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateIndirectCommandsLayoutNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateIndirectCommandsLayoutNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateIndirectCommandsLayoutNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateIndirectCommandsLayoutNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateIndirectCommandsLayoutNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateIndirectCommandsLayoutNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyIndirectCommandsLayoutNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyIndirectCommandsLayoutNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyIndirectCommandsLayoutNV_PreCall func = reinterpret_cast<plugins::PFN_DestroyIndirectCommandsLayoutNV_PreCall>( plugin.funcs_pre["DestroyIndirectCommandsLayoutNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyIndirectCommandsLayoutNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyIndirectCommandsLayoutNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyIndirectCommandsLayoutNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyIndirectCommandsLayoutNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyIndirectCommandsLayoutNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyIndirectCommandsLayoutNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetImageViewAddressNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageViewAddressNVX>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetImageViewAddressNVX_PreCall func = reinterpret_cast<plugins::PFN_GetImageViewAddressNVX_PreCall>( plugin.funcs_pre["GetImageViewAddressNVX_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageViewAddressNVX>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetImageViewAddressNVX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageViewAddressNVX>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageViewAddressNVX>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageViewAddressNVX>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageViewAddressNVX>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreatePrivateDataSlotEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreatePrivateDataSlotEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreatePrivateDataSlotEXT_PreCall func = reinterpret_cast<plugins::PFN_CreatePrivateDataSlotEXT_PreCall>( plugin.funcs_pre["CreatePrivateDataSlotEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreatePrivateDataSlotEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreatePrivateDataSlotEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreatePrivateDataSlotEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreatePrivateDataSlotEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreatePrivateDataSlotEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreatePrivateDataSlotEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyPrivateDataSlotEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyPrivateDataSlotEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyPrivateDataSlotEXT_PreCall func = reinterpret_cast<plugins::PFN_DestroyPrivateDataSlotEXT_PreCall>( plugin.funcs_pre["DestroyPrivateDataSlotEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyPrivateDataSlotEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPrivateDataSlotEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPrivateDataSlotEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPrivateDataSlotEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPrivateDataSlotEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPrivateDataSlotEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkSetPrivateDataEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkSetPrivateDataEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_SetPrivateDataEXT_PreCall func = reinterpret_cast<plugins::PFN_SetPrivateDataEXT_PreCall>( plugin.funcs_pre["SetPrivateDataEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkSetPrivateDataEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkSetPrivateDataEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSetPrivateDataEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSetPrivateDataEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSetPrivateDataEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSetPrivateDataEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPrivateDataEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPrivateDataEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPrivateDataEXT_PreCall func = reinterpret_cast<plugins::PFN_GetPrivateDataEXT_PreCall>( plugin.funcs_pre["GetPrivateDataEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPrivateDataEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPrivateDataEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPrivateDataEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPrivateDataEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPrivateDataEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPrivateDataEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCullModeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCullModeEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetCullModeEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetCullModeEXT_PreCall>( plugin.funcs_pre["CmdSetCullModeEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCullModeEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCullModeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCullModeEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCullModeEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCullModeEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCullModeEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetFrontFaceEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetFrontFaceEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetFrontFaceEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetFrontFaceEXT_PreCall>( plugin.funcs_pre["CmdSetFrontFaceEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetFrontFaceEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFrontFaceEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFrontFaceEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFrontFaceEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFrontFaceEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFrontFaceEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveTopologyEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveTopologyEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetPrimitiveTopologyEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetPrimitiveTopologyEXT_PreCall>( plugin.funcs_pre["CmdSetPrimitiveTopologyEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveTopologyEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveTopologyEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveTopologyEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveTopologyEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveTopologyEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveTopologyEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportWithCountEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportWithCountEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetViewportWithCountEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetViewportWithCountEXT_PreCall>( plugin.funcs_pre["CmdSetViewportWithCountEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportWithCountEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWithCountEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWithCountEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWithCountEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWithCountEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWithCountEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetScissorWithCountEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetScissorWithCountEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetScissorWithCountEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetScissorWithCountEXT_PreCall>( plugin.funcs_pre["CmdSetScissorWithCountEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetScissorWithCountEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetScissorWithCountEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetScissorWithCountEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetScissorWithCountEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetScissorWithCountEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetScissorWithCountEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers2EXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers2EXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBindVertexBuffers2EXT_PreCall func = reinterpret_cast<plugins::PFN_CmdBindVertexBuffers2EXT_PreCall>( plugin.funcs_pre["CmdBindVertexBuffers2EXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers2EXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers2EXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers2EXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers2EXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers2EXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers2EXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthTestEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthTestEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDepthTestEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDepthTestEnableEXT_PreCall>( plugin.funcs_pre["CmdSetDepthTestEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthTestEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthTestEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthTestEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthTestEnableEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthTestEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthTestEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthWriteEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthWriteEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDepthWriteEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDepthWriteEnableEXT_PreCall>( plugin.funcs_pre["CmdSetDepthWriteEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthWriteEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthWriteEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthWriteEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthWriteEnableEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthWriteEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthWriteEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthCompareOpEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthCompareOpEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDepthCompareOpEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDepthCompareOpEXT_PreCall>( plugin.funcs_pre["CmdSetDepthCompareOpEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthCompareOpEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthCompareOpEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthCompareOpEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthCompareOpEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthCompareOpEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthCompareOpEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBoundsTestEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBoundsTestEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDepthBoundsTestEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDepthBoundsTestEnableEXT_PreCall>( plugin.funcs_pre["CmdSetDepthBoundsTestEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBoundsTestEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBoundsTestEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBoundsTestEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBoundsTestEnableEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBoundsTestEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBoundsTestEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilTestEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilTestEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetStencilTestEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetStencilTestEnableEXT_PreCall>( plugin.funcs_pre["CmdSetStencilTestEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilTestEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilTestEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilTestEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilTestEnableEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilTestEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilTestEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilOpEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilOpEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetStencilOpEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetStencilOpEXT_PreCall>( plugin.funcs_pre["CmdSetStencilOpEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilOpEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilOpEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilOpEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilOpEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilOpEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilOpEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateDirectFBSurfaceEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDirectFBSurfaceEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateDirectFBSurfaceEXT_PreCall func = reinterpret_cast<plugins::PFN_CreateDirectFBSurfaceEXT_PreCall>( plugin.funcs_pre["CreateDirectFBSurfaceEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateDirectFBSurfaceEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateDirectFBSurfaceEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDirectFBSurfaceEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDirectFBSurfaceEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDirectFBSurfaceEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateDirectFBSurfaceEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDirectFBPresentationSupportEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDirectFBPresentationSupportEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceDirectFBPresentationSupportEXT_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceDirectFBPresentationSupportEXT_PreCall>( plugin.funcs_pre["GetPhysicalDeviceDirectFBPresentationSupportEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDirectFBPresentationSupportEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDirectFBPresentationSupportEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDirectFBPresentationSupportEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDirectFBPresentationSupportEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDirectFBPresentationSupportEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceDirectFBPresentationSupportEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyBuffer2KHR_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyBuffer2KHR_PreCall>( plugin.funcs_pre["CmdCopyBuffer2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImage2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImage2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyImage2KHR_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyImage2KHR_PreCall>( plugin.funcs_pre["CmdCopyImage2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImage2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImage2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImage2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImage2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImage2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImage2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyBufferToImage2KHR_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyBufferToImage2KHR_PreCall>( plugin.funcs_pre["CmdCopyBufferToImage2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyImageToBuffer2KHR_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyImageToBuffer2KHR_PreCall>( plugin.funcs_pre["CmdCopyImageToBuffer2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBlitImage2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBlitImage2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBlitImage2KHR_PreCall func = reinterpret_cast<plugins::PFN_CmdBlitImage2KHR_PreCall>( plugin.funcs_pre["CmdBlitImage2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBlitImage2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBlitImage2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBlitImage2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBlitImage2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBlitImage2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBlitImage2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdResolveImage2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdResolveImage2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdResolveImage2KHR_PreCall func = reinterpret_cast<plugins::PFN_CmdResolveImage2KHR_PreCall>( plugin.funcs_pre["CmdResolveImage2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdResolveImage2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdResolveImage2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResolveImage2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResolveImage2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResolveImage2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResolveImage2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureBuildSizesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureBuildSizesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetAccelerationStructureBuildSizesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetAccelerationStructureBuildSizesKHR_PreCall>( plugin.funcs_pre["GetAccelerationStructureBuildSizesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureBuildSizesKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureBuildSizesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureBuildSizesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureBuildSizesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureBuildSizesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetAccelerationStructureBuildSizesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupStackSizeKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupStackSizeKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetRayTracingShaderGroupStackSizeKHR_PreCall func = reinterpret_cast<plugins::PFN_GetRayTracingShaderGroupStackSizeKHR_PreCall>( plugin.funcs_pre["GetRayTracingShaderGroupStackSizeKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupStackSizeKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupStackSizeKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupStackSizeKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupStackSizeKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupStackSizeKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetRayTracingShaderGroupStackSizeKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRayTracingPipelineStackSizeKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRayTracingPipelineStackSizeKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetRayTracingPipelineStackSizeKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdSetRayTracingPipelineStackSizeKHR_PreCall>( plugin.funcs_pre["CmdSetRayTracingPipelineStackSizeKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRayTracingPipelineStackSizeKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRayTracingPipelineStackSizeKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRayTracingPipelineStackSizeKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRayTracingPipelineStackSizeKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRayTracingPipelineStackSizeKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRayTracingPipelineStackSizeKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFragmentShadingRatesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFragmentShadingRatesKHR>::Dispatch(manager,  args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceFragmentShadingRatesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceFragmentShadingRatesKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceFragmentShadingRatesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFragmentShadingRatesKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFragmentShadingRatesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFragmentShadingRatesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFragmentShadingRatesKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFragmentShadingRatesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceFragmentShadingRatesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetFragmentShadingRateKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetFragmentShadingRateKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetFragmentShadingRateKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdSetFragmentShadingRateKHR_PreCall>( plugin.funcs_pre["CmdSetFragmentShadingRateKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetFragmentShadingRateKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFragmentShadingRateKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFragmentShadingRateKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFragmentShadingRateKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFragmentShadingRateKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFragmentShadingRateKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetFragmentShadingRateEnumNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetFragmentShadingRateEnumNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetFragmentShadingRateEnumNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetFragmentShadingRateEnumNV_PreCall>( plugin.funcs_pre["CmdSetFragmentShadingRateEnumNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetFragmentShadingRateEnumNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFragmentShadingRateEnumNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFragmentShadingRateEnumNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFragmentShadingRateEnumNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFragmentShadingRateEnumNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFragmentShadingRateEnumNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkAcquireWinrtDisplayNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkAcquireWinrtDisplayNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_AcquireWinrtDisplayNV_PreCall func = reinterpret_cast<plugins::PFN_AcquireWinrtDisplayNV_PreCall>( plugin.funcs_pre["AcquireWinrtDisplayNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkAcquireWinrtDisplayNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkAcquireWinrtDisplayNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireWinrtDisplayNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireWinrtDisplayNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireWinrtDisplayNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireWinrtDisplayNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetWinrtDisplayNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetWinrtDisplayNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetWinrtDisplayNV_PreCall func = reinterpret_cast<plugins::PFN_GetWinrtDisplayNV_PreCall>( plugin.funcs_pre["GetWinrtDisplayNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetWinrtDisplayNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetWinrtDisplayNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetWinrtDisplayNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetWinrtDisplayNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetWinrtDisplayNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetWinrtDisplayNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetEvent2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetEvent2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetEvent2KHR_PreCall func = reinterpret_cast<plugins::PFN_CmdSetEvent2KHR_PreCall>( plugin.funcs_pre["CmdSetEvent2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetEvent2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetEvent2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetEvent2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetEvent2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetEvent2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetEvent2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdResetEvent2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdResetEvent2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdResetEvent2KHR_PreCall func = reinterpret_cast<plugins::PFN_CmdResetEvent2KHR_PreCall>( plugin.funcs_pre["CmdResetEvent2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdResetEvent2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetEvent2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetEvent2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetEvent2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetEvent2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetEvent2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdWaitEvents2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWaitEvents2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdWaitEvents2KHR_PreCall func = reinterpret_cast<plugins::PFN_CmdWaitEvents2KHR_PreCall>( plugin.funcs_pre["CmdWaitEvents2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWaitEvents2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdWaitEvents2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWaitEvents2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWaitEvents2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWaitEvents2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWaitEvents2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdPipelineBarrier2KHR_PreCall func = reinterpret_cast<plugins::PFN_CmdPipelineBarrier2KHR_PreCall>( plugin.funcs_pre["CmdPipelineBarrier2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdWriteTimestamp2KHR_PreCall func = reinterpret_cast<plugins::PFN_CmdWriteTimestamp2KHR_PreCall>( plugin.funcs_pre["CmdWriteTimestamp2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkQueueSubmit2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkQueueSubmit2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_QueueSubmit2KHR_PreCall func = reinterpret_cast<plugins::PFN_QueueSubmit2KHR_PreCall>( plugin.funcs_pre["QueueSubmit2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkQueueSubmit2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkQueueSubmit2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueSubmit2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueSubmit2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueSubmit2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueSubmit2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteBufferMarker2AMD>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteBufferMarker2AMD>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdWriteBufferMarker2AMD_PreCall func = reinterpret_cast<plugins::PFN_CmdWriteBufferMarker2AMD_PreCall>( plugin.funcs_pre["CmdWriteBufferMarker2AMD_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteBufferMarker2AMD>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteBufferMarker2AMD>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteBufferMarker2AMD>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteBufferMarker2AMD>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteBufferMarker2AMD>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteBufferMarker2AMD>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetQueueCheckpointData2NV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetQueueCheckpointData2NV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetQueueCheckpointData2NV_PreCall func = reinterpret_cast<plugins::PFN_GetQueueCheckpointData2NV_PreCall>( plugin.funcs_pre["GetQueueCheckpointData2NV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetQueueCheckpointData2NV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetQueueCheckpointData2NV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetQueueCheckpointData2NV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetQueueCheckpointData2NV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetQueueCheckpointData2NV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetQueueCheckpointData2NV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetVertexInputEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetVertexInputEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetVertexInputEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetVertexInputEXT_PreCall>( plugin.funcs_pre["CmdSetVertexInputEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetVertexInputEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetVertexInputEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetVertexInputEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetVertexInputEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetVertexInputEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetVertexInputEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryZirconHandleFUCHSIA>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryZirconHandleFUCHSIA>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetMemoryZirconHandleFUCHSIA_PreCall func = reinterpret_cast<plugins::PFN_GetMemoryZirconHandleFUCHSIA_PreCall>( plugin.funcs_pre["GetMemoryZirconHandleFUCHSIA_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryZirconHandleFUCHSIA>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryZirconHandleFUCHSIA>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryZirconHandleFUCHSIA>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryZirconHandleFUCHSIA>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryZirconHandleFUCHSIA>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryZirconHandleFUCHSIA>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryZirconHandlePropertiesFUCHSIA>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryZirconHandlePropertiesFUCHSIA>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetMemoryZirconHandlePropertiesFUCHSIA_PreCall func = reinterpret_cast<plugins::PFN_GetMemoryZirconHandlePropertiesFUCHSIA_PreCall>( plugin.funcs_pre["GetMemoryZirconHandlePropertiesFUCHSIA_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryZirconHandlePropertiesFUCHSIA>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryZirconHandlePropertiesFUCHSIA>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryZirconHandlePropertiesFUCHSIA>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryZirconHandlePropertiesFUCHSIA>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryZirconHandlePropertiesFUCHSIA>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryZirconHandlePropertiesFUCHSIA>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkImportSemaphoreZirconHandleFUCHSIA>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkImportSemaphoreZirconHandleFUCHSIA>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ImportSemaphoreZirconHandleFUCHSIA_PreCall func = reinterpret_cast<plugins::PFN_ImportSemaphoreZirconHandleFUCHSIA_PreCall>( plugin.funcs_pre["ImportSemaphoreZirconHandleFUCHSIA_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkImportSemaphoreZirconHandleFUCHSIA>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkImportSemaphoreZirconHandleFUCHSIA>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkImportSemaphoreZirconHandleFUCHSIA>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkImportSemaphoreZirconHandleFUCHSIA>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkImportSemaphoreZirconHandleFUCHSIA>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkImportSemaphoreZirconHandleFUCHSIA>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetSemaphoreZirconHandleFUCHSIA>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetSemaphoreZirconHandleFUCHSIA>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetSemaphoreZirconHandleFUCHSIA_PreCall func = reinterpret_cast<plugins::PFN_GetSemaphoreZirconHandleFUCHSIA_PreCall>( plugin.funcs_pre["GetSemaphoreZirconHandleFUCHSIA_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetSemaphoreZirconHandleFUCHSIA>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreZirconHandleFUCHSIA>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreZirconHandleFUCHSIA>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreZirconHandleFUCHSIA>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreZirconHandleFUCHSIA>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetSemaphoreZirconHandleFUCHSIA>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPatchControlPointsEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPatchControlPointsEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetPatchControlPointsEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetPatchControlPointsEXT_PreCall>( plugin.funcs_pre["CmdSetPatchControlPointsEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPatchControlPointsEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPatchControlPointsEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPatchControlPointsEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPatchControlPointsEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPatchControlPointsEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPatchControlPointsEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRasterizerDiscardEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRasterizerDiscardEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetRasterizerDiscardEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetRasterizerDiscardEnableEXT_PreCall>( plugin.funcs_pre["CmdSetRasterizerDiscardEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRasterizerDiscardEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizerDiscardEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizerDiscardEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizerDiscardEnableEXT>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizerDiscardEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizerDiscardEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBiasEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBiasEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDepthBiasEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDepthBiasEnableEXT_PreCall>( plugin.funcs_pre["CmdSetDepthBiasEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBiasEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBiasEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBiasEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBiasEnableEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBiasEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBiasEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLogicOpEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLogicOpEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetLogicOpEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetLogicOpEXT_PreCall>( plugin.funcs_pre["CmdSetLogicOpEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLogicOpEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLogicOpEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLogicOpEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLogicOpEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLogicOpEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLogicOpEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveRestartEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveRestartEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetPrimitiveRestartEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetPrimitiveRestartEnableEXT_PreCall>( plugin.funcs_pre["CmdSetPrimitiveRestartEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveRestartEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveRestartEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveRestartEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveRestartEnableEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveRestartEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveRestartEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateScreenSurfaceQNX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateScreenSurfaceQNX>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateScreenSurfaceQNX_PreCall func = reinterpret_cast<plugins::PFN_CreateScreenSurfaceQNX_PreCall>( plugin.funcs_pre["CreateScreenSurfaceQNX_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateScreenSurfaceQNX>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateScreenSurfaceQNX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateScreenSurfaceQNX>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateScreenSurfaceQNX>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateScreenSurfaceQNX>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateScreenSurfaceQNX>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceScreenPresentationSupportQNX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceScreenPresentationSupportQNX>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceScreenPresentationSupportQNX_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceScreenPresentationSupportQNX_PreCall>( plugin.funcs_pre["GetPhysicalDeviceScreenPresentationSupportQNX_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceScreenPresentationSupportQNX>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceScreenPresentationSupportQNX>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceScreenPresentationSupportQNX>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceScreenPresentationSupportQNX>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceScreenPresentationSupportQNX>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceScreenPresentationSupportQNX>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetColorWriteEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetColorWriteEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetColorWriteEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetColorWriteEnableEXT_PreCall>( plugin.funcs_pre["CmdSetColorWriteEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetColorWriteEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorWriteEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorWriteEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorWriteEnableEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorWriteEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorWriteEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkAcquireDrmDisplayEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkAcquireDrmDisplayEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_AcquireDrmDisplayEXT_PreCall func = reinterpret_cast<plugins::PFN_AcquireDrmDisplayEXT_PreCall>( plugin.funcs_pre["AcquireDrmDisplayEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkAcquireDrmDisplayEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkAcquireDrmDisplayEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireDrmDisplayEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireDrmDisplayEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireDrmDisplayEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkAcquireDrmDisplayEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDrmDisplayEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDrmDisplayEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDrmDisplayEXT_PreCall func = reinterpret_cast<plugins::PFN_GetDrmDisplayEXT_PreCall>( plugin.funcs_pre["GetDrmDisplayEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDrmDisplayEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDrmDisplayEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDrmDisplayEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDrmDisplayEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDrmDisplayEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDrmDisplayEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMultiEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMultiEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawMultiEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawMultiEXT_PreCall>( plugin.funcs_pre["CmdDrawMultiEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMultiEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMultiEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMultiEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMultiEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMultiEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMultiEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMultiIndexedEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMultiIndexedEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawMultiIndexedEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawMultiIndexedEXT_PreCall>( plugin.funcs_pre["CmdDrawMultiIndexedEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMultiIndexedEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMultiIndexedEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMultiIndexedEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMultiIndexedEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMultiIndexedEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMultiIndexedEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkWaitForPresentKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkWaitForPresentKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_WaitForPresentKHR_PreCall func = reinterpret_cast<plugins::PFN_WaitForPresentKHR_PreCall>( plugin.funcs_pre["WaitForPresentKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkWaitForPresentKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkWaitForPresentKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkWaitForPresentKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkWaitForPresentKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkWaitForPresentKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkWaitForPresentKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindInvocationMaskHUAWEI>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindInvocationMaskHUAWEI>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBindInvocationMaskHUAWEI_PreCall func = reinterpret_cast<plugins::PFN_CmdBindInvocationMaskHUAWEI_PreCall>( plugin.funcs_pre["CmdBindInvocationMaskHUAWEI_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindInvocationMaskHUAWEI>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindInvocationMaskHUAWEI>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindInvocationMaskHUAWEI>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindInvocationMaskHUAWEI>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindInvocationMaskHUAWEI>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindInvocationMaskHUAWEI>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryRemoteAddressNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryRemoteAddressNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetMemoryRemoteAddressNV_PreCall func = reinterpret_cast<plugins::PFN_GetMemoryRemoteAddressNV_PreCall>( plugin.funcs_pre["GetMemoryRemoteAddressNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetMemoryRemoteAddressNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryRemoteAddressNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryRemoteAddressNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryRemoteAddressNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryRemoteAddressNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMemoryRemoteAddressNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceBufferMemoryRequirementsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceBufferMemoryRequirementsKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceBufferMemoryRequirementsKHR_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceBufferMemoryRequirementsKHR_PreCall>( plugin.funcs_pre["GetDeviceBufferMemoryRequirementsKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceBufferMemoryRequirementsKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceBufferMemoryRequirementsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceBufferMemoryRequirementsKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceBufferMemoryRequirementsKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceBufferMemoryRequirementsKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceBufferMemoryRequirementsKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceImageMemoryRequirementsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceImageMemoryRequirementsKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceImageMemoryRequirementsKHR_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceImageMemoryRequirementsKHR_PreCall>( plugin.funcs_pre["GetDeviceImageMemoryRequirementsKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceImageMemoryRequirementsKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageMemoryRequirementsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageMemoryRequirementsKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageMemoryRequirementsKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageMemoryRequirementsKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageMemoryRequirementsKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceImageSparseMemoryRequirementsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceImageSparseMemoryRequirementsKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceImageSparseMemoryRequirementsKHR_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceImageSparseMemoryRequirementsKHR_PreCall>( plugin.funcs_pre["GetDeviceImageSparseMemoryRequirementsKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceImageSparseMemoryRequirementsKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageSparseMemoryRequirementsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageSparseMemoryRequirementsKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageSparseMemoryRequirementsKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageSparseMemoryRequirementsKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageSparseMemoryRequirementsKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkSetDeviceMemoryPriorityEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkSetDeviceMemoryPriorityEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_SetDeviceMemoryPriorityEXT_PreCall func = reinterpret_cast<plugins::PFN_SetDeviceMemoryPriorityEXT_PreCall>( plugin.funcs_pre["SetDeviceMemoryPriorityEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkSetDeviceMemoryPriorityEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkSetDeviceMemoryPriorityEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSetDeviceMemoryPriorityEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSetDeviceMemoryPriorityEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSetDeviceMemoryPriorityEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSetDeviceMemoryPriorityEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginRenderingKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginRenderingKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBeginRenderingKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdBeginRenderingKHR_PreCall>( plugin.funcs_pre["CmdBeginRenderingKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginRenderingKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderingKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderingKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderingKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderingKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRenderingKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndRenderingKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndRenderingKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdEndRenderingKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdEndRenderingKHR_PreCall>( plugin.funcs_pre["CmdEndRenderingKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndRenderingKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderingKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderingKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderingKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderingKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRenderingKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceToolProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceToolProperties>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceToolProperties_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceToolProperties_PreCall>( plugin.funcs_pre["GetPhysicalDeviceToolProperties_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceToolProperties>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceToolProperties>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceToolProperties>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceToolProperties>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceToolProperties>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceToolProperties>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreatePrivateDataSlot>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreatePrivateDataSlot>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreatePrivateDataSlot_PreCall func = reinterpret_cast<plugins::PFN_CreatePrivateDataSlot_PreCall>( plugin.funcs_pre["CreatePrivateDataSlot_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreatePrivateDataSlot>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreatePrivateDataSlot>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreatePrivateDataSlot>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreatePrivateDataSlot>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreatePrivateDataSlot>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreatePrivateDataSlot>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyPrivateDataSlot>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyPrivateDataSlot>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyPrivateDataSlot_PreCall func = reinterpret_cast<plugins::PFN_DestroyPrivateDataSlot_PreCall>( plugin.funcs_pre["DestroyPrivateDataSlot_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyPrivateDataSlot>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPrivateDataSlot>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPrivateDataSlot>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPrivateDataSlot>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPrivateDataSlot>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyPrivateDataSlot>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkSetPrivateData>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkSetPrivateData>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_SetPrivateData_PreCall func = reinterpret_cast<plugins::PFN_SetPrivateData_PreCall>( plugin.funcs_pre["SetPrivateData_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkSetPrivateData>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkSetPrivateData>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSetPrivateData>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSetPrivateData>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkSetPrivateData>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkSetPrivateData>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPrivateData>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPrivateData>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPrivateData_PreCall func = reinterpret_cast<plugins::PFN_GetPrivateData_PreCall>( plugin.funcs_pre["GetPrivateData_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPrivateData>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPrivateData>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPrivateData>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPrivateData>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPrivateData>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPrivateData>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetEvent2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetEvent2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetEvent2_PreCall func = reinterpret_cast<plugins::PFN_CmdSetEvent2_PreCall>( plugin.funcs_pre["CmdSetEvent2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetEvent2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetEvent2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetEvent2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetEvent2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetEvent2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetEvent2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdResetEvent2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdResetEvent2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdResetEvent2_PreCall func = reinterpret_cast<plugins::PFN_CmdResetEvent2_PreCall>( plugin.funcs_pre["CmdResetEvent2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdResetEvent2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetEvent2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetEvent2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetEvent2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetEvent2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResetEvent2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdWaitEvents2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWaitEvents2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdWaitEvents2_PreCall func = reinterpret_cast<plugins::PFN_CmdWaitEvents2_PreCall>( plugin.funcs_pre["CmdWaitEvents2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWaitEvents2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdWaitEvents2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWaitEvents2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWaitEvents2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWaitEvents2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWaitEvents2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdPipelineBarrier2_PreCall func = reinterpret_cast<plugins::PFN_CmdPipelineBarrier2_PreCall>( plugin.funcs_pre["CmdPipelineBarrier2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdPipelineBarrier2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdWriteTimestamp2_PreCall func = reinterpret_cast<plugins::PFN_CmdWriteTimestamp2_PreCall>( plugin.funcs_pre["CmdWriteTimestamp2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteTimestamp2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkQueueSubmit2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkQueueSubmit2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_QueueSubmit2_PreCall func = reinterpret_cast<plugins::PFN_QueueSubmit2_PreCall>( plugin.funcs_pre["QueueSubmit2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkQueueSubmit2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkQueueSubmit2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueSubmit2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueSubmit2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkQueueSubmit2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkQueueSubmit2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyBuffer2_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyBuffer2_PreCall>( plugin.funcs_pre["CmdCopyBuffer2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBuffer2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImage2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImage2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyImage2_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyImage2_PreCall>( plugin.funcs_pre["CmdCopyImage2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImage2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImage2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImage2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImage2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImage2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImage2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyBufferToImage2_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyBufferToImage2_PreCall>( plugin.funcs_pre["CmdCopyBufferToImage2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyBufferToImage2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyImageToBuffer2_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyImageToBuffer2_PreCall>( plugin.funcs_pre["CmdCopyImageToBuffer2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyImageToBuffer2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBlitImage2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBlitImage2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBlitImage2_PreCall func = reinterpret_cast<plugins::PFN_CmdBlitImage2_PreCall>( plugin.funcs_pre["CmdBlitImage2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBlitImage2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBlitImage2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBlitImage2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBlitImage2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBlitImage2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBlitImage2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdResolveImage2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdResolveImage2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdResolveImage2_PreCall func = reinterpret_cast<plugins::PFN_CmdResolveImage2_PreCall>( plugin.funcs_pre["CmdResolveImage2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdResolveImage2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdResolveImage2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResolveImage2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResolveImage2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResolveImage2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdResolveImage2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginRendering>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginRendering>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBeginRendering_PreCall func = reinterpret_cast<plugins::PFN_CmdBeginRendering_PreCall>( plugin.funcs_pre["CmdBeginRendering_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginRendering>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRendering>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRendering>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRendering>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRendering>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginRendering>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndRendering>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndRendering>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdEndRendering_PreCall func = reinterpret_cast<plugins::PFN_CmdEndRendering_PreCall>( plugin.funcs_pre["CmdEndRendering_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndRendering>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRendering>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRendering>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRendering>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRendering>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndRendering>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCullMode>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCullMode>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetCullMode_PreCall func = reinterpret_cast<plugins::PFN_CmdSetCullMode_PreCall>( plugin.funcs_pre["CmdSetCullMode_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCullMode>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCullMode>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCullMode>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCullMode>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCullMode>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCullMode>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetFrontFace>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetFrontFace>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetFrontFace_PreCall func = reinterpret_cast<plugins::PFN_CmdSetFrontFace_PreCall>( plugin.funcs_pre["CmdSetFrontFace_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetFrontFace>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFrontFace>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFrontFace>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFrontFace>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFrontFace>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetFrontFace>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveTopology>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveTopology>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetPrimitiveTopology_PreCall func = reinterpret_cast<plugins::PFN_CmdSetPrimitiveTopology_PreCall>( plugin.funcs_pre["CmdSetPrimitiveTopology_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveTopology>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveTopology>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveTopology>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveTopology>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveTopology>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveTopology>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportWithCount>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportWithCount>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetViewportWithCount_PreCall func = reinterpret_cast<plugins::PFN_CmdSetViewportWithCount_PreCall>( plugin.funcs_pre["CmdSetViewportWithCount_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportWithCount>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWithCount>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWithCount>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWithCount>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWithCount>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWithCount>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetScissorWithCount>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetScissorWithCount>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetScissorWithCount_PreCall func = reinterpret_cast<plugins::PFN_CmdSetScissorWithCount_PreCall>( plugin.funcs_pre["CmdSetScissorWithCount_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetScissorWithCount>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetScissorWithCount>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetScissorWithCount>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetScissorWithCount>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetScissorWithCount>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetScissorWithCount>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers2>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBindVertexBuffers2_PreCall func = reinterpret_cast<plugins::PFN_CmdBindVertexBuffers2_PreCall>( plugin.funcs_pre["CmdBindVertexBuffers2_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers2>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers2>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers2>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers2>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers2>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBindVertexBuffers2>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthTestEnable>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthTestEnable>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDepthTestEnable_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDepthTestEnable_PreCall>( plugin.funcs_pre["CmdSetDepthTestEnable_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthTestEnable>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthTestEnable>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthTestEnable>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthTestEnable>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthTestEnable>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthTestEnable>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthWriteEnable>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthWriteEnable>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDepthWriteEnable_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDepthWriteEnable_PreCall>( plugin.funcs_pre["CmdSetDepthWriteEnable_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthWriteEnable>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthWriteEnable>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthWriteEnable>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthWriteEnable>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthWriteEnable>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthWriteEnable>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthCompareOp>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthCompareOp>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDepthCompareOp_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDepthCompareOp_PreCall>( plugin.funcs_pre["CmdSetDepthCompareOp_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthCompareOp>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthCompareOp>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthCompareOp>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthCompareOp>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthCompareOp>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthCompareOp>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBoundsTestEnable>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBoundsTestEnable>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDepthBoundsTestEnable_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDepthBoundsTestEnable_PreCall>( plugin.funcs_pre["CmdSetDepthBoundsTestEnable_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBoundsTestEnable>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBoundsTestEnable>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBoundsTestEnable>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBoundsTestEnable>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBoundsTestEnable>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBoundsTestEnable>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilTestEnable>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilTestEnable>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetStencilTestEnable_PreCall func = reinterpret_cast<plugins::PFN_CmdSetStencilTestEnable_PreCall>( plugin.funcs_pre["CmdSetStencilTestEnable_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilTestEnable>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilTestEnable>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilTestEnable>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilTestEnable>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilTestEnable>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilTestEnable>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilOp>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilOp>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetStencilOp_PreCall func = reinterpret_cast<plugins::PFN_CmdSetStencilOp_PreCall>( plugin.funcs_pre["CmdSetStencilOp_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetStencilOp>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilOp>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilOp>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilOp>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilOp>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetStencilOp>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRasterizerDiscardEnable>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRasterizerDiscardEnable>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetRasterizerDiscardEnable_PreCall func = reinterpret_cast<plugins::PFN_CmdSetRasterizerDiscardEnable_PreCall>( plugin.funcs_pre["CmdSetRasterizerDiscardEnable_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRasterizerDiscardEnable>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizerDiscardEnable>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizerDiscardEnable>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizerDiscardEnable>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizerDiscardEnable>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizerDiscardEnable>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBiasEnable>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBiasEnable>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDepthBiasEnable_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDepthBiasEnable_PreCall>( plugin.funcs_pre["CmdSetDepthBiasEnable_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthBiasEnable>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBiasEnable>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBiasEnable>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBiasEnable>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBiasEnable>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthBiasEnable>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveRestartEnable>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveRestartEnable>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetPrimitiveRestartEnable_PreCall func = reinterpret_cast<plugins::PFN_CmdSetPrimitiveRestartEnable_PreCall>( plugin.funcs_pre["CmdSetPrimitiveRestartEnable_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveRestartEnable>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveRestartEnable>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveRestartEnable>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveRestartEnable>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveRestartEnable>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPrimitiveRestartEnable>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceBufferMemoryRequirements>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceBufferMemoryRequirements>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceBufferMemoryRequirements_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceBufferMemoryRequirements_PreCall>( plugin.funcs_pre["GetDeviceBufferMemoryRequirements_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceBufferMemoryRequirements>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceBufferMemoryRequirements>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceBufferMemoryRequirements>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceBufferMemoryRequirements>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceBufferMemoryRequirements>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceBufferMemoryRequirements>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceImageMemoryRequirements>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceImageMemoryRequirements>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceImageMemoryRequirements_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceImageMemoryRequirements_PreCall>( plugin.funcs_pre["GetDeviceImageMemoryRequirements_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceImageMemoryRequirements>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageMemoryRequirements>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageMemoryRequirements>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageMemoryRequirements>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageMemoryRequirements>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageMemoryRequirements>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceImageSparseMemoryRequirements>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceImageSparseMemoryRequirementsKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceImageSparseMemoryRequirements_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceImageSparseMemoryRequirements_PreCall>( plugin.funcs_pre["GetDeviceImageSparseMemoryRequirements_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceImageSparseMemoryRequirements>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageSparseMemoryRequirements>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageSparseMemoryRequirementsKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageSparseMemoryRequirements>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageSparseMemoryRequirementsKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceImageSparseMemoryRequirements>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutHostMappingInfoVALVE>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutHostMappingInfoVALVE>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDescriptorSetLayoutHostMappingInfoVALVE_PreCall func = reinterpret_cast<plugins::PFN_GetDescriptorSetLayoutHostMappingInfoVALVE_PreCall>( plugin.funcs_pre["GetDescriptorSetLayoutHostMappingInfoVALVE_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutHostMappingInfoVALVE>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutHostMappingInfoVALVE>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutHostMappingInfoVALVE>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutHostMappingInfoVALVE>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutHostMappingInfoVALVE>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetLayoutHostMappingInfoVALVE>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDescriptorSetHostMappingVALVE>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDescriptorSetHostMappingVALVE>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDescriptorSetHostMappingVALVE_PreCall func = reinterpret_cast<plugins::PFN_GetDescriptorSetHostMappingVALVE_PreCall>( plugin.funcs_pre["GetDescriptorSetHostMappingVALVE_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDescriptorSetHostMappingVALVE>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetHostMappingVALVE>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetHostMappingVALVE>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetHostMappingVALVE>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetHostMappingVALVE>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDescriptorSetHostMappingVALVE>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdTraceRaysIndirect2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdTraceRaysIndirect2KHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdTraceRaysIndirect2KHR_PreCall func = reinterpret_cast<plugins::PFN_CmdTraceRaysIndirect2KHR_PreCall>( plugin.funcs_pre["CmdTraceRaysIndirect2KHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdTraceRaysIndirect2KHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysIndirect2KHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysIndirect2KHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysIndirect2KHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysIndirect2KHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdTraceRaysIndirect2KHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetImageSubresourceLayout2EXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageSubresourceLayout2EXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetImageSubresourceLayout2EXT_PreCall func = reinterpret_cast<plugins::PFN_GetImageSubresourceLayout2EXT_PreCall>( plugin.funcs_pre["GetImageSubresourceLayout2EXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetImageSubresourceLayout2EXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSubresourceLayout2EXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSubresourceLayout2EXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSubresourceLayout2EXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSubresourceLayout2EXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetImageSubresourceLayout2EXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPipelinePropertiesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPipelinePropertiesEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            // plugins::PFN_GetPipelinePropertiesEXT_PreCall func = reinterpret_cast<plugins::PFN_GetPipelinePropertiesEXT_PreCall>( plugin.funcs_pre["GetPipelinePropertiesEXT_PreCall"]);
            // if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPipelinePropertiesEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelinePropertiesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelinePropertiesEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelinePropertiesEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelinePropertiesEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPipelinePropertiesEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetShaderModuleIdentifierEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetShaderModuleIdentifierEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetShaderModuleIdentifierEXT_PreCall func = reinterpret_cast<plugins::PFN_GetShaderModuleIdentifierEXT_PreCall>( plugin.funcs_pre["GetShaderModuleIdentifierEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetShaderModuleIdentifierEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetShaderModuleIdentifierEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetShaderModuleIdentifierEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetShaderModuleIdentifierEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetShaderModuleIdentifierEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetShaderModuleIdentifierEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetShaderModuleCreateInfoIdentifierEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetShaderModuleCreateInfoIdentifierEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetShaderModuleCreateInfoIdentifierEXT_PreCall func = reinterpret_cast<plugins::PFN_GetShaderModuleCreateInfoIdentifierEXT_PreCall>( plugin.funcs_pre["GetShaderModuleCreateInfoIdentifierEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetShaderModuleCreateInfoIdentifierEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetShaderModuleCreateInfoIdentifierEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetShaderModuleCreateInfoIdentifierEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetShaderModuleCreateInfoIdentifierEXT>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetShaderModuleCreateInfoIdentifierEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetShaderModuleCreateInfoIdentifierEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetFramebufferTilePropertiesQCOM>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetFramebufferTilePropertiesQCOM>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetFramebufferTilePropertiesQCOM_PreCall func = reinterpret_cast<plugins::PFN_GetFramebufferTilePropertiesQCOM_PreCall>( plugin.funcs_pre["GetFramebufferTilePropertiesQCOM_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetFramebufferTilePropertiesQCOM>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetFramebufferTilePropertiesQCOM>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetFramebufferTilePropertiesQCOM>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetFramebufferTilePropertiesQCOM>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetFramebufferTilePropertiesQCOM>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetFramebufferTilePropertiesQCOM>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDynamicRenderingTilePropertiesQCOM>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDynamicRenderingTilePropertiesQCOM>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDynamicRenderingTilePropertiesQCOM_PreCall func = reinterpret_cast<plugins::PFN_GetDynamicRenderingTilePropertiesQCOM_PreCall>( plugin.funcs_pre["GetDynamicRenderingTilePropertiesQCOM_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDynamicRenderingTilePropertiesQCOM>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDynamicRenderingTilePropertiesQCOM>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDynamicRenderingTilePropertiesQCOM>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDynamicRenderingTilePropertiesQCOM>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDynamicRenderingTilePropertiesQCOM>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDynamicRenderingTilePropertiesQCOM>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceFaultInfoEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceFaultInfoEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceFaultInfoEXT_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceFaultInfoEXT_PreCall>( plugin.funcs_pre["GetDeviceFaultInfoEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceFaultInfoEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceFaultInfoEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceFaultInfoEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceFaultInfoEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceFaultInfoEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceFaultInfoEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateMicromapEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateMicromapEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateMicromapEXT_PreCall func = reinterpret_cast<plugins::PFN_CreateMicromapEXT_PreCall>( plugin.funcs_pre["CreateMicromapEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateMicromapEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateMicromapEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateMicromapEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateMicromapEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateMicromapEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateMicromapEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyMicromapEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyMicromapEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyMicromapEXT_PreCall func = reinterpret_cast<plugins::PFN_DestroyMicromapEXT_PreCall>( plugin.funcs_pre["DestroyMicromapEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyMicromapEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyMicromapEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyMicromapEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyMicromapEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyMicromapEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyMicromapEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBuildMicromapsEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBuildMicromapsEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBuildMicromapsEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdBuildMicromapsEXT_PreCall>( plugin.funcs_pre["CmdBuildMicromapsEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBuildMicromapsEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildMicromapsEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildMicromapsEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildMicromapsEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildMicromapsEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBuildMicromapsEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkBuildMicromapsEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkBuildMicromapsEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_BuildMicromapsEXT_PreCall func = reinterpret_cast<plugins::PFN_BuildMicromapsEXT_PreCall>( plugin.funcs_pre["BuildMicromapsEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkBuildMicromapsEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkBuildMicromapsEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBuildMicromapsEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBuildMicromapsEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBuildMicromapsEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBuildMicromapsEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCopyMicromapEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCopyMicromapEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CopyMicromapEXT_PreCall func = reinterpret_cast<plugins::PFN_CopyMicromapEXT_PreCall>( plugin.funcs_pre["CopyMicromapEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCopyMicromapEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCopyMicromapEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCopyMicromapEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCopyMicromapEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCopyMicromapEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCopyMicromapEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCopyMicromapToMemoryEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCopyMicromapToMemoryEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CopyMicromapToMemoryEXT_PreCall func = reinterpret_cast<plugins::PFN_CopyMicromapToMemoryEXT_PreCall>( plugin.funcs_pre["CopyMicromapToMemoryEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCopyMicromapToMemoryEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCopyMicromapToMemoryEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCopyMicromapToMemoryEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCopyMicromapToMemoryEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCopyMicromapToMemoryEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCopyMicromapToMemoryEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCopyMemoryToMicromapEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCopyMemoryToMicromapEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CopyMemoryToMicromapEXT_PreCall func = reinterpret_cast<plugins::PFN_CopyMemoryToMicromapEXT_PreCall>( plugin.funcs_pre["CopyMemoryToMicromapEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCopyMemoryToMicromapEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCopyMemoryToMicromapEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCopyMemoryToMicromapEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCopyMemoryToMicromapEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCopyMemoryToMicromapEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCopyMemoryToMicromapEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkWriteMicromapsPropertiesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkWriteMicromapsPropertiesEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_WriteMicromapsPropertiesEXT_PreCall func = reinterpret_cast<plugins::PFN_WriteMicromapsPropertiesEXT_PreCall>( plugin.funcs_pre["WriteMicromapsPropertiesEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkWriteMicromapsPropertiesEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkWriteMicromapsPropertiesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkWriteMicromapsPropertiesEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkWriteMicromapsPropertiesEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkWriteMicromapsPropertiesEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkWriteMicromapsPropertiesEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyMicromapEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyMicromapEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyMicromapEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyMicromapEXT_PreCall>( plugin.funcs_pre["CmdCopyMicromapEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyMicromapEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMicromapEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMicromapEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMicromapEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMicromapEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMicromapEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyMicromapToMemoryEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyMicromapToMemoryEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyMicromapToMemoryEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyMicromapToMemoryEXT_PreCall>( plugin.funcs_pre["CmdCopyMicromapToMemoryEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyMicromapToMemoryEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMicromapToMemoryEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMicromapToMemoryEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMicromapToMemoryEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMicromapToMemoryEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMicromapToMemoryEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyMemoryToMicromapEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyMemoryToMicromapEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdCopyMemoryToMicromapEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdCopyMemoryToMicromapEXT_PreCall>( plugin.funcs_pre["CmdCopyMemoryToMicromapEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdCopyMemoryToMicromapEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMemoryToMicromapEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMemoryToMicromapEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMemoryToMicromapEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMemoryToMicromapEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdCopyMemoryToMicromapEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteMicromapsPropertiesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteMicromapsPropertiesEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdWriteMicromapsPropertiesEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdWriteMicromapsPropertiesEXT_PreCall>( plugin.funcs_pre["CmdWriteMicromapsPropertiesEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdWriteMicromapsPropertiesEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteMicromapsPropertiesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteMicromapsPropertiesEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteMicromapsPropertiesEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteMicromapsPropertiesEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdWriteMicromapsPropertiesEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceMicromapCompatibilityEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceMicromapCompatibilityEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetDeviceMicromapCompatibilityEXT_PreCall func = reinterpret_cast<plugins::PFN_GetDeviceMicromapCompatibilityEXT_PreCall>( plugin.funcs_pre["GetDeviceMicromapCompatibilityEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetDeviceMicromapCompatibilityEXT>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMicromapCompatibilityEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMicromapCompatibilityEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMicromapCompatibilityEXT>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMicromapCompatibilityEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetDeviceMicromapCompatibilityEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetMicromapBuildSizesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetMicromapBuildSizesEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetMicromapBuildSizesEXT_PreCall func = reinterpret_cast<plugins::PFN_GetMicromapBuildSizesEXT_PreCall>( plugin.funcs_pre["GetMicromapBuildSizesEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetMicromapBuildSizesEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetMicromapBuildSizesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMicromapBuildSizesEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMicromapBuildSizesEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetMicromapBuildSizesEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetMicromapBuildSizesEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetTessellationDomainOriginEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetTessellationDomainOriginEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetTessellationDomainOriginEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetTessellationDomainOriginEXT_PreCall>( plugin.funcs_pre["CmdSetTessellationDomainOriginEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetTessellationDomainOriginEXT>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetTessellationDomainOriginEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetTessellationDomainOriginEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetTessellationDomainOriginEXT>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetTessellationDomainOriginEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetTessellationDomainOriginEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthClampEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthClampEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDepthClampEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDepthClampEnableEXT_PreCall>( plugin.funcs_pre["CmdSetDepthClampEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthClampEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthClampEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthClampEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthClampEnableEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthClampEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthClampEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPolygonModeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPolygonModeEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetPolygonModeEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetPolygonModeEXT_PreCall>( plugin.funcs_pre["CmdSetPolygonModeEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetPolygonModeEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPolygonModeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPolygonModeEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPolygonModeEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPolygonModeEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetPolygonModeEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRasterizationSamplesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRasterizationSamplesEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetRasterizationSamplesEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetRasterizationSamplesEXT_PreCall>( plugin.funcs_pre["CmdSetRasterizationSamplesEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRasterizationSamplesEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizationSamplesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizationSamplesEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizationSamplesEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizationSamplesEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizationSamplesEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetSampleMaskEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetSampleMaskEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetSampleMaskEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetSampleMaskEXT_PreCall>( plugin.funcs_pre["CmdSetSampleMaskEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetSampleMaskEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetSampleMaskEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetSampleMaskEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetSampleMaskEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetSampleMaskEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetSampleMaskEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetAlphaToCoverageEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetAlphaToCoverageEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetAlphaToCoverageEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetAlphaToCoverageEnableEXT_PreCall>( plugin.funcs_pre["CmdSetAlphaToCoverageEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetAlphaToCoverageEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetAlphaToCoverageEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetAlphaToCoverageEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetAlphaToCoverageEnableEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetAlphaToCoverageEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetAlphaToCoverageEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetAlphaToOneEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetAlphaToOneEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetAlphaToOneEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetAlphaToOneEnableEXT_PreCall>( plugin.funcs_pre["CmdSetAlphaToOneEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetAlphaToOneEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetAlphaToOneEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetAlphaToOneEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetAlphaToOneEnableEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetAlphaToOneEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetAlphaToOneEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLogicOpEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLogicOpEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetLogicOpEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetLogicOpEnableEXT_PreCall>( plugin.funcs_pre["CmdSetLogicOpEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLogicOpEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLogicOpEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLogicOpEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLogicOpEnableEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLogicOpEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLogicOpEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetColorBlendEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetColorBlendEnableEXT_PreCall>( plugin.funcs_pre["CmdSetColorBlendEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendEnableEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendEquationEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendEquationEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetColorBlendEquationEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetColorBlendEquationEXT_PreCall>( plugin.funcs_pre["CmdSetColorBlendEquationEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendEquationEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendEquationEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendEquationEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendEquationEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendEquationEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendEquationEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetColorWriteMaskEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetColorWriteMaskEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetColorWriteMaskEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetColorWriteMaskEXT_PreCall>( plugin.funcs_pre["CmdSetColorWriteMaskEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetColorWriteMaskEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorWriteMaskEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorWriteMaskEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorWriteMaskEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorWriteMaskEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorWriteMaskEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRasterizationStreamEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRasterizationStreamEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetRasterizationStreamEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetRasterizationStreamEXT_PreCall>( plugin.funcs_pre["CmdSetRasterizationStreamEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRasterizationStreamEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizationStreamEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizationStreamEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizationStreamEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizationStreamEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRasterizationStreamEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetConservativeRasterizationModeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetConservativeRasterizationModeEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetConservativeRasterizationModeEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetConservativeRasterizationModeEXT_PreCall>( plugin.funcs_pre["CmdSetConservativeRasterizationModeEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetConservativeRasterizationModeEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetConservativeRasterizationModeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetConservativeRasterizationModeEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetConservativeRasterizationModeEXT>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetConservativeRasterizationModeEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetConservativeRasterizationModeEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetExtraPrimitiveOverestimationSizeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetExtraPrimitiveOverestimationSizeEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetExtraPrimitiveOverestimationSizeEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetExtraPrimitiveOverestimationSizeEXT_PreCall>( plugin.funcs_pre["CmdSetExtraPrimitiveOverestimationSizeEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetExtraPrimitiveOverestimationSizeEXT>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetExtraPrimitiveOverestimationSizeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetExtraPrimitiveOverestimationSizeEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetExtraPrimitiveOverestimationSizeEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetExtraPrimitiveOverestimationSizeEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetExtraPrimitiveOverestimationSizeEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthClipEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthClipEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDepthClipEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDepthClipEnableEXT_PreCall>( plugin.funcs_pre["CmdSetDepthClipEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthClipEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthClipEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthClipEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthClipEnableEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthClipEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthClipEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetSampleLocationsEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetSampleLocationsEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetSampleLocationsEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetSampleLocationsEnableEXT_PreCall>( plugin.funcs_pre["CmdSetSampleLocationsEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetSampleLocationsEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetSampleLocationsEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetSampleLocationsEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetSampleLocationsEnableEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetSampleLocationsEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetSampleLocationsEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendAdvancedEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendAdvancedEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetColorBlendAdvancedEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetColorBlendAdvancedEXT_PreCall>( plugin.funcs_pre["CmdSetColorBlendAdvancedEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendAdvancedEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendAdvancedEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendAdvancedEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendAdvancedEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendAdvancedEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetColorBlendAdvancedEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetProvokingVertexModeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetProvokingVertexModeEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetProvokingVertexModeEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetProvokingVertexModeEXT_PreCall>( plugin.funcs_pre["CmdSetProvokingVertexModeEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetProvokingVertexModeEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetProvokingVertexModeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetProvokingVertexModeEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetProvokingVertexModeEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetProvokingVertexModeEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetProvokingVertexModeEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLineRasterizationModeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLineRasterizationModeEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetLineRasterizationModeEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetLineRasterizationModeEXT_PreCall>( plugin.funcs_pre["CmdSetLineRasterizationModeEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLineRasterizationModeEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineRasterizationModeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineRasterizationModeEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineRasterizationModeEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineRasterizationModeEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineRasterizationModeEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLineStippleEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLineStippleEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetLineStippleEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetLineStippleEnableEXT_PreCall>( plugin.funcs_pre["CmdSetLineStippleEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetLineStippleEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineStippleEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineStippleEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineStippleEnableEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineStippleEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetLineStippleEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthClipNegativeOneToOneEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthClipNegativeOneToOneEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDepthClipNegativeOneToOneEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDepthClipNegativeOneToOneEXT_PreCall>( plugin.funcs_pre["CmdSetDepthClipNegativeOneToOneEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDepthClipNegativeOneToOneEXT>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthClipNegativeOneToOneEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthClipNegativeOneToOneEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthClipNegativeOneToOneEXT>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthClipNegativeOneToOneEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDepthClipNegativeOneToOneEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportWScalingEnableNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportWScalingEnableNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetViewportWScalingEnableNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetViewportWScalingEnableNV_PreCall>( plugin.funcs_pre["CmdSetViewportWScalingEnableNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportWScalingEnableNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWScalingEnableNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWScalingEnableNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWScalingEnableNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWScalingEnableNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportWScalingEnableNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportSwizzleNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportSwizzleNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetViewportSwizzleNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetViewportSwizzleNV_PreCall>( plugin.funcs_pre["CmdSetViewportSwizzleNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetViewportSwizzleNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportSwizzleNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportSwizzleNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportSwizzleNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportSwizzleNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetViewportSwizzleNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageToColorEnableNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageToColorEnableNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetCoverageToColorEnableNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetCoverageToColorEnableNV_PreCall>( plugin.funcs_pre["CmdSetCoverageToColorEnableNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageToColorEnableNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageToColorEnableNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageToColorEnableNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageToColorEnableNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageToColorEnableNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageToColorEnableNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageToColorLocationNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageToColorLocationNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetCoverageToColorLocationNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetCoverageToColorLocationNV_PreCall>( plugin.funcs_pre["CmdSetCoverageToColorLocationNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageToColorLocationNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageToColorLocationNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageToColorLocationNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageToColorLocationNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageToColorLocationNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageToColorLocationNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationModeNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationModeNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetCoverageModulationModeNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetCoverageModulationModeNV_PreCall>( plugin.funcs_pre["CmdSetCoverageModulationModeNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationModeNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationModeNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationModeNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationModeNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationModeNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationModeNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationTableEnableNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationTableEnableNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetCoverageModulationTableEnableNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetCoverageModulationTableEnableNV_PreCall>( plugin.funcs_pre["CmdSetCoverageModulationTableEnableNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationTableEnableNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationTableEnableNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationTableEnableNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationTableEnableNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationTableEnableNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationTableEnableNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationTableNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationTableNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetCoverageModulationTableNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetCoverageModulationTableNV_PreCall>( plugin.funcs_pre["CmdSetCoverageModulationTableNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationTableNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationTableNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationTableNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationTableNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationTableNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageModulationTableNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetShadingRateImageEnableNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetShadingRateImageEnableNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetShadingRateImageEnableNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetShadingRateImageEnableNV_PreCall>( plugin.funcs_pre["CmdSetShadingRateImageEnableNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetShadingRateImageEnableNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetShadingRateImageEnableNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetShadingRateImageEnableNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetShadingRateImageEnableNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetShadingRateImageEnableNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetShadingRateImageEnableNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRepresentativeFragmentTestEnableNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRepresentativeFragmentTestEnableNV>::Dispatch(manager,  args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetRepresentativeFragmentTestEnableNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetRepresentativeFragmentTestEnableNV_PreCall>( plugin.funcs_pre["CmdSetRepresentativeFragmentTestEnableNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetRepresentativeFragmentTestEnableNV>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRepresentativeFragmentTestEnableNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRepresentativeFragmentTestEnableNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRepresentativeFragmentTestEnableNV>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRepresentativeFragmentTestEnableNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetRepresentativeFragmentTestEnableNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageReductionModeNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageReductionModeNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetCoverageReductionModeNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetCoverageReductionModeNV_PreCall>( plugin.funcs_pre["CmdSetCoverageReductionModeNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetCoverageReductionModeNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageReductionModeNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageReductionModeNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageReductionModeNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageReductionModeNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetCoverageReductionModeNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceOpticalFlowImageFormatsNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceOpticalFlowImageFormatsNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceOpticalFlowImageFormatsNV_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceOpticalFlowImageFormatsNV_PreCall>( plugin.funcs_pre["GetPhysicalDeviceOpticalFlowImageFormatsNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceOpticalFlowImageFormatsNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceOpticalFlowImageFormatsNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceOpticalFlowImageFormatsNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceOpticalFlowImageFormatsNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceOpticalFlowImageFormatsNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceOpticalFlowImageFormatsNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateOpticalFlowSessionNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateOpticalFlowSessionNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateOpticalFlowSessionNV_PreCall func = reinterpret_cast<plugins::PFN_CreateOpticalFlowSessionNV_PreCall>( plugin.funcs_pre["CreateOpticalFlowSessionNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateOpticalFlowSessionNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateOpticalFlowSessionNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateOpticalFlowSessionNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateOpticalFlowSessionNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateOpticalFlowSessionNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateOpticalFlowSessionNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyOpticalFlowSessionNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyOpticalFlowSessionNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyOpticalFlowSessionNV_PreCall func = reinterpret_cast<plugins::PFN_DestroyOpticalFlowSessionNV_PreCall>( plugin.funcs_pre["DestroyOpticalFlowSessionNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyOpticalFlowSessionNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyOpticalFlowSessionNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyOpticalFlowSessionNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyOpticalFlowSessionNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyOpticalFlowSessionNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyOpticalFlowSessionNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkBindOpticalFlowSessionImageNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkBindOpticalFlowSessionImageNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_BindOpticalFlowSessionImageNV_PreCall func = reinterpret_cast<plugins::PFN_BindOpticalFlowSessionImageNV_PreCall>( plugin.funcs_pre["BindOpticalFlowSessionImageNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkBindOpticalFlowSessionImageNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkBindOpticalFlowSessionImageNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindOpticalFlowSessionImageNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindOpticalFlowSessionImageNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindOpticalFlowSessionImageNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindOpticalFlowSessionImageNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdOpticalFlowExecuteNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdOpticalFlowExecuteNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdOpticalFlowExecuteNV_PreCall func = reinterpret_cast<plugins::PFN_CmdOpticalFlowExecuteNV_PreCall>( plugin.funcs_pre["CmdOpticalFlowExecuteNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdOpticalFlowExecuteNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdOpticalFlowExecuteNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdOpticalFlowExecuteNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdOpticalFlowExecuteNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdOpticalFlowExecuteNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdOpticalFlowExecuteNV>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawMeshTasksEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawMeshTasksEXT_PreCall>( plugin.funcs_pre["CmdDrawMeshTasksEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawMeshTasksIndirectEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawMeshTasksIndirectEXT_PreCall>( plugin.funcs_pre["CmdDrawMeshTasksIndirectEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectCountEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectCountEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawMeshTasksIndirectCountEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawMeshTasksIndirectCountEXT_PreCall>( plugin.funcs_pre["CmdDrawMeshTasksIndirectCountEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectCountEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectCountEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectCountEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectCountEXT>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectCountEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawMeshTasksIndirectCountEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkReleaseSwapchainImagesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkReleaseSwapchainImagesEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_ReleaseSwapchainImagesEXT_PreCall func = reinterpret_cast<plugins::PFN_ReleaseSwapchainImagesEXT_PreCall>( plugin.funcs_pre["ReleaseSwapchainImagesEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkReleaseSwapchainImagesEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkReleaseSwapchainImagesEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkReleaseSwapchainImagesEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkReleaseSwapchainImagesEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkReleaseSwapchainImagesEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkReleaseSwapchainImagesEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawClusterHUAWEI>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawClusterHUAWEI>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawClusterHUAWEI_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawClusterHUAWEI_PreCall>( plugin.funcs_pre["CmdDrawClusterHUAWEI_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawClusterHUAWEI>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawClusterHUAWEI>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawClusterHUAWEI>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawClusterHUAWEI>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawClusterHUAWEI>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawClusterHUAWEI>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawClusterIndirectHUAWEI>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawClusterIndirectHUAWEI>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDrawClusterIndirectHUAWEI_PreCall func = reinterpret_cast<plugins::PFN_CmdDrawClusterIndirectHUAWEI_PreCall>( plugin.funcs_pre["CmdDrawClusterIndirectHUAWEI_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDrawClusterIndirectHUAWEI>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawClusterIndirectHUAWEI>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawClusterIndirectHUAWEI>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawClusterIndirectHUAWEI>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawClusterIndirectHUAWEI>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDrawClusterIndirectHUAWEI>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceVideoCapabilitiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceVideoCapabilitiesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceVideoCapabilitiesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceVideoCapabilitiesKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceVideoCapabilitiesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceVideoCapabilitiesKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceVideoCapabilitiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceVideoCapabilitiesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceVideoCapabilitiesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceVideoCapabilitiesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceVideoCapabilitiesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceVideoFormatPropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceVideoFormatPropertiesKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetPhysicalDeviceVideoFormatPropertiesKHR_PreCall func = reinterpret_cast<plugins::PFN_GetPhysicalDeviceVideoFormatPropertiesKHR_PreCall>( plugin.funcs_pre["GetPhysicalDeviceVideoFormatPropertiesKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceVideoFormatPropertiesKHR>::Dispatch(manager);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceVideoFormatPropertiesKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceVideoFormatPropertiesKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceVideoFormatPropertiesKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceVideoFormatPropertiesKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetPhysicalDeviceVideoFormatPropertiesKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateVideoSessionKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateVideoSessionKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateVideoSessionKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateVideoSessionKHR_PreCall>( plugin.funcs_pre["CreateVideoSessionKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateVideoSessionKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateVideoSessionKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateVideoSessionKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateVideoSessionKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateVideoSessionKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateVideoSessionKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyVideoSessionKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyVideoSessionKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyVideoSessionKHR_PreCall func = reinterpret_cast<plugins::PFN_DestroyVideoSessionKHR_PreCall>( plugin.funcs_pre["DestroyVideoSessionKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyVideoSessionKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyVideoSessionKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyVideoSessionKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyVideoSessionKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyVideoSessionKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyVideoSessionKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkGetVideoSessionMemoryRequirementsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkGetVideoSessionMemoryRequirementsKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_GetVideoSessionMemoryRequirementsKHR_PreCall func = reinterpret_cast<plugins::PFN_GetVideoSessionMemoryRequirementsKHR_PreCall>( plugin.funcs_pre["GetVideoSessionMemoryRequirementsKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkGetVideoSessionMemoryRequirementsKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkGetVideoSessionMemoryRequirementsKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetVideoSessionMemoryRequirementsKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetVideoSessionMemoryRequirementsKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkGetVideoSessionMemoryRequirementsKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkGetVideoSessionMemoryRequirementsKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkBindVideoSessionMemoryKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkBindVideoSessionMemoryKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_BindVideoSessionMemoryKHR_PreCall func = reinterpret_cast<plugins::PFN_BindVideoSessionMemoryKHR_PreCall>( plugin.funcs_pre["BindVideoSessionMemoryKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkBindVideoSessionMemoryKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkBindVideoSessionMemoryKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindVideoSessionMemoryKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindVideoSessionMemoryKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkBindVideoSessionMemoryKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkBindVideoSessionMemoryKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCreateVideoSessionParametersKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCreateVideoSessionParametersKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CreateVideoSessionParametersKHR_PreCall func = reinterpret_cast<plugins::PFN_CreateVideoSessionParametersKHR_PreCall>( plugin.funcs_pre["CreateVideoSessionParametersKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCreateVideoSessionParametersKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCreateVideoSessionParametersKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateVideoSessionParametersKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateVideoSessionParametersKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCreateVideoSessionParametersKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCreateVideoSessionParametersKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkUpdateVideoSessionParametersKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkUpdateVideoSessionParametersKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_UpdateVideoSessionParametersKHR_PreCall func = reinterpret_cast<plugins::PFN_UpdateVideoSessionParametersKHR_PreCall>( plugin.funcs_pre["UpdateVideoSessionParametersKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkUpdateVideoSessionParametersKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkUpdateVideoSessionParametersKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkUpdateVideoSessionParametersKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkUpdateVideoSessionParametersKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkUpdateVideoSessionParametersKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkUpdateVideoSessionParametersKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkDestroyVideoSessionParametersKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyVideoSessionParametersKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_DestroyVideoSessionParametersKHR_PreCall func = reinterpret_cast<plugins::PFN_DestroyVideoSessionParametersKHR_PreCall>( plugin.funcs_pre["DestroyVideoSessionParametersKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkDestroyVideoSessionParametersKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkDestroyVideoSessionParametersKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyVideoSessionParametersKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyVideoSessionParametersKHR>::Dispatch(manager);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyVideoSessionParametersKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkDestroyVideoSessionParametersKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginVideoCodingKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginVideoCodingKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdBeginVideoCodingKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdBeginVideoCodingKHR_PreCall>( plugin.funcs_pre["CmdBeginVideoCodingKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdBeginVideoCodingKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginVideoCodingKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginVideoCodingKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginVideoCodingKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginVideoCodingKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdBeginVideoCodingKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndVideoCodingKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndVideoCodingKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdEndVideoCodingKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdEndVideoCodingKHR_PreCall>( plugin.funcs_pre["CmdEndVideoCodingKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEndVideoCodingKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndVideoCodingKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndVideoCodingKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndVideoCodingKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndVideoCodingKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEndVideoCodingKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdControlVideoCodingKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdControlVideoCodingKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdControlVideoCodingKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdControlVideoCodingKHR_PreCall>( plugin.funcs_pre["CmdControlVideoCodingKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdControlVideoCodingKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdControlVideoCodingKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdControlVideoCodingKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdControlVideoCodingKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdControlVideoCodingKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdControlVideoCodingKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdDecodeVideoKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDecodeVideoKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdDecodeVideoKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdDecodeVideoKHR_PreCall>( plugin.funcs_pre["CmdDecodeVideoKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdDecodeVideoKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdDecodeVideoKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDecodeVideoKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDecodeVideoKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDecodeVideoKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdDecodeVideoKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdEncodeVideoKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEncodeVideoKHR>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdEncodeVideoKHR_PreCall func = reinterpret_cast<plugins::PFN_CmdEncodeVideoKHR_PreCall>( plugin.funcs_pre["CmdEncodeVideoKHR_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdEncodeVideoKHR>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdEncodeVideoKHR>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEncodeVideoKHR>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEncodeVideoKHR>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEncodeVideoKHR>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdEncodeVideoKHR>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleEnableEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDiscardRectangleEnableEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDiscardRectangleEnableEXT_PreCall>( plugin.funcs_pre["CmdSetDiscardRectangleEnableEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleEnableEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleEnableEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleEnableEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleEnableEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleEnableEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleEnableEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleModeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleModeEXT>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetDiscardRectangleModeEXT_PreCall func = reinterpret_cast<plugins::PFN_CmdSetDiscardRectangleModeEXT_PreCall>( plugin.funcs_pre["CmdSetDiscardRectangleModeEXT_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleModeEXT>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleModeEXT>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleModeEXT>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleModeEXT>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleModeEXT>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetDiscardRectangleModeEXT>::Dispatch(manager, result, args...);
        }
    }
};

template <>
struct EncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetExclusiveScissorEnableNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        assert(manager);

        CustomEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetExclusiveScissorEnableNV>::Dispatch(manager, args...);

        for (auto &plugin : manager->loaded_plugins_)
        {
            plugins::PFN_CmdSetExclusiveScissorEnableNV_PreCall func = reinterpret_cast<plugins::PFN_CmdSetExclusiveScissorEnableNV_PreCall>( plugin.funcs_pre["CmdSetExclusiveScissorEnableNV_PreCall"]);
            if (func) func(manager, args...);
            // PerfettoEncoderPreCall<format::ApiCallId::ApiCall_vkCmdSetExclusiveScissorEnableNV>::Dispatch(manager, args...);
        }
    }
};

template <>
struct EncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetExclusiveScissorEnableNV>
{
    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetExclusiveScissorEnableNV>::Dispatch(manager, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetExclusiveScissorEnableNV>::Dispatch(manager, args...);
        }
    }

    template <typename... Args>
    static void Dispatch(VulkanCaptureManager* manager, VkResult result, Args... args)
    {
        CustomEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetExclusiveScissorEnableNV>::Dispatch(manager, result, args...);

        if (manager->GetEmitPerfettoData())
        {
            // PerfettoEncoderPostCall<format::ApiCallId::ApiCall_vkCmdSetExclusiveScissorEnableNV>::Dispatch(manager, result, args...);
        }
    }
};

GFXRECON_END_NAMESPACE(encode)
GFXRECON_END_NAMESPACE(gfxrecon)

#endif // GFXRECON_ENCODE_GENERATED_VULKAN_ENCODER_COMMANDS_H
